//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Resourceenvironment;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.Assembly
{
    
    
    /// <summary>
    /// The default implementation of the EventSystemArchitecture class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/EventSystem")]
    [XmlNamespacePrefixAttribute("mediaStore")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/EventSystem#//EventSystemArchitecture/")]
    [DebuggerDisplayAttribute("EventSystemArchitecture {Name}")]
    public class EventSystemArchitecture : NMF.Models.Meta.Type, IEventSystemArchitecture, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Sender property
        /// </summary>
        private IResourceContainer _sender;
        
        /// <summary>
        /// The backing field for the Receiver property
        /// </summary>
        private IResourceContainer _receiver;
        
        /// <summary>
        /// The backing field for the ChannelReceiver property
        /// </summary>
        private IResourceContainer _channelReceiver;
        
        /// <summary>
        /// The backing field for the ChannelReceiver2 property
        /// </summary>
        private IResourceContainer _channelReceiver2;
        
        /// <summary>
        /// The backing field for the Channel property
        /// </summary>
        private IResourceContainer _channel;
        
        /// <summary>
        /// The backing field for the Environment property
        /// </summary>
        private IResourceEnvironment _environment;
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private IdentifierScope _identifierScope;
        
        /// <summary>
        /// The backing field for the References property
        /// </summary>
        private ReferenceTypeReferencesCollection _references;
        
        private static IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        public EventSystemArchitecture()
        {
            this._references = new ReferenceTypeReferencesCollection(this);
            this._references.CollectionChanging += this.ReferencesCollectionChanging;
            this._references.CollectionChanged += this.ReferencesCollectionChanged;
        }
        
        /// <summary>
        /// The Sender property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IResourceContainer Sender
        {
            get
            {
                return this._sender;
            }
            set
            {
                if ((this._sender != value))
                {
                    IResourceContainer old = this._sender;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSenderChanging(e);
                    this.OnPropertyChanging("Sender", e);
                    this._sender = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetSender;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetSender;
                    }
                    this.OnSenderChanged(e);
                    this.OnPropertyChanged("Sender", e);
                }
            }
        }
        
        /// <summary>
        /// The Receiver property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IResourceContainer Receiver
        {
            get
            {
                return this._receiver;
            }
            set
            {
                if ((this._receiver != value))
                {
                    IResourceContainer old = this._receiver;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiverChanging(e);
                    this.OnPropertyChanging("Receiver", e);
                    this._receiver = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetReceiver;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetReceiver;
                    }
                    this.OnReceiverChanged(e);
                    this.OnPropertyChanged("Receiver", e);
                }
            }
        }
        
        /// <summary>
        /// The ChannelReceiver property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IResourceContainer ChannelReceiver
        {
            get
            {
                return this._channelReceiver;
            }
            set
            {
                if ((this._channelReceiver != value))
                {
                    IResourceContainer old = this._channelReceiver;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChannelReceiverChanging(e);
                    this.OnPropertyChanging("ChannelReceiver", e);
                    this._channelReceiver = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetChannelReceiver;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetChannelReceiver;
                    }
                    this.OnChannelReceiverChanged(e);
                    this.OnPropertyChanged("ChannelReceiver", e);
                }
            }
        }
        
        /// <summary>
        /// The ChannelReceiver2 property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IResourceContainer ChannelReceiver2
        {
            get
            {
                return this._channelReceiver2;
            }
            set
            {
                if ((this._channelReceiver2 != value))
                {
                    IResourceContainer old = this._channelReceiver2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChannelReceiver2Changing(e);
                    this.OnPropertyChanging("ChannelReceiver2", e);
                    this._channelReceiver2 = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetChannelReceiver2;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetChannelReceiver2;
                    }
                    this.OnChannelReceiver2Changed(e);
                    this.OnPropertyChanged("ChannelReceiver2", e);
                }
            }
        }
        
        /// <summary>
        /// The Channel property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IResourceContainer Channel
        {
            get
            {
                return this._channel;
            }
            set
            {
                if ((this._channel != value))
                {
                    IResourceContainer old = this._channel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChannelChanging(e);
                    this.OnPropertyChanging("Channel", e);
                    this._channel = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetChannel;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetChannel;
                    }
                    this.OnChannelChanged(e);
                    this.OnPropertyChanged("Channel", e);
                }
            }
        }
        
        /// <summary>
        /// The Environment property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IResourceEnvironment Environment
        {
            get
            {
                return this._environment;
            }
            set
            {
                if ((this._environment != value))
                {
                    IResourceEnvironment old = this._environment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnvironmentChanging(e);
                    this.OnPropertyChanging("Environment", e);
                    this._environment = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEnvironment;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEnvironment;
                    }
                    this.OnEnvironmentChanged(e);
                    this.OnPropertyChanged("Environment", e);
                }
            }
        }
        
        ICollectionExpression<IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IAttribute> IStructuredType.Attributes
        {
            get
            {
                return EmptyList<IAttribute>.Instance;
            }
        }
        
        ICollectionExpression<IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<IAttributeConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IEvent> IReferenceType.Events
        {
            get
            {
                return EmptyList<IEvent>.Instance;
            }
        }
        
        ICollectionExpression<IOperation> IStructuredType.Operations
        {
            get
            {
                return EmptyList<IOperation>.Instance;
            }
        }
        
        IAttribute IClass.Identifier
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IClass> IClass.BaseTypes
        {
            get
            {
                return EmptyList<IClass>.Instance;
            }
        }
        
        bool IClass.IsAbstract
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [XmlAttributeAttribute(true)]
        public virtual IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e);
                }
            }
        }
        
        /// <summary>
        /// The References property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IReference> References
        {
            get
            {
                return this._references;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new EventSystemArchitectureChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EventSystemArchitectureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/EventSystem#//EventSystemArchitecture/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Sender property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SenderChanging;
        
        /// <summary>
        /// Gets fired when the Sender property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SenderChanged;
        
        /// <summary>
        /// Gets fired before the Receiver property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiverChanging;
        
        /// <summary>
        /// Gets fired when the Receiver property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiverChanged;
        
        /// <summary>
        /// Gets fired before the ChannelReceiver property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelReceiverChanging;
        
        /// <summary>
        /// Gets fired when the ChannelReceiver property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelReceiverChanged;
        
        /// <summary>
        /// Gets fired before the ChannelReceiver2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelReceiver2Changing;
        
        /// <summary>
        /// Gets fired when the ChannelReceiver2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelReceiver2Changed;
        
        /// <summary>
        /// Gets fired before the Channel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelChanging;
        
        /// <summary>
        /// Gets fired when the Channel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChannelChanged;
        
        /// <summary>
        /// Gets fired before the Environment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanging;
        
        /// <summary>
        /// Gets fired when the Environment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnvironmentChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Raises the SenderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSenderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SenderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SenderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSenderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SenderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Sender property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSender(object sender, System.EventArgs eventArgs)
        {
            this.Sender = null;
        }
        
        /// <summary>
        /// Raises the ReceiverChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiverChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiverChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiverChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiverChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiverChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Receiver property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReceiver(object sender, System.EventArgs eventArgs)
        {
            this.Receiver = null;
        }
        
        /// <summary>
        /// Raises the ChannelReceiverChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelReceiverChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelReceiverChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChannelReceiverChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelReceiverChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelReceiverChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChannelReceiver property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChannelReceiver(object sender, System.EventArgs eventArgs)
        {
            this.ChannelReceiver = null;
        }
        
        /// <summary>
        /// Raises the ChannelReceiver2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelReceiver2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelReceiver2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChannelReceiver2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelReceiver2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelReceiver2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChannelReceiver2 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChannelReceiver2(object sender, System.EventArgs eventArgs)
        {
            this.ChannelReceiver2 = null;
        }
        
        /// <summary>
        /// Raises the ChannelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChannelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChannelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChannelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Channel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChannel(object sender, System.EventArgs eventArgs)
        {
            this.Channel = null;
        }
        
        /// <summary>
        /// Raises the EnvironmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnvironmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnvironmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnvironmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Environment property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnvironment(object sender, System.EventArgs eventArgs)
        {
            this.Environment = null;
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("References", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("References", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Sender))
            {
                return ModelHelper.CreatePath("Sender");
            }
            if ((element == this.Receiver))
            {
                return ModelHelper.CreatePath("Receiver");
            }
            if ((element == this.ChannelReceiver))
            {
                return ModelHelper.CreatePath("ChannelReceiver");
            }
            if ((element == this.ChannelReceiver2))
            {
                return ModelHelper.CreatePath("ChannelReceiver2");
            }
            if ((element == this.Channel))
            {
                return ModelHelper.CreatePath("Channel");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SENDER"))
            {
                return this.Sender;
            }
            if ((reference == "RECEIVER"))
            {
                return this.Receiver;
            }
            if ((reference == "CHANNELRECEIVER"))
            {
                return this.ChannelReceiver;
            }
            if ((reference == "CHANNELRECEIVER2"))
            {
                return this.ChannelReceiver2;
            }
            if ((reference == "CHANNEL"))
            {
                return this.Channel;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REFERENCES"))
            {
                return this._references;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SENDER"))
            {
                this.Sender = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "RECEIVER"))
            {
                this.Receiver = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "CHANNELRECEIVER"))
            {
                this.ChannelReceiver = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "CHANNELRECEIVER2"))
            {
                this.ChannelReceiver2 = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "CHANNEL"))
            {
                this.Channel = ((IResourceContainer)(value));
                return;
            }
            if ((feature == "ENVIRONMENT"))
            {
                this.Environment = ((IResourceEnvironment)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SENDER"))
            {
                return new SenderProxy(this);
            }
            if ((attribute == "RECEIVER"))
            {
                return new ReceiverProxy(this);
            }
            if ((attribute == "CHANNELRECEIVER"))
            {
                return new ChannelReceiverProxy(this);
            }
            if ((attribute == "CHANNELRECEIVER2"))
            {
                return new ChannelReceiver2Proxy(this);
            }
            if ((attribute == "CHANNEL"))
            {
                return new ChannelProxy(this);
            }
            if ((attribute == "ENVIRONMENT"))
            {
                return new EnvironmentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SENDER"))
            {
                return new SenderProxy(this);
            }
            if ((reference == "RECEIVER"))
            {
                return new ReceiverProxy(this);
            }
            if ((reference == "CHANNELRECEIVER"))
            {
                return new ChannelReceiverProxy(this);
            }
            if ((reference == "CHANNELRECEIVER2"))
            {
                return new ChannelReceiver2Proxy(this);
            }
            if ((reference == "CHANNEL"))
            {
                return new ChannelProxy(this);
            }
            if ((reference == "ENVIRONMENT"))
            {
                return new EnvironmentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/EventSystem#//EventSystemArchitecture/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventSystemArchitecture class
        /// </summary>
        public class EventSystemArchitectureChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventSystemArchitecture _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventSystemArchitectureChildrenCollection(EventSystemArchitecture parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Sender != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Receiver != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChannelReceiver != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChannelReceiver2 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Channel != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.References.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SenderChanged += this.PropagateValueChanges;
                this._parent.ReceiverChanged += this.PropagateValueChanges;
                this._parent.ChannelReceiverChanged += this.PropagateValueChanges;
                this._parent.ChannelReceiver2Changed += this.PropagateValueChanges;
                this._parent.ChannelChanged += this.PropagateValueChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SenderChanged -= this.PropagateValueChanges;
                this._parent.ReceiverChanged -= this.PropagateValueChanges;
                this._parent.ChannelReceiverChanged -= this.PropagateValueChanges;
                this._parent.ChannelReceiver2Changed -= this.PropagateValueChanges;
                this._parent.ChannelChanged -= this.PropagateValueChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Sender == null))
                {
                    IResourceContainer senderCasted = item.As<IResourceContainer>();
                    if ((senderCasted != null))
                    {
                        this._parent.Sender = senderCasted;
                        return;
                    }
                }
                if ((this._parent.Receiver == null))
                {
                    IResourceContainer receiverCasted = item.As<IResourceContainer>();
                    if ((receiverCasted != null))
                    {
                        this._parent.Receiver = receiverCasted;
                        return;
                    }
                }
                if ((this._parent.ChannelReceiver == null))
                {
                    IResourceContainer channelReceiverCasted = item.As<IResourceContainer>();
                    if ((channelReceiverCasted != null))
                    {
                        this._parent.ChannelReceiver = channelReceiverCasted;
                        return;
                    }
                }
                if ((this._parent.ChannelReceiver2 == null))
                {
                    IResourceContainer channelReceiver2Casted = item.As<IResourceContainer>();
                    if ((channelReceiver2Casted != null))
                    {
                        this._parent.ChannelReceiver2 = channelReceiver2Casted;
                        return;
                    }
                }
                if ((this._parent.Channel == null))
                {
                    IResourceContainer channelCasted = item.As<IResourceContainer>();
                    if ((channelCasted != null))
                    {
                        this._parent.Channel = channelCasted;
                        return;
                    }
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Sender = null;
                this._parent.Receiver = null;
                this._parent.ChannelReceiver = null;
                this._parent.ChannelReceiver2 = null;
                this._parent.Channel = null;
                this._parent.References.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Sender))
                {
                    return true;
                }
                if ((item == this._parent.Receiver))
                {
                    return true;
                }
                if ((item == this._parent.ChannelReceiver))
                {
                    return true;
                }
                if ((item == this._parent.ChannelReceiver2))
                {
                    return true;
                }
                if ((item == this._parent.Channel))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Sender != null))
                {
                    array[arrayIndex] = this._parent.Sender;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Receiver != null))
                {
                    array[arrayIndex] = this._parent.Receiver;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChannelReceiver != null))
                {
                    array[arrayIndex] = this._parent.ChannelReceiver;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChannelReceiver2 != null))
                {
                    array[arrayIndex] = this._parent.ChannelReceiver2;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Channel != null))
                {
                    array[arrayIndex] = this._parent.Channel;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Sender == item))
                {
                    this._parent.Sender = null;
                    return true;
                }
                if ((this._parent.Receiver == item))
                {
                    this._parent.Receiver = null;
                    return true;
                }
                if ((this._parent.ChannelReceiver == item))
                {
                    this._parent.ChannelReceiver = null;
                    return true;
                }
                if ((this._parent.ChannelReceiver2 == item))
                {
                    this._parent.ChannelReceiver2 = null;
                    return true;
                }
                if ((this._parent.Channel == item))
                {
                    this._parent.Channel = null;
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Sender).Concat(this._parent.Receiver).Concat(this._parent.ChannelReceiver).Concat(this._parent.ChannelReceiver2).Concat(this._parent.Channel).Concat(this._parent.References).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventSystemArchitecture class
        /// </summary>
        public class EventSystemArchitectureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventSystemArchitecture _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventSystemArchitectureReferencedElementsCollection(EventSystemArchitecture parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Sender != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Receiver != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChannelReceiver != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ChannelReceiver2 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Channel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Environment != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.References.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SenderChanged += this.PropagateValueChanges;
                this._parent.ReceiverChanged += this.PropagateValueChanges;
                this._parent.ChannelReceiverChanged += this.PropagateValueChanges;
                this._parent.ChannelReceiver2Changed += this.PropagateValueChanges;
                this._parent.ChannelChanged += this.PropagateValueChanges;
                this._parent.EnvironmentChanged += this.PropagateValueChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SenderChanged -= this.PropagateValueChanges;
                this._parent.ReceiverChanged -= this.PropagateValueChanges;
                this._parent.ChannelReceiverChanged -= this.PropagateValueChanges;
                this._parent.ChannelReceiver2Changed -= this.PropagateValueChanges;
                this._parent.ChannelChanged -= this.PropagateValueChanges;
                this._parent.EnvironmentChanged -= this.PropagateValueChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Sender == null))
                {
                    IResourceContainer senderCasted = item.As<IResourceContainer>();
                    if ((senderCasted != null))
                    {
                        this._parent.Sender = senderCasted;
                        return;
                    }
                }
                if ((this._parent.Receiver == null))
                {
                    IResourceContainer receiverCasted = item.As<IResourceContainer>();
                    if ((receiverCasted != null))
                    {
                        this._parent.Receiver = receiverCasted;
                        return;
                    }
                }
                if ((this._parent.ChannelReceiver == null))
                {
                    IResourceContainer channelReceiverCasted = item.As<IResourceContainer>();
                    if ((channelReceiverCasted != null))
                    {
                        this._parent.ChannelReceiver = channelReceiverCasted;
                        return;
                    }
                }
                if ((this._parent.ChannelReceiver2 == null))
                {
                    IResourceContainer channelReceiver2Casted = item.As<IResourceContainer>();
                    if ((channelReceiver2Casted != null))
                    {
                        this._parent.ChannelReceiver2 = channelReceiver2Casted;
                        return;
                    }
                }
                if ((this._parent.Channel == null))
                {
                    IResourceContainer channelCasted = item.As<IResourceContainer>();
                    if ((channelCasted != null))
                    {
                        this._parent.Channel = channelCasted;
                        return;
                    }
                }
                if ((this._parent.Environment == null))
                {
                    IResourceEnvironment environmentCasted = item.As<IResourceEnvironment>();
                    if ((environmentCasted != null))
                    {
                        this._parent.Environment = environmentCasted;
                        return;
                    }
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Sender = null;
                this._parent.Receiver = null;
                this._parent.ChannelReceiver = null;
                this._parent.ChannelReceiver2 = null;
                this._parent.Channel = null;
                this._parent.Environment = null;
                this._parent.References.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Sender))
                {
                    return true;
                }
                if ((item == this._parent.Receiver))
                {
                    return true;
                }
                if ((item == this._parent.ChannelReceiver))
                {
                    return true;
                }
                if ((item == this._parent.ChannelReceiver2))
                {
                    return true;
                }
                if ((item == this._parent.Channel))
                {
                    return true;
                }
                if ((item == this._parent.Environment))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Sender != null))
                {
                    array[arrayIndex] = this._parent.Sender;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Receiver != null))
                {
                    array[arrayIndex] = this._parent.Receiver;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChannelReceiver != null))
                {
                    array[arrayIndex] = this._parent.ChannelReceiver;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ChannelReceiver2 != null))
                {
                    array[arrayIndex] = this._parent.ChannelReceiver2;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Channel != null))
                {
                    array[arrayIndex] = this._parent.Channel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Environment != null))
                {
                    array[arrayIndex] = this._parent.Environment;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Sender == item))
                {
                    this._parent.Sender = null;
                    return true;
                }
                if ((this._parent.Receiver == item))
                {
                    this._parent.Receiver = null;
                    return true;
                }
                if ((this._parent.ChannelReceiver == item))
                {
                    this._parent.ChannelReceiver = null;
                    return true;
                }
                if ((this._parent.ChannelReceiver2 == item))
                {
                    this._parent.ChannelReceiver2 = null;
                    return true;
                }
                if ((this._parent.Channel == item))
                {
                    this._parent.Channel = null;
                    return true;
                }
                if ((this._parent.Environment == item))
                {
                    this._parent.Environment = null;
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Sender).Concat(this._parent.Receiver).Concat(this._parent.ChannelReceiver).Concat(this._parent.ChannelReceiver2).Concat(this._parent.Channel).Concat(this._parent.Environment).Concat(this._parent.References).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Sender property
        /// </summary>
        private sealed class SenderProxy : ModelPropertyChange<IEventSystemArchitecture, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SenderProxy(IEventSystemArchitecture modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.Sender;
                }
                set
                {
                    this.ModelElement.Sender = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SenderChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SenderChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Receiver property
        /// </summary>
        private sealed class ReceiverProxy : ModelPropertyChange<IEventSystemArchitecture, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiverProxy(IEventSystemArchitecture modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.Receiver;
                }
                set
                {
                    this.ModelElement.Receiver = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiverChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReceiverChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChannelReceiver property
        /// </summary>
        private sealed class ChannelReceiverProxy : ModelPropertyChange<IEventSystemArchitecture, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChannelReceiverProxy(IEventSystemArchitecture modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.ChannelReceiver;
                }
                set
                {
                    this.ModelElement.ChannelReceiver = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChannelReceiverChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChannelReceiverChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChannelReceiver2 property
        /// </summary>
        private sealed class ChannelReceiver2Proxy : ModelPropertyChange<IEventSystemArchitecture, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChannelReceiver2Proxy(IEventSystemArchitecture modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.ChannelReceiver2;
                }
                set
                {
                    this.ModelElement.ChannelReceiver2 = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChannelReceiver2Changed += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChannelReceiver2Changed -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Channel property
        /// </summary>
        private sealed class ChannelProxy : ModelPropertyChange<IEventSystemArchitecture, IResourceContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChannelProxy(IEventSystemArchitecture modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceContainer Value
            {
                get
                {
                    return this.ModelElement.Channel;
                }
                set
                {
                    this.ModelElement.Channel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChannelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChannelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Environment property
        /// </summary>
        private sealed class EnvironmentProxy : ModelPropertyChange<ISystemDeployment, IResourceEnvironment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnvironmentProxy(ISystemDeployment modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceEnvironment Value
            {
                get
                {
                    return this.ModelElement.Environment;
                }
                set
                {
                    this.ModelElement.Environment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnvironmentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnvironmentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
    }
}

