//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Qosannotations.Qos_reliability;
using Metamodel.DeepPCM.Repository;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.Seff;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Reliability
{
    
    
    /// <summary>
    /// The default implementation of the InternalFailureOccurrenceDescription class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Reliability/1.0")]
    [XmlNamespacePrefixAttribute("reliability")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//reliability//InternalFailureOccurrenceD" +
        "escription/")]
    public class InternalFailureOccurrenceDescription : FailureOccurrenceDescription, IInternalFailureOccurrenceDescription, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SoftwareInducedFailureType__InternalFailureOccurrenceDescription property
        /// </summary>
        private ISoftwareInducedFailureType _softwareInducedFailureType__InternalFailureOccurrenceDescription;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The internalAction__InternalFailureOccurrenceDescription property
        /// </summary>
        [XmlElementNameAttribute("internalAction__InternalFailureOccurrenceDescription")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("internalFailureOccurrenceDescriptions__InternalAction")]
        public virtual IInternalAction InternalAction__InternalFailureOccurrenceDescription
        {
            get
            {
                return ModelHelper.CastAs<IInternalAction>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The softwareInducedFailureType__InternalFailureOccurrenceDescription property
        /// </summary>
        [XmlElementNameAttribute("softwareInducedFailureType__InternalFailureOccurrenceDescription")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("internalFailureOccurrenceDescriptions__SoftwareInducedFailureType")]
        public virtual ISoftwareInducedFailureType SoftwareInducedFailureType__InternalFailureOccurrenceDescription
        {
            get
            {
                return this._softwareInducedFailureType__InternalFailureOccurrenceDescription;
            }
            set
            {
                if ((this._softwareInducedFailureType__InternalFailureOccurrenceDescription != value))
                {
                    ISoftwareInducedFailureType old = this._softwareInducedFailureType__InternalFailureOccurrenceDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanging(e);
                    this.OnPropertyChanging("SoftwareInducedFailureType__InternalFailureOccurrenceDescription", e);
                    this._softwareInducedFailureType__InternalFailureOccurrenceDescription = value;
                    if ((old != null))
                    {
                        old.InternalFailureOccurrenceDescriptions__SoftwareInducedFailureType.Remove(this);
                        old.Deleted -= this.OnResetSoftwareInducedFailureType__InternalFailureOccurrenceDescription;
                    }
                    if ((value != null))
                    {
                        if ((value.InternalFailureOccurrenceDescriptions__SoftwareInducedFailureType.Contains(this) != true))
                        {
                            value.InternalFailureOccurrenceDescriptions__SoftwareInducedFailureType.Add(this);
                        }
                        value.Deleted += this.OnResetSoftwareInducedFailureType__InternalFailureOccurrenceDescription;
                    }
                    this.OnSoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged(e);
                    this.OnPropertyChanged("SoftwareInducedFailureType__InternalFailureOccurrenceDescription", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InternalFailureOccurrenceDescriptionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//reliability//InternalFailureOccurrenceD" +
                            "escription/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the InternalAction__InternalFailureOccurrenceDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InternalAction__InternalFailureOccurrenceDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the InternalAction__InternalFailureOccurrenceDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InternalAction__InternalFailureOccurrenceDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the SoftwareInducedFailureType__InternalFailureOccurrenceDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the SoftwareInducedFailureType__InternalFailureOccurrenceDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged;
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="diagnostics"></param>
        /// <param name="context"></param>
        private void NoResourceTimeoutFailureAllowedForInternalFailureOccurrenceDescription(object diagnostics, object context)
        {
            if ((diagnostics != null))
            {
                throw new ArgumentNullException("diagnostics");
            }
            if ((context != null))
            {
                throw new ArgumentNullException("context");
            }
            throw new NotImplementedException();
        }
        
        /// <summary>
        /// Raises the InternalAction__InternalFailureOccurrenceDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInternalAction__InternalFailureOccurrenceDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InternalAction__InternalFailureOccurrenceDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IInternalAction oldInternalAction__InternalFailureOccurrenceDescription = ModelHelper.CastAs<IInternalAction>(oldParent);
            IInternalAction newInternalAction__InternalFailureOccurrenceDescription = ModelHelper.CastAs<IInternalAction>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldInternalAction__InternalFailureOccurrenceDescription, newInternalAction__InternalFailureOccurrenceDescription);
            this.OnInternalAction__InternalFailureOccurrenceDescriptionChanging(e);
            this.OnPropertyChanging("InternalAction__InternalFailureOccurrenceDescription");
        }
        
        /// <summary>
        /// Raises the InternalAction__InternalFailureOccurrenceDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInternalAction__InternalFailureOccurrenceDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InternalAction__InternalFailureOccurrenceDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IInternalAction oldInternalAction__InternalFailureOccurrenceDescription = ModelHelper.CastAs<IInternalAction>(oldParent);
            IInternalAction newInternalAction__InternalFailureOccurrenceDescription = ModelHelper.CastAs<IInternalAction>(newParent);
            if ((oldInternalAction__InternalFailureOccurrenceDescription != null))
            {
                oldInternalAction__InternalFailureOccurrenceDescription.InternalFailureOccurrenceDescriptions__InternalAction.Remove(this);
            }
            if ((newInternalAction__InternalFailureOccurrenceDescription != null))
            {
                newInternalAction__InternalFailureOccurrenceDescription.InternalFailureOccurrenceDescriptions__InternalAction.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldInternalAction__InternalFailureOccurrenceDescription, newInternalAction__InternalFailureOccurrenceDescription);
            this.OnInternalAction__InternalFailureOccurrenceDescriptionChanged(e);
            this.OnPropertyChanged("InternalAction__InternalFailureOccurrenceDescription", e);
        }
        
        /// <summary>
        /// Raises the SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SoftwareInducedFailureType__InternalFailureOccurrenceDescription property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSoftwareInducedFailureType__InternalFailureOccurrenceDescription(object sender, System.EventArgs eventArgs)
        {
            this.SoftwareInducedFailureType__InternalFailureOccurrenceDescription = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INTERNALACTION__INTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                this.InternalAction__InternalFailureOccurrenceDescription = ((IInternalAction)(value));
                return;
            }
            if ((feature == "SOFTWAREINDUCEDFAILURETYPE__INTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                this.SoftwareInducedFailureType__InternalFailureOccurrenceDescription = ((ISoftwareInducedFailureType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "INTERNALACTION__INTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new InternalAction__InternalFailureOccurrenceDescriptionProxy(this);
            }
            if ((attribute == "SOFTWAREINDUCEDFAILURETYPE__INTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "INTERNALACTION__INTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new InternalAction__InternalFailureOccurrenceDescriptionProxy(this);
            }
            if ((reference == "SOFTWAREINDUCEDFAILURETYPE__INTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//reliability//InternalFailureOccurrenceD" +
                        "escription/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InternalFailureOccurrenceDescription class
        /// </summary>
        public class InternalFailureOccurrenceDescriptionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InternalFailureOccurrenceDescription _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InternalFailureOccurrenceDescriptionReferencedElementsCollection(InternalFailureOccurrenceDescription parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.InternalAction__InternalFailureOccurrenceDescription != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.InternalAction__InternalFailureOccurrenceDescriptionChanged += this.PropagateValueChanges;
                this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.InternalAction__InternalFailureOccurrenceDescriptionChanged -= this.PropagateValueChanges;
                this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.InternalAction__InternalFailureOccurrenceDescription == null))
                {
                    IInternalAction internalAction__InternalFailureOccurrenceDescriptionCasted = item.As<IInternalAction>();
                    if ((internalAction__InternalFailureOccurrenceDescriptionCasted != null))
                    {
                        this._parent.InternalAction__InternalFailureOccurrenceDescription = internalAction__InternalFailureOccurrenceDescriptionCasted;
                        return;
                    }
                }
                if ((this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription == null))
                {
                    ISoftwareInducedFailureType softwareInducedFailureType__InternalFailureOccurrenceDescriptionCasted = item.As<ISoftwareInducedFailureType>();
                    if ((softwareInducedFailureType__InternalFailureOccurrenceDescriptionCasted != null))
                    {
                        this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription = softwareInducedFailureType__InternalFailureOccurrenceDescriptionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.InternalAction__InternalFailureOccurrenceDescription = null;
                this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.InternalAction__InternalFailureOccurrenceDescription))
                {
                    return true;
                }
                if ((item == this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.InternalAction__InternalFailureOccurrenceDescription != null))
                {
                    array[arrayIndex] = this._parent.InternalAction__InternalFailureOccurrenceDescription;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription != null))
                {
                    array[arrayIndex] = this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.InternalAction__InternalFailureOccurrenceDescription == item))
                {
                    this._parent.InternalAction__InternalFailureOccurrenceDescription = null;
                    return true;
                }
                if ((this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription == item))
                {
                    this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.InternalAction__InternalFailureOccurrenceDescription).Concat(this._parent.SoftwareInducedFailureType__InternalFailureOccurrenceDescription).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the internalAction__InternalFailureOccurrenceDescription property
        /// </summary>
        private sealed class InternalAction__InternalFailureOccurrenceDescriptionProxy : ModelPropertyChange<IInternalFailureOccurrenceDescription, IInternalAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InternalAction__InternalFailureOccurrenceDescriptionProxy(IInternalFailureOccurrenceDescription modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInternalAction Value
            {
                get
                {
                    return this.ModelElement.InternalAction__InternalFailureOccurrenceDescription;
                }
                set
                {
                    this.ModelElement.InternalAction__InternalFailureOccurrenceDescription = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InternalAction__InternalFailureOccurrenceDescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InternalAction__InternalFailureOccurrenceDescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the softwareInducedFailureType__InternalFailureOccurrenceDescription property
        /// </summary>
        private sealed class SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionProxy : ModelPropertyChange<IInternalFailureOccurrenceDescription, ISoftwareInducedFailureType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionProxy(IInternalFailureOccurrenceDescription modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISoftwareInducedFailureType Value
            {
                get
                {
                    return this.ModelElement.SoftwareInducedFailureType__InternalFailureOccurrenceDescription;
                }
                set
                {
                    this.ModelElement.SoftwareInducedFailureType__InternalFailureOccurrenceDescription = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SoftwareInducedFailureType__InternalFailureOccurrenceDescriptionChanged -= handler;
            }
        }
    }
}

