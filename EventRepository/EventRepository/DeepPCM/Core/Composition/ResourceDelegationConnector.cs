//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Repository;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the ResourceDelegationConnector class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Core/Composition/1.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//core//composition//ResourceDelegationCo" +
        "nnector/")]
    public class ResourceDelegationConnector : ModelElement, IResourceDelegationConnector, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ResourcePort property
        /// </summary>
        private IResourceRequiredInterface _resourcePort;
        
        /// <summary>
        /// The backing field for the AssemblyContext__ResourceDelegationConnector property
        /// </summary>
        private IAssemblyContext _assemblyContext__ResourceDelegationConnector;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ResourcePort property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IResourceRequiredInterface ResourcePort
        {
            get
            {
                return this._resourcePort;
            }
            set
            {
                if ((this._resourcePort != value))
                {
                    IResourceRequiredInterface old = this._resourcePort;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourcePortChanging(e);
                    this.OnPropertyChanging("ResourcePort", e);
                    this._resourcePort = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetResourcePort;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetResourcePort;
                    }
                    this.OnResourcePortChanged(e);
                    this.OnPropertyChanged("ResourcePort", e);
                }
            }
        }
        
        /// <summary>
        /// The assemblyContext__ResourceDelegationConnector property
        /// </summary>
        [XmlElementNameAttribute("assemblyContext__ResourceDelegationConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext AssemblyContext__ResourceDelegationConnector
        {
            get
            {
                return this._assemblyContext__ResourceDelegationConnector;
            }
            set
            {
                if ((this._assemblyContext__ResourceDelegationConnector != value))
                {
                    IAssemblyContext old = this._assemblyContext__ResourceDelegationConnector;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyContext__ResourceDelegationConnectorChanging(e);
                    this.OnPropertyChanging("AssemblyContext__ResourceDelegationConnector", e);
                    this._assemblyContext__ResourceDelegationConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAssemblyContext__ResourceDelegationConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAssemblyContext__ResourceDelegationConnector;
                    }
                    this.OnAssemblyContext__ResourceDelegationConnectorChanged(e);
                    this.OnPropertyChanged("AssemblyContext__ResourceDelegationConnector", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceDelegationConnectorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//core//composition//ResourceDelegationCo" +
                            "nnector/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourcePort property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourcePortChanging;
        
        /// <summary>
        /// Gets fired when the ResourcePort property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourcePortChanged;
        
        /// <summary>
        /// Gets fired before the AssemblyContext__ResourceDelegationConnector property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssemblyContext__ResourceDelegationConnectorChanging;
        
        /// <summary>
        /// Gets fired when the AssemblyContext__ResourceDelegationConnector property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssemblyContext__ResourceDelegationConnectorChanged;
        
        /// <summary>
        /// Raises the ResourcePortChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourcePortChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourcePortChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourcePortChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourcePortChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourcePortChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResourcePort property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResourcePort(object sender, System.EventArgs eventArgs)
        {
            this.ResourcePort = null;
        }
        
        /// <summary>
        /// Raises the AssemblyContext__ResourceDelegationConnectorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext__ResourceDelegationConnectorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext__ResourceDelegationConnectorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssemblyContext__ResourceDelegationConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext__ResourceDelegationConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext__ResourceDelegationConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssemblyContext__ResourceDelegationConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssemblyContext__ResourceDelegationConnector(object sender, System.EventArgs eventArgs)
        {
            this.AssemblyContext__ResourceDelegationConnector = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCEPORT"))
            {
                this.ResourcePort = ((IResourceRequiredInterface)(value));
                return;
            }
            if ((feature == "ASSEMBLYCONTEXT__RESOURCEDELEGATIONCONNECTOR"))
            {
                this.AssemblyContext__ResourceDelegationConnector = ((IAssemblyContext)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RESOURCEPORT"))
            {
                return new ResourcePortProxy(this);
            }
            if ((attribute == "ASSEMBLYCONTEXT__RESOURCEDELEGATIONCONNECTOR"))
            {
                return new AssemblyContext__ResourceDelegationConnectorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RESOURCEPORT"))
            {
                return new ResourcePortProxy(this);
            }
            if ((reference == "ASSEMBLYCONTEXT__RESOURCEDELEGATIONCONNECTOR"))
            {
                return new AssemblyContext__ResourceDelegationConnectorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//core//composition//ResourceDelegationCo" +
                        "nnector/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceDelegationConnector class
        /// </summary>
        public class ResourceDelegationConnectorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceDelegationConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceDelegationConnectorReferencedElementsCollection(ResourceDelegationConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ResourcePort != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssemblyContext__ResourceDelegationConnector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourcePortChanged += this.PropagateValueChanges;
                this._parent.AssemblyContext__ResourceDelegationConnectorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourcePortChanged -= this.PropagateValueChanges;
                this._parent.AssemblyContext__ResourceDelegationConnectorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ResourcePort == null))
                {
                    IResourceRequiredInterface resourcePortCasted = item.As<IResourceRequiredInterface>();
                    if ((resourcePortCasted != null))
                    {
                        this._parent.ResourcePort = resourcePortCasted;
                        return;
                    }
                }
                if ((this._parent.AssemblyContext__ResourceDelegationConnector == null))
                {
                    IAssemblyContext assemblyContext__ResourceDelegationConnectorCasted = item.As<IAssemblyContext>();
                    if ((assemblyContext__ResourceDelegationConnectorCasted != null))
                    {
                        this._parent.AssemblyContext__ResourceDelegationConnector = assemblyContext__ResourceDelegationConnectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourcePort = null;
                this._parent.AssemblyContext__ResourceDelegationConnector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ResourcePort))
                {
                    return true;
                }
                if ((item == this._parent.AssemblyContext__ResourceDelegationConnector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ResourcePort != null))
                {
                    array[arrayIndex] = this._parent.ResourcePort;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssemblyContext__ResourceDelegationConnector != null))
                {
                    array[arrayIndex] = this._parent.AssemblyContext__ResourceDelegationConnector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ResourcePort == item))
                {
                    this._parent.ResourcePort = null;
                    return true;
                }
                if ((this._parent.AssemblyContext__ResourceDelegationConnector == item))
                {
                    this._parent.AssemblyContext__ResourceDelegationConnector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourcePort).Concat(this._parent.AssemblyContext__ResourceDelegationConnector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ResourcePort property
        /// </summary>
        private sealed class ResourcePortProxy : ModelPropertyChange<IResourceDelegationConnector, IResourceRequiredInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourcePortProxy(IResourceDelegationConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceRequiredInterface Value
            {
                get
                {
                    return this.ModelElement.ResourcePort;
                }
                set
                {
                    this.ModelElement.ResourcePort = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourcePortChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourcePortChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the assemblyContext__ResourceDelegationConnector property
        /// </summary>
        private sealed class AssemblyContext__ResourceDelegationConnectorProxy : ModelPropertyChange<IResourceDelegationConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyContext__ResourceDelegationConnectorProxy(IResourceDelegationConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.AssemblyContext__ResourceDelegationConnector;
                }
                set
                {
                    this.ModelElement.AssemblyContext__ResourceDelegationConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext__ResourceDelegationConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext__ResourceDelegationConnectorChanged -= handler;
            }
        }
    }
}

