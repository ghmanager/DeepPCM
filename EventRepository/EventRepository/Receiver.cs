//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Repository;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.System0;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.Repo
{
    
    
    /// <summary>
    /// The default implementation of the Receiver class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/EventRepo")]
    [XmlNamespacePrefixAttribute("repo")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/EventRepo#//Receiver/")]
    [DebuggerDisplayAttribute("Receiver {Name}")]
    public class Receiver : EventPublisher, IReceiver, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BasicSubscriber property
        /// </summary>
        private IEventGroup _basicSubscriber;
        
        /// <summary>
        /// The backing field for the ConfigParameterUsages__AssemblyContext property
        /// </summary>
        private AssemblyContextConfigParameterUsages__AssemblyContextCollection _configParameterUsages__AssemblyContext;
        
        private static IReferenceType _ReferenceType = NMF.Models.Repository.MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//resourceenvironment//ResourceContainer/" +
                "").As<IReferenceType>();
        
        /// <summary>
        /// The backing field for the Opposite property
        /// </summary>
        private IReference _opposite;
        
        /// <summary>
        /// The backing field for the Anchor property
        /// </summary>
        private IClass _anchor;
        
        private static IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IReference.RefinesChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.RefinesChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanged
        {
            add
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanged += value;
            }
            remove
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanging
        {
            add
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanging += value;
            }
            remove
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanging -= value;
            }
        }
        
        public Receiver()
        {
            this._configParameterUsages__AssemblyContext = new AssemblyContextConfigParameterUsages__AssemblyContextCollection(this);
            this._configParameterUsages__AssemblyContext.CollectionChanging += this.ConfigParameterUsages__AssemblyContextCollectionChanging;
            this._configParameterUsages__AssemblyContext.CollectionChanged += this.ConfigParameterUsages__AssemblyContextCollectionChanged;
        }
        
        /// <summary>
        /// The BasicSubscriber property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IEventGroup BasicSubscriber
        {
            get
            {
                return this._basicSubscriber;
            }
            set
            {
                if ((this._basicSubscriber != value))
                {
                    IEventGroup old = this._basicSubscriber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBasicSubscriberChanging(e);
                    this.OnPropertyChanging("BasicSubscriber", e);
                    this._basicSubscriber = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBasicSubscriber;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBasicSubscriber;
                    }
                    this.OnBasicSubscriberChanged(e);
                    this.OnPropertyChanged("BasicSubscriber", e);
                }
            }
        }
        
        /// <summary>
        /// The composedStructure__AssemblyContext property
        /// </summary>
        [XmlElementNameAttribute("composedStructure__AssemblyContext")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("assemblyContexts__ComposedStructure")]
        public virtual IComposedStructure ComposedStructure__AssemblyContext
        {
            get
            {
                return ModelHelper.CastAs<IComposedStructure>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The configParameterUsages__AssemblyContext property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("configParameterUsages__AssemblyContext")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("assemblyContext__VariableUsage")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IVariableUsage> ConfigParameterUsages__AssemblyContext
        {
            get
            {
                return this._configParameterUsages__AssemblyContext;
            }
        }
        
        IReference IReference.Refines
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        IReferenceType IReference.ReferenceType
        {
            get
            {
                return _ReferenceType;
            }
            set
            {
                if ((value != _ReferenceType))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        int ITypedElement.LowerBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        int ITypedElement.UpperBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool IReference.IsContainment
        {
            get
            {
                return true;
            }
            set
            {
                if ((value != true))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsOrdered
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsUnique
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("References")]
        public virtual IReferenceType DeclaringType
        {
            get
            {
                return ModelHelper.CastAs<IReferenceType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The Opposite property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Opposite")]
        public virtual IReference Opposite
        {
            get
            {
                return this._opposite;
            }
            set
            {
                if ((this._opposite != value))
                {
                    IReference old = this._opposite;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOppositeChanging(e);
                    this.OnPropertyChanging("Opposite", e);
                    this._opposite = value;
                    if ((old != null))
                    {
                        old.Opposite = null;
                        old.Deleted -= this.OnResetOpposite;
                    }
                    if ((value != null))
                    {
                        value.Opposite = this;
                        value.Deleted += this.OnResetOpposite;
                    }
                    this.OnOppositeChanged(e);
                    this.OnPropertyChanged("Opposite", e);
                }
            }
        }
        
        /// <summary>
        /// The least common anchestor of an instance and its referenced element, if statically known
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IClass Anchor
        {
            get
            {
                return this._anchor;
            }
            set
            {
                if ((this._anchor != value))
                {
                    IClass old = this._anchor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorChanging(e);
                    this.OnPropertyChanging("Anchor", e);
                    this._anchor = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAnchor;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAnchor;
                    }
                    this.OnAnchorChanged(e);
                    this.OnPropertyChanged("Anchor", e);
                }
            }
        }
        
        IType ITypedElement.Type
        {
            get
            {
                IReference _this = this;
                if ((_this.ReferenceType != null))
                {
                    return _this.ReferenceType;
                }
                return null;
            }
            set
            {
                IReference _this = this;
                if ((value != null))
                {
                    IReferenceType @__ReferenceType = value.As<IReferenceType>();
                    if ((@__ReferenceType != null))
                    {
                        _this.ReferenceType = @__ReferenceType;
                        return;
                    }
                }
                else
                {
                    _this.ReferenceType = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReceiverReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the RepositoryComponent model for this type
        /// </summary>
        public new static IRepositoryComponent RepositoryComponentInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/EventRepo#//Receiver/")));
                }
                return ((IRepositoryComponent)(_classInstance));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/EventRepo#//Receiver/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BasicSubscriber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasicSubscriberChanging;
        
        /// <summary>
        /// Gets fired when the BasicSubscriber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasicSubscriberChanged;
        
        /// <summary>
        /// Gets fired before the ComposedStructure__AssemblyContext property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ComposedStructure__AssemblyContextChanging;
        
        /// <summary>
        /// Gets fired when the ComposedStructure__AssemblyContext property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ComposedStructure__AssemblyContextChanged;
        
        /// <summary>
        /// Gets fired before the DeclaringType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanging;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Gets fired before the Anchor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorChanging;
        
        /// <summary>
        /// Gets fired when the Anchor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorChanged;
        
        /// <summary>
        /// Raises the BasicSubscriberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasicSubscriberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasicSubscriberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasicSubscriberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasicSubscriberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasicSubscriberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BasicSubscriber property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBasicSubscriber(object sender, System.EventArgs eventArgs)
        {
            this.BasicSubscriber = null;
        }
        
        /// <summary>
        /// Raises the ComposedStructure__AssemblyContextChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnComposedStructure__AssemblyContextChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ComposedStructure__AssemblyContextChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ComposedStructure__AssemblyContextChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnComposedStructure__AssemblyContextChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ComposedStructure__AssemblyContextChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConfigParameterUsages__AssemblyContext property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConfigParameterUsages__AssemblyContextCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConfigParameterUsages__AssemblyContext", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConfigParameterUsages__AssemblyContext property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConfigParameterUsages__AssemblyContextCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConfigParameterUsages__AssemblyContext", e);
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IComposedStructure oldComposedStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(oldParent);
            IComposedStructure newComposedStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldComposedStructure__AssemblyContext, newComposedStructure__AssemblyContext);
            this.OnComposedStructure__AssemblyContextChanging(e);
            this.OnPropertyChanging("ComposedStructure__AssemblyContext");
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            this.OnDeclaringTypeChanging(e);
            this.OnPropertyChanging("DeclaringType");
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IComposedStructure oldComposedStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(oldParent);
            IComposedStructure newComposedStructure__AssemblyContext = ModelHelper.CastAs<IComposedStructure>(newParent);
            if ((oldComposedStructure__AssemblyContext != null))
            {
                oldComposedStructure__AssemblyContext.AssemblyContexts__ComposedStructure.Remove(this);
            }
            if ((newComposedStructure__AssemblyContext != null))
            {
                newComposedStructure__AssemblyContext.AssemblyContexts__ComposedStructure.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldComposedStructure__AssemblyContext, newComposedStructure__AssemblyContext);
            this.OnComposedStructure__AssemblyContextChanged(e);
            this.OnPropertyChanged("ComposedStructure__AssemblyContext", e);
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            if ((oldDeclaringType != null))
            {
                oldDeclaringType.References.Remove(this);
            }
            if ((newDeclaringType != null))
            {
                newDeclaringType.References.Add(this);
            }
            this.OnDeclaringTypeChanged(e);
            this.OnPropertyChanged("DeclaringType", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Raises the OppositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpposite(object sender, System.EventArgs eventArgs)
        {
            this.Opposite = null;
        }
        
        /// <summary>
        /// Raises the AnchorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Anchor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAnchor(object sender, System.EventArgs eventArgs)
        {
            this.Anchor = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONFIGPARAMETERUSAGES__ASSEMBLYCONTEXT"))
            {
                return this._configParameterUsages__AssemblyContext;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BASICSUBSCRIBER"))
            {
                this.BasicSubscriber = ((IEventGroup)(value));
                return;
            }
            if ((feature == "COMPOSEDSTRUCTURE__ASSEMBLYCONTEXT"))
            {
                this.ComposedStructure__AssemblyContext = ((IComposedStructure)(value));
                return;
            }
            if ((feature == "DECLARINGTYPE"))
            {
                this.DeclaringType = ((IReferenceType)(value));
                return;
            }
            if ((feature == "OPPOSITE"))
            {
                this.Opposite = ((IReference)(value));
                return;
            }
            if ((feature == "ANCHOR"))
            {
                this.Anchor = ((IClass)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BASICSUBSCRIBER"))
            {
                return new BasicSubscriberProxy(this);
            }
            if ((attribute == "COMPOSEDSTRUCTURE__ASSEMBLYCONTEXT"))
            {
                return new ComposedStructure__AssemblyContextProxy(this);
            }
            if ((attribute == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((attribute == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            if ((attribute == "ANCHOR"))
            {
                return new AnchorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BASICSUBSCRIBER"))
            {
                return new BasicSubscriberProxy(this);
            }
            if ((reference == "COMPOSEDSTRUCTURE__ASSEMBLYCONTEXT"))
            {
                return new ComposedStructure__AssemblyContextProxy(this);
            }
            if ((reference == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((reference == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            if ((reference == "ANCHOR"))
            {
                return new AnchorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the RepositoryComponent for this model element
        /// </summary>
        public virtual IRepositoryComponent GetRepositoryComponent()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/EventRepo#//Receiver/")));
            }
            return ((IRepositoryComponent)(_classInstance));
        }
        
        /// <summary>
        /// Gets the referenced value for a resourceRequiredInterfaces of the enclosing RepositoryComponent.
        /// </summary>
        public virtual IModelElement GetResourceRequiredInterfacesValue(IResourceRequiredInterface reference)
        {
            return ((IModelElement)(this.GetReferencedElement(reference)));
        }
        
        /// <summary>
        /// Gets the referenced value for a RequiredInterfaces of the enclosing RepositoryComponent.
        /// </summary>
        public virtual IModelElement GetRequiredInterfacesValue(IRequiredInterface reference)
        {
            return ((IModelElement)(this.GetReferencedElement(reference)));
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/EventRepo#//Receiver/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Receiver class
        /// </summary>
        public class ReceiverReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Receiver _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReceiverReferencedElementsCollection(Receiver parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.BasicSubscriber != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ComposedStructure__AssemblyContext != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConfigParameterUsages__AssemblyContext.Count);
                    if ((this._parent.DeclaringType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opposite != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Anchor != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BasicSubscriberChanged += this.PropagateValueChanges;
                this._parent.ComposedStructure__AssemblyContextChanged += this.PropagateValueChanges;
                this._parent.ConfigParameterUsages__AssemblyContext.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DeclaringTypeChanged += this.PropagateValueChanges;
                this._parent.OppositeChanged += this.PropagateValueChanges;
                this._parent.AnchorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BasicSubscriberChanged -= this.PropagateValueChanges;
                this._parent.ComposedStructure__AssemblyContextChanged -= this.PropagateValueChanges;
                this._parent.ConfigParameterUsages__AssemblyContext.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DeclaringTypeChanged -= this.PropagateValueChanges;
                this._parent.OppositeChanged -= this.PropagateValueChanges;
                this._parent.AnchorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.BasicSubscriber == null))
                {
                    IEventGroup basicSubscriberCasted = item.As<IEventGroup>();
                    if ((basicSubscriberCasted != null))
                    {
                        this._parent.BasicSubscriber = basicSubscriberCasted;
                        return;
                    }
                }
                if ((this._parent.ComposedStructure__AssemblyContext == null))
                {
                    IComposedStructure composedStructure__AssemblyContextCasted = item.As<IComposedStructure>();
                    if ((composedStructure__AssemblyContextCasted != null))
                    {
                        this._parent.ComposedStructure__AssemblyContext = composedStructure__AssemblyContextCasted;
                        return;
                    }
                }
                IVariableUsage configParameterUsages__AssemblyContextCasted = item.As<IVariableUsage>();
                if ((configParameterUsages__AssemblyContextCasted != null))
                {
                    this._parent.ConfigParameterUsages__AssemblyContext.Add(configParameterUsages__AssemblyContextCasted);
                }
                if ((this._parent.DeclaringType == null))
                {
                    IReferenceType declaringTypeCasted = item.As<IReferenceType>();
                    if ((declaringTypeCasted != null))
                    {
                        this._parent.DeclaringType = declaringTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Opposite == null))
                {
                    IReference oppositeCasted = item.As<IReference>();
                    if ((oppositeCasted != null))
                    {
                        this._parent.Opposite = oppositeCasted;
                        return;
                    }
                }
                if ((this._parent.Anchor == null))
                {
                    IClass anchorCasted = item.As<IClass>();
                    if ((anchorCasted != null))
                    {
                        this._parent.Anchor = anchorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BasicSubscriber = null;
                this._parent.ComposedStructure__AssemblyContext = null;
                this._parent.ConfigParameterUsages__AssemblyContext.Clear();
                this._parent.DeclaringType = null;
                this._parent.Opposite = null;
                this._parent.Anchor = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.BasicSubscriber))
                {
                    return true;
                }
                if ((item == this._parent.ComposedStructure__AssemblyContext))
                {
                    return true;
                }
                if (this._parent.ConfigParameterUsages__AssemblyContext.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DeclaringType))
                {
                    return true;
                }
                if ((item == this._parent.Opposite))
                {
                    return true;
                }
                if ((item == this._parent.Anchor))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.BasicSubscriber != null))
                {
                    array[arrayIndex] = this._parent.BasicSubscriber;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ComposedStructure__AssemblyContext != null))
                {
                    array[arrayIndex] = this._parent.ComposedStructure__AssemblyContext;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> configParameterUsages__AssemblyContextEnumerator = this._parent.ConfigParameterUsages__AssemblyContext.GetEnumerator();
                try
                {
                    for (
                    ; configParameterUsages__AssemblyContextEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = configParameterUsages__AssemblyContextEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    configParameterUsages__AssemblyContextEnumerator.Dispose();
                }
                if ((this._parent.DeclaringType != null))
                {
                    array[arrayIndex] = this._parent.DeclaringType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opposite != null))
                {
                    array[arrayIndex] = this._parent.Opposite;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Anchor != null))
                {
                    array[arrayIndex] = this._parent.Anchor;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.BasicSubscriber == item))
                {
                    this._parent.BasicSubscriber = null;
                    return true;
                }
                if ((this._parent.ComposedStructure__AssemblyContext == item))
                {
                    this._parent.ComposedStructure__AssemblyContext = null;
                    return true;
                }
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.ConfigParameterUsages__AssemblyContext.Remove(variableUsageItem)))
                {
                    return true;
                }
                if ((this._parent.DeclaringType == item))
                {
                    this._parent.DeclaringType = null;
                    return true;
                }
                if ((this._parent.Opposite == item))
                {
                    this._parent.Opposite = null;
                    return true;
                }
                if ((this._parent.Anchor == item))
                {
                    this._parent.Anchor = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BasicSubscriber).Concat(this._parent.ComposedStructure__AssemblyContext).Concat(this._parent.ConfigParameterUsages__AssemblyContext).Concat(this._parent.DeclaringType).Concat(this._parent.Opposite).Concat(this._parent.Anchor).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BasicSubscriber property
        /// </summary>
        private sealed class BasicSubscriberProxy : ModelPropertyChange<IReceiver, IEventGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BasicSubscriberProxy(IReceiver modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEventGroup Value
            {
                get
                {
                    return this.ModelElement.BasicSubscriber;
                }
                set
                {
                    this.ModelElement.BasicSubscriber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasicSubscriberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasicSubscriberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the composedStructure__AssemblyContext property
        /// </summary>
        private sealed class ComposedStructure__AssemblyContextProxy : ModelPropertyChange<IAssemblyContext, IComposedStructure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ComposedStructure__AssemblyContextProxy(IAssemblyContext modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IComposedStructure Value
            {
                get
                {
                    return this.ModelElement.ComposedStructure__AssemblyContext;
                }
                set
                {
                    this.ModelElement.ComposedStructure__AssemblyContext = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ComposedStructure__AssemblyContextChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ComposedStructure__AssemblyContextChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsContainment property
        /// </summary>
        private sealed class IsContainmentProxy : ModelPropertyChange<IReference, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsContainmentProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsContainment;
                }
                set
                {
                    this.ModelElement.IsContainment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsContainmentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsContainmentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeclaringType property
        /// </summary>
        private sealed class DeclaringTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeclaringTypeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.DeclaringType;
                }
                set
                {
                    this.ModelElement.DeclaringType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeclaringTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeclaringTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Opposite property
        /// </summary>
        private sealed class OppositeProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppositeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Opposite;
                }
                set
                {
                    this.ModelElement.Opposite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReferenceType property
        /// </summary>
        private sealed class ReferenceTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceTypeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.ReferenceType;
                }
                set
                {
                    this.ModelElement.ReferenceType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferenceTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferenceTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Refines property
        /// </summary>
        private sealed class RefinesProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefinesProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Refines;
                }
                set
                {
                    this.ModelElement.Refines = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefinesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefinesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Anchor property
        /// </summary>
        private sealed class AnchorProxy : ModelPropertyChange<IReference, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.Anchor;
                }
                set
                {
                    this.ModelElement.Anchor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LowerBound property
        /// </summary>
        private sealed class LowerBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerBoundProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowerBound;
                }
                set
                {
                    this.ModelElement.LowerBound = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerBoundChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerBoundChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UpperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperBoundChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperBoundChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<ITypedElement, IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
    }
}

