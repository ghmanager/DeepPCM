//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core;
using DeepPCM.Deeppcm.Core.Composition;
using DeepPCM.Deeppcm.Core.Entity;
using DeepPCM.Deeppcm.Parameter;
using DeepPCM.Deeppcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Usagemodel
{
    
    
    /// <summary>
    /// The default implementation of the AbstractUserAction class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0")]
    [XmlNamespacePrefixAttribute("usagemodel")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//AbstractUserAction" +
        "/")]
    [DebuggerDisplayAttribute("AbstractUserAction {Id}")]
    public abstract class AbstractUserAction : DeepPCM.Deeppcm.Core.Entity.Entity, IAbstractUserAction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Successor property
        /// </summary>
        private IAbstractUserAction _successor;
        
        /// <summary>
        /// The backing field for the Predecessor property
        /// </summary>
        private IAbstractUserAction _predecessor;
        
        /// <summary>
        /// The successor property
        /// </summary>
        [XmlElementNameAttribute("successor")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("predecessor")]
        public virtual IAbstractUserAction Successor
        {
            get
            {
                return this._successor;
            }
            set
            {
                if ((this._successor != value))
                {
                    IAbstractUserAction old = this._successor;
                    this._successor = value;
                    if ((old != null))
                    {
                        old.Predecessor = null;
                        old.Deleted -= this.OnResetSuccessor;
                    }
                    if ((value != null))
                    {
                        value.Predecessor = this;
                        value.Deleted += this.OnResetSuccessor;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuccessorChanged(e);
                    this.OnPropertyChanged("Successor", e);
                }
            }
        }
        
        /// <summary>
        /// The predecessor property
        /// </summary>
        [XmlElementNameAttribute("predecessor")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("successor")]
        public virtual IAbstractUserAction Predecessor
        {
            get
            {
                return this._predecessor;
            }
            set
            {
                if ((this._predecessor != value))
                {
                    IAbstractUserAction old = this._predecessor;
                    this._predecessor = value;
                    if ((old != null))
                    {
                        old.Successor = null;
                        old.Deleted -= this.OnResetPredecessor;
                    }
                    if ((value != null))
                    {
                        value.Successor = this;
                        value.Deleted += this.OnResetPredecessor;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPredecessorChanged(e);
                    this.OnPropertyChanged("Predecessor", e);
                }
            }
        }
        
        /// <summary>
        /// The scenarioBehaviour_AbstractUserAction property
        /// </summary>
        [XmlElementNameAttribute("scenarioBehaviour_AbstractUserAction")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("actions_ScenarioBehaviour")]
        public virtual IScenarioBehaviour ScenarioBehaviour_AbstractUserAction
        {
            get
            {
                return ModelHelper.CastAs<IScenarioBehaviour>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AbstractUserActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//AbstractUserAction" +
                        "/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Successor property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SuccessorChanged;
        
        /// <summary>
        /// Gets fired when the Predecessor property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> PredecessorChanged;
        
        /// <summary>
        /// Gets fired when the ScenarioBehaviour_AbstractUserAction property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ScenarioBehaviour_AbstractUserActionChanged;
        
        /// <summary>
        /// Raises the SuccessorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuccessorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SuccessorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Successor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSuccessor(object sender, EventArgs eventArgs)
        {
            this.Successor = null;
        }
        
        /// <summary>
        /// Raises the PredecessorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPredecessorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.PredecessorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Predecessor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPredecessor(object sender, EventArgs eventArgs)
        {
            this.Predecessor = null;
        }
        
        /// <summary>
        /// Raises the ScenarioBehaviour_AbstractUserActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScenarioBehaviour_AbstractUserActionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ScenarioBehaviour_AbstractUserActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IScenarioBehaviour oldScenarioBehaviour_AbstractUserAction = ModelHelper.CastAs<IScenarioBehaviour>(oldParent);
            IScenarioBehaviour newScenarioBehaviour_AbstractUserAction = ModelHelper.CastAs<IScenarioBehaviour>(newParent);
            if ((oldScenarioBehaviour_AbstractUserAction != null))
            {
                oldScenarioBehaviour_AbstractUserAction.Actions_ScenarioBehaviour.Remove(this);
            }
            if ((newScenarioBehaviour_AbstractUserAction != null))
            {
                newScenarioBehaviour_AbstractUserAction.Actions_ScenarioBehaviour.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldScenarioBehaviour_AbstractUserAction, newScenarioBehaviour_AbstractUserAction);
            this.OnScenarioBehaviour_AbstractUserActionChanged(e);
            this.OnPropertyChanged("ScenarioBehaviour_AbstractUserAction", e);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUCCESSOR"))
            {
                this.Successor = ((IAbstractUserAction)(value));
                return;
            }
            if ((feature == "PREDECESSOR"))
            {
                this.Predecessor = ((IAbstractUserAction)(value));
                return;
            }
            if ((feature == "SCENARIOBEHAVIOUR_ABSTRACTUSERACTION"))
            {
                this.ScenarioBehaviour_AbstractUserAction = ((IScenarioBehaviour)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SUCCESSOR"))
            {
                return new SuccessorProxy(this);
            }
            if ((attribute == "PREDECESSOR"))
            {
                return new PredecessorProxy(this);
            }
            if ((attribute == "SCENARIOBEHAVIOUR_ABSTRACTUSERACTION"))
            {
                return new ScenarioBehaviour_AbstractUserActionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SUCCESSOR"))
            {
                return new SuccessorProxy(this);
            }
            if ((reference == "PREDECESSOR"))
            {
                return new PredecessorProxy(this);
            }
            if ((reference == "SCENARIOBEHAVIOUR_ABSTRACTUSERACTION"))
            {
                return new ScenarioBehaviour_AbstractUserActionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//AbstractUserAction" +
                    "/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AbstractUserAction class
        /// </summary>
        public class AbstractUserActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AbstractUserAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AbstractUserActionReferencedElementsCollection(AbstractUserAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Successor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Predecessor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ScenarioBehaviour_AbstractUserAction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SuccessorChanged += this.PropagateValueChanges;
                this._parent.PredecessorChanged += this.PropagateValueChanges;
                this._parent.ScenarioBehaviour_AbstractUserActionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SuccessorChanged -= this.PropagateValueChanges;
                this._parent.PredecessorChanged -= this.PropagateValueChanges;
                this._parent.ScenarioBehaviour_AbstractUserActionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Successor == null))
                {
                    IAbstractUserAction successorCasted = item.As<IAbstractUserAction>();
                    if ((successorCasted != null))
                    {
                        this._parent.Successor = successorCasted;
                        return;
                    }
                }
                if ((this._parent.Predecessor == null))
                {
                    IAbstractUserAction predecessorCasted = item.As<IAbstractUserAction>();
                    if ((predecessorCasted != null))
                    {
                        this._parent.Predecessor = predecessorCasted;
                        return;
                    }
                }
                if ((this._parent.ScenarioBehaviour_AbstractUserAction == null))
                {
                    IScenarioBehaviour scenarioBehaviour_AbstractUserActionCasted = item.As<IScenarioBehaviour>();
                    if ((scenarioBehaviour_AbstractUserActionCasted != null))
                    {
                        this._parent.ScenarioBehaviour_AbstractUserAction = scenarioBehaviour_AbstractUserActionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Successor = null;
                this._parent.Predecessor = null;
                this._parent.ScenarioBehaviour_AbstractUserAction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Successor))
                {
                    return true;
                }
                if ((item == this._parent.Predecessor))
                {
                    return true;
                }
                if ((item == this._parent.ScenarioBehaviour_AbstractUserAction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Successor != null))
                {
                    array[arrayIndex] = this._parent.Successor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Predecessor != null))
                {
                    array[arrayIndex] = this._parent.Predecessor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ScenarioBehaviour_AbstractUserAction != null))
                {
                    array[arrayIndex] = this._parent.ScenarioBehaviour_AbstractUserAction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Successor == item))
                {
                    this._parent.Successor = null;
                    return true;
                }
                if ((this._parent.Predecessor == item))
                {
                    this._parent.Predecessor = null;
                    return true;
                }
                if ((this._parent.ScenarioBehaviour_AbstractUserAction == item))
                {
                    this._parent.ScenarioBehaviour_AbstractUserAction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Successor).Concat(this._parent.Predecessor).Concat(this._parent.ScenarioBehaviour_AbstractUserAction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the successor property
        /// </summary>
        private sealed class SuccessorProxy : ModelPropertyChange<IAbstractUserAction, IAbstractUserAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuccessorProxy(IAbstractUserAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractUserAction Value
            {
                get
                {
                    return this.ModelElement.Successor;
                }
                set
                {
                    this.ModelElement.Successor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SuccessorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SuccessorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the predecessor property
        /// </summary>
        private sealed class PredecessorProxy : ModelPropertyChange<IAbstractUserAction, IAbstractUserAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PredecessorProxy(IAbstractUserAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractUserAction Value
            {
                get
                {
                    return this.ModelElement.Predecessor;
                }
                set
                {
                    this.ModelElement.Predecessor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PredecessorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PredecessorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scenarioBehaviour_AbstractUserAction property
        /// </summary>
        private sealed class ScenarioBehaviour_AbstractUserActionProxy : ModelPropertyChange<IAbstractUserAction, IScenarioBehaviour>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScenarioBehaviour_AbstractUserActionProxy(IAbstractUserAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScenarioBehaviour Value
            {
                get
                {
                    return this.ModelElement.ScenarioBehaviour_AbstractUserAction;
                }
                set
                {
                    this.ModelElement.ScenarioBehaviour_AbstractUserAction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScenarioBehaviour_AbstractUserActionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScenarioBehaviour_AbstractUserActionChanged -= handler;
            }
        }
    }
}

