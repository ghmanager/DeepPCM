//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core.Composition;
using DeepPCM.Deeppcm.Core.Entity;
using DeepPCM.Deeppcm.Qosannotations;
using DeepPCM.Deeppcm.Repository;
using DeepPCM.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.System0
{
    
    
    /// <summary>
    /// The default implementation of the System class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/System/5.0")]
    [XmlNamespacePrefixAttribute("system0")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//system0//System/")]
    [DebuggerDisplayAttribute("System0 {Id}")]
    public class System0 : NMF.Models.Meta.Type, ISystem0, IModelElement
    {
        
        /// <summary>
        /// The backing field for the QosAnnotations_System property
        /// </summary>
        private SystemQosAnnotations_SystemCollection _qosAnnotations_System;
        
        /// <summary>
        /// The backing field for the AssemblyContexts__ComposedStructure property
        /// </summary>
        private ComposedStructureAssemblyContexts__ComposedStructureCollection _assemblyContexts__ComposedStructure;
        
        /// <summary>
        /// The backing field for the EventChannel__ComposedStructure property
        /// </summary>
        private ComposedStructureEventChannel__ComposedStructureCollection _eventChannel__ComposedStructure;
        
        /// <summary>
        /// The backing field for the Connectors__ComposedStructure property
        /// </summary>
        private ComposedStructureConnectors__ComposedStructureCollection _connectors__ComposedStructure;
        
        /// <summary>
        /// The backing field for the ProvidedInterfaces property
        /// </summary>
        private ObservableAssociationList<IInterface> _providedInterfaces;
        
        /// <summary>
        /// The backing field for the RequiredInterfaces property
        /// </summary>
        private ObservableCompositionList<IRequiredInterface> _requiredInterfaces;
        
        /// <summary>
        /// The backing field for the ResourceRequiredRoles__ResourceInterfaceRequiringEntity property
        /// </summary>
        private DeepPCM.Deeppcm.Core.Entity.ResourceInterfaceRequiringEntityResourceRequiredRoles__ResourceInterfaceRequiringEntityCollection _resourceRequiredRoles__ResourceInterfaceRequiringEntity;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private IdentifierScope _identifierScope;
        
        /// <summary>
        /// The backing field for the References property
        /// </summary>
        private ReferenceTypeReferencesCollection _references;
        
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        
        public System0()
        {
            this._qosAnnotations_System = new SystemQosAnnotations_SystemCollection(this);
            this._qosAnnotations_System.CollectionChanged += this.QosAnnotations_SystemCollectionChanged;
            this._assemblyContexts__ComposedStructure = new ComposedStructureAssemblyContexts__ComposedStructureCollection(this);
            this._assemblyContexts__ComposedStructure.CollectionChanged += this.AssemblyContexts__ComposedStructureCollectionChanged;
            this._eventChannel__ComposedStructure = new ComposedStructureEventChannel__ComposedStructureCollection(this);
            this._eventChannel__ComposedStructure.CollectionChanged += this.EventChannel__ComposedStructureCollectionChanged;
            this._connectors__ComposedStructure = new ComposedStructureConnectors__ComposedStructureCollection(this);
            this._connectors__ComposedStructure.CollectionChanged += this.Connectors__ComposedStructureCollectionChanged;
            this._providedInterfaces = new ObservableAssociationList<IInterface>();
            this._providedInterfaces.CollectionChanged += this.ProvidedInterfacesCollectionChanged;
            this._requiredInterfaces = new ObservableCompositionList<IRequiredInterface>(this);
            this._requiredInterfaces.CollectionChanged += this.RequiredInterfacesCollectionChanged;
            this._resourceRequiredRoles__ResourceInterfaceRequiringEntity = new ResourceInterfaceRequiringEntityResourceRequiredRoles__ResourceInterfaceRequiringEntityCollection(this);
            this._resourceRequiredRoles__ResourceInterfaceRequiringEntity.CollectionChanged += this.ResourceRequiredRoles__ResourceInterfaceRequiringEntityCollectionChanged;
            this._references = new ReferenceTypeReferencesCollection(this);
            this._references.CollectionChanged += this.ReferencesCollectionChanged;
        }
        
        /// <summary>
        /// The qosAnnotations_System property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("qosAnnotations_System")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("system_QoSAnnotations")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IQoSAnnotations> QosAnnotations_System
        {
            get
            {
                return this._qosAnnotations_System;
            }
        }
        
        ICollectionExpression<IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IAttribute> IStructuredType.Attributes
        {
            get
            {
                return EmptyList<IAttribute>.Instance;
            }
        }
        
        ICollectionExpression<IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<IAttributeConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IEvent> IReferenceType.Events
        {
            get
            {
                return EmptyList<IEvent>.Instance;
            }
        }
        
        ICollectionExpression<IOperation> IStructuredType.Operations
        {
            get
            {
                return EmptyList<IOperation>.Instance;
            }
        }
        
        IAttribute IClass.Identifier
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IClass> IClass.BaseTypes
        {
            get
            {
                return new SystemBaseTypesCollection(this);
            }
        }
        
        bool IClass.IsAbstract
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// The assemblyContexts__ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("assemblyContexts__ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("composedStructure__AssemblyContext")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IAssemblyContext> AssemblyContexts__ComposedStructure
        {
            get
            {
                return this._assemblyContexts__ComposedStructure;
            }
        }
        
        /// <summary>
        /// The eventChannel__ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eventChannel__ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentStructure__EventChannel")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IEventChannel> EventChannel__ComposedStructure
        {
            get
            {
                return this._eventChannel__ComposedStructure;
            }
        }
        
        /// <summary>
        /// The connectors__ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("connectors__ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentStructure__Connector")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IConnector> Connectors__ComposedStructure
        {
            get
            {
                return this._connectors__ComposedStructure;
            }
        }
        
        /// <summary>
        /// The ProvidedInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IInterface> ProvidedInterfaces
        {
            get
            {
                return this._providedInterfaces;
            }
        }
        
        /// <summary>
        /// The RequiredInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IRequiredInterface> RequiredInterfaces
        {
            get
            {
                return this._requiredInterfaces;
            }
        }
        
        /// <summary>
        /// The resourceRequiredRoles__ResourceInterfaceRequiringEntity property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("resourceRequiredRoles__ResourceInterfaceRequiringEntity")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceInterfaceRequiringEntity__ResourceRequiredRole")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IResourceRequiredRole> ResourceRequiredRoles__ResourceInterfaceRequiringEntity
        {
            get
            {
                return this._resourceRequiredRoles__ResourceInterfaceRequiringEntity;
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    this._id = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public virtual string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    this._entityName = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [XmlAttributeAttribute(true)]
        public virtual IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    IdentifierScope old = this._identifierScope;
                    this._identifierScope = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e);
                }
            }
        }
        
        /// <summary>
        /// The References property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IReference> References
        {
            get
            {
                return this._references;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SystemChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SystemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//system0//System/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Forwards change notifications for the QosAnnotations_System property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QosAnnotations_SystemCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("QosAnnotations_System", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the AssemblyContexts__ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssemblyContexts__ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssemblyContexts__ComposedStructure", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the EventChannel__ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventChannel__ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EventChannel__ComposedStructure", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the Connectors__ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Connectors__ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Connectors__ComposedStructure", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedInterfaces", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RequiredInterfaces", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the ResourceRequiredRoles__ResourceInterfaceRequiringEntity property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceRequiredRoles__ResourceInterfaceRequiringEntityCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceRequiredRoles__ResourceInterfaceRequiringEntity", e);
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards change notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("References", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "QOSANNOTATIONS_SYSTEM"))
            {
                return this._qosAnnotations_System;
            }
            if ((feature == "ASSEMBLYCONTEXTS__COMPOSEDSTRUCTURE"))
            {
                return this._assemblyContexts__ComposedStructure;
            }
            if ((feature == "EVENTCHANNEL__COMPOSEDSTRUCTURE"))
            {
                return this._eventChannel__ComposedStructure;
            }
            if ((feature == "CONNECTORS__COMPOSEDSTRUCTURE"))
            {
                return this._connectors__ComposedStructure;
            }
            if ((feature == "PROVIDEDINTERFACES"))
            {
                return this._providedInterfaces;
            }
            if ((feature == "REQUIREDINTERFACES"))
            {
                return this._requiredInterfaces;
            }
            if ((feature == "RESOURCEREQUIREDROLES__RESOURCEINTERFACEREQUIRINGENTITY"))
            {
                return this._resourceRequiredRoles__ResourceInterfaceRequiringEntity;
            }
            if ((feature == "REFERENCES"))
            {
                return this._references;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//system0//System/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the System class
        /// </summary>
        public class SystemChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private System0 _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SystemChildrenCollection(System0 parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.QosAnnotations_System.Count);
                    count = (count + this._parent.AssemblyContexts__ComposedStructure.Count);
                    count = (count + this._parent.EventChannel__ComposedStructure.Count);
                    count = (count + this._parent.Connectors__ComposedStructure.Count);
                    count = (count + this._parent.RequiredInterfaces.Count);
                    count = (count + this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Count);
                    count = (count + this._parent.References.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.QosAnnotations_System.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.QosAnnotations_System.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IQoSAnnotations qosAnnotations_SystemCasted = item.As<IQoSAnnotations>();
                if ((qosAnnotations_SystemCasted != null))
                {
                    this._parent.QosAnnotations_System.Add(qosAnnotations_SystemCasted);
                }
                IAssemblyContext assemblyContexts__ComposedStructureCasted = item.As<IAssemblyContext>();
                if ((assemblyContexts__ComposedStructureCasted != null))
                {
                    this._parent.AssemblyContexts__ComposedStructure.Add(assemblyContexts__ComposedStructureCasted);
                }
                IEventChannel eventChannel__ComposedStructureCasted = item.As<IEventChannel>();
                if ((eventChannel__ComposedStructureCasted != null))
                {
                    this._parent.EventChannel__ComposedStructure.Add(eventChannel__ComposedStructureCasted);
                }
                IConnector connectors__ComposedStructureCasted = item.As<IConnector>();
                if ((connectors__ComposedStructureCasted != null))
                {
                    this._parent.Connectors__ComposedStructure.Add(connectors__ComposedStructureCasted);
                }
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                IResourceRequiredRole resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted = item.As<IResourceRequiredRole>();
                if ((resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted != null))
                {
                    this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Add(resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted);
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.QosAnnotations_System.Clear();
                this._parent.AssemblyContexts__ComposedStructure.Clear();
                this._parent.EventChannel__ComposedStructure.Clear();
                this._parent.Connectors__ComposedStructure.Clear();
                this._parent.RequiredInterfaces.Clear();
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Clear();
                this._parent.References.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.QosAnnotations_System.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssemblyContexts__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannel__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.Connectors__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Contains(item))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> qosAnnotations_SystemEnumerator = this._parent.QosAnnotations_System.GetEnumerator();
                try
                {
                    for (
                    ; qosAnnotations_SystemEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qosAnnotations_SystemEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qosAnnotations_SystemEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assemblyContexts__ComposedStructureEnumerator = this._parent.AssemblyContexts__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; assemblyContexts__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assemblyContexts__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assemblyContexts__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannel__ComposedStructureEnumerator = this._parent.EventChannel__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; eventChannel__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannel__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannel__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> connectors__ComposedStructureEnumerator = this._parent.Connectors__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; connectors__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectors__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectors__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator = this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.GetEnumerator();
                try
                {
                    for (
                    ; resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IQoSAnnotations qoSAnnotationsItem = item.As<IQoSAnnotations>();
                if (((qoSAnnotationsItem != null) 
                            && this._parent.QosAnnotations_System.Remove(qoSAnnotationsItem)))
                {
                    return true;
                }
                IAssemblyContext assemblyContextItem = item.As<IAssemblyContext>();
                if (((assemblyContextItem != null) 
                            && this._parent.AssemblyContexts__ComposedStructure.Remove(assemblyContextItem)))
                {
                    return true;
                }
                IEventChannel eventChannelItem = item.As<IEventChannel>();
                if (((eventChannelItem != null) 
                            && this._parent.EventChannel__ComposedStructure.Remove(eventChannelItem)))
                {
                    return true;
                }
                IConnector connectorItem = item.As<IConnector>();
                if (((connectorItem != null) 
                            && this._parent.Connectors__ComposedStructure.Remove(connectorItem)))
                {
                    return true;
                }
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                IResourceRequiredRole resourceRequiredRoleItem = item.As<IResourceRequiredRole>();
                if (((resourceRequiredRoleItem != null) 
                            && this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Remove(resourceRequiredRoleItem)))
                {
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.QosAnnotations_System).Concat(this._parent.AssemblyContexts__ComposedStructure).Concat(this._parent.EventChannel__ComposedStructure).Concat(this._parent.Connectors__ComposedStructure).Concat(this._parent.RequiredInterfaces).Concat(this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity).Concat(this._parent.References).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the System class
        /// </summary>
        public class SystemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private System0 _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SystemReferencedElementsCollection(System0 parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.QosAnnotations_System.Count);
                    count = (count + this._parent.AssemblyContexts__ComposedStructure.Count);
                    count = (count + this._parent.EventChannel__ComposedStructure.Count);
                    count = (count + this._parent.Connectors__ComposedStructure.Count);
                    count = (count + this._parent.ProvidedInterfaces.Count);
                    count = (count + this._parent.RequiredInterfaces.Count);
                    count = (count + this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Count);
                    count = (count + this._parent.References.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.QosAnnotations_System.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.QosAnnotations_System.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IQoSAnnotations qosAnnotations_SystemCasted = item.As<IQoSAnnotations>();
                if ((qosAnnotations_SystemCasted != null))
                {
                    this._parent.QosAnnotations_System.Add(qosAnnotations_SystemCasted);
                }
                IAssemblyContext assemblyContexts__ComposedStructureCasted = item.As<IAssemblyContext>();
                if ((assemblyContexts__ComposedStructureCasted != null))
                {
                    this._parent.AssemblyContexts__ComposedStructure.Add(assemblyContexts__ComposedStructureCasted);
                }
                IEventChannel eventChannel__ComposedStructureCasted = item.As<IEventChannel>();
                if ((eventChannel__ComposedStructureCasted != null))
                {
                    this._parent.EventChannel__ComposedStructure.Add(eventChannel__ComposedStructureCasted);
                }
                IConnector connectors__ComposedStructureCasted = item.As<IConnector>();
                if ((connectors__ComposedStructureCasted != null))
                {
                    this._parent.Connectors__ComposedStructure.Add(connectors__ComposedStructureCasted);
                }
                IInterface providedInterfacesCasted = item.As<IInterface>();
                if ((providedInterfacesCasted != null))
                {
                    this._parent.ProvidedInterfaces.Add(providedInterfacesCasted);
                }
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                IResourceRequiredRole resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted = item.As<IResourceRequiredRole>();
                if ((resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted != null))
                {
                    this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Add(resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted);
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.QosAnnotations_System.Clear();
                this._parent.AssemblyContexts__ComposedStructure.Clear();
                this._parent.EventChannel__ComposedStructure.Clear();
                this._parent.Connectors__ComposedStructure.Clear();
                this._parent.ProvidedInterfaces.Clear();
                this._parent.RequiredInterfaces.Clear();
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Clear();
                this._parent.References.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.QosAnnotations_System.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssemblyContexts__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannel__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.Connectors__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProvidedInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Contains(item))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> qosAnnotations_SystemEnumerator = this._parent.QosAnnotations_System.GetEnumerator();
                try
                {
                    for (
                    ; qosAnnotations_SystemEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qosAnnotations_SystemEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qosAnnotations_SystemEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assemblyContexts__ComposedStructureEnumerator = this._parent.AssemblyContexts__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; assemblyContexts__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assemblyContexts__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assemblyContexts__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannel__ComposedStructureEnumerator = this._parent.EventChannel__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; eventChannel__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannel__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannel__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> connectors__ComposedStructureEnumerator = this._parent.Connectors__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; connectors__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectors__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectors__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> providedInterfacesEnumerator = this._parent.ProvidedInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator = this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.GetEnumerator();
                try
                {
                    for (
                    ; resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IQoSAnnotations qoSAnnotationsItem = item.As<IQoSAnnotations>();
                if (((qoSAnnotationsItem != null) 
                            && this._parent.QosAnnotations_System.Remove(qoSAnnotationsItem)))
                {
                    return true;
                }
                IAssemblyContext assemblyContextItem = item.As<IAssemblyContext>();
                if (((assemblyContextItem != null) 
                            && this._parent.AssemblyContexts__ComposedStructure.Remove(assemblyContextItem)))
                {
                    return true;
                }
                IEventChannel eventChannelItem = item.As<IEventChannel>();
                if (((eventChannelItem != null) 
                            && this._parent.EventChannel__ComposedStructure.Remove(eventChannelItem)))
                {
                    return true;
                }
                IConnector connectorItem = item.As<IConnector>();
                if (((connectorItem != null) 
                            && this._parent.Connectors__ComposedStructure.Remove(connectorItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.ProvidedInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                IResourceRequiredRole resourceRequiredRoleItem = item.As<IResourceRequiredRole>();
                if (((resourceRequiredRoleItem != null) 
                            && this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Remove(resourceRequiredRoleItem)))
                {
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.QosAnnotations_System).Concat(this._parent.AssemblyContexts__ComposedStructure).Concat(this._parent.EventChannel__ComposedStructure).Concat(this._parent.Connectors__ComposedStructure).Concat(this._parent.ProvidedInterfaces).Concat(this._parent.RequiredInterfaces).Concat(this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity).Concat(this._parent.References).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
    }
}

