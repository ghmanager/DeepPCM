//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core;
using DeepPCM.Deeppcm.Core.Composition;
using DeepPCM.Deeppcm.Core.Entity;
using DeepPCM.Deeppcm.Parameter;
using DeepPCM.Deeppcm.Protocol;
using DeepPCM.Deeppcm.Reliability;
using DeepPCM.Deeppcm.Resourcetype;
using DeepPCM.Deeppcm.Seff;
using DeepPCM.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Repository
{
    
    
    /// <summary>
    /// The default implementation of the RepositoryComponent class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository//RepositoryComponen" +
        "t/")]
    [DebuggerDisplayAttribute("RepositoryComponent {Name}")]
    public abstract class RepositoryComponent : MetaElement, IRepositoryComponent, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private IdentifierScope _identifierScope;
        
        /// <summary>
        /// The backing field for the References property
        /// </summary>
        private ReferenceTypeReferencesCollection _references;
        
        /// <summary>
        /// The backing field for the ProvidedInterfaces property
        /// </summary>
        private ObservableAssociationList<IInterface> _providedInterfaces;
        
        /// <summary>
        /// The backing field for the RequiredInterfaces property
        /// </summary>
        private ObservableCompositionList<IRequiredInterface> _requiredInterfaces;
        
        /// <summary>
        /// The backing field for the ResourceRequiredRoles__ResourceInterfaceRequiringEntity property
        /// </summary>
        private DeepPCM.Deeppcm.Core.Entity.ResourceInterfaceRequiringEntityResourceRequiredRoles__ResourceInterfaceRequiringEntityCollection _resourceRequiredRoles__ResourceInterfaceRequiringEntity;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        event EventHandler<ValueChangedEventArgs> IType.NamespaceChanged
        {
            add
            {
                IRepositoryComponent _this_RepositoryComponent = this;
                _this_RepositoryComponent.Repository__RepositoryComponentChanged += value;
            }
            remove
            {
                IRepositoryComponent _this_RepositoryComponent = this;
                _this_RepositoryComponent.Repository__RepositoryComponentChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        
        public RepositoryComponent()
        {
            this._references = new ReferenceTypeReferencesCollection(this);
            this._references.CollectionChanged += this.ReferencesCollectionChanged;
            this._providedInterfaces = new ObservableAssociationList<IInterface>();
            this._providedInterfaces.CollectionChanged += this.ProvidedInterfacesCollectionChanged;
            this._requiredInterfaces = new ObservableCompositionList<IRequiredInterface>(this);
            this._requiredInterfaces.CollectionChanged += this.RequiredInterfacesCollectionChanged;
            this._resourceRequiredRoles__ResourceInterfaceRequiringEntity = new ResourceInterfaceRequiringEntityResourceRequiredRoles__ResourceInterfaceRequiringEntityCollection(this);
            this._resourceRequiredRoles__ResourceInterfaceRequiringEntity.CollectionChanged += this.ResourceRequiredRoles__ResourceInterfaceRequiringEntityCollectionChanged;
        }
        
        /// <summary>
        /// The repository__RepositoryComponent property
        /// </summary>
        [XmlElementNameAttribute("repository__RepositoryComponent")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("components__Repository")]
        public virtual IRepository Repository__RepositoryComponent
        {
            get
            {
                return ModelHelper.CastAs<IRepository>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        INamespace IType.Namespace
        {
            get
            {
                IRepositoryComponent _this = this;
                if ((_this.Repository__RepositoryComponent != null))
                {
                    return _this.Repository__RepositoryComponent;
                }
                return null;
            }
            set
            {
                IRepositoryComponent _this = this;
                if ((value != null))
                {
                    IRepository @__repository__RepositoryComponent = value.As<IRepository>();
                    if ((@__repository__RepositoryComponent != null))
                    {
                        _this.Repository__RepositoryComponent = @__repository__RepositoryComponent;
                        return;
                    }
                }
                else
                {
                    _this.Repository__RepositoryComponent = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        ICollectionExpression<IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IAttribute> IStructuredType.Attributes
        {
            get
            {
                return EmptyList<IAttribute>.Instance;
            }
        }
        
        ICollectionExpression<IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<IAttributeConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IEvent> IReferenceType.Events
        {
            get
            {
                return EmptyList<IEvent>.Instance;
            }
        }
        
        IAttribute IClass.Identifier
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IOperation> IStructuredType.Operations
        {
            get
            {
                return EmptyList<IOperation>.Instance;
            }
        }
        
        IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IClass> IClass.BaseTypes
        {
            get
            {
                return new RepositoryComponentBaseTypesCollection(this);
            }
        }
        
        bool IClass.IsAbstract
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [XmlAttributeAttribute(true)]
        public virtual IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    IdentifierScope old = this._identifierScope;
                    this._identifierScope = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e);
                }
            }
        }
        
        /// <summary>
        /// The References property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IReference> References
        {
            get
            {
                return this._references;
            }
        }
        
        /// <summary>
        /// The ProvidedInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IInterface> ProvidedInterfaces
        {
            get
            {
                return this._providedInterfaces;
            }
        }
        
        /// <summary>
        /// The RequiredInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IRequiredInterface> RequiredInterfaces
        {
            get
            {
                return this._requiredInterfaces;
            }
        }
        
        /// <summary>
        /// The resourceRequiredRoles__ResourceInterfaceRequiringEntity property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("resourceRequiredRoles__ResourceInterfaceRequiringEntity")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceInterfaceRequiringEntity__ResourceRequiredRole")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IResourceRequiredRole> ResourceRequiredRoles__ResourceInterfaceRequiringEntity
        {
            get
            {
                return this._resourceRequiredRoles__ResourceInterfaceRequiringEntity;
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    this._id = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public virtual string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    this._entityName = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RepositoryComponentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository//RepositoryComponen" +
                        "t/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Repository__RepositoryComponent property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Repository__RepositoryComponentChanged;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        /// <summary>
        /// Raises the Repository__RepositoryComponentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepository__RepositoryComponentChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Repository__RepositoryComponentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IRepository oldRepository__RepositoryComponent = ModelHelper.CastAs<IRepository>(oldParent);
            IRepository newRepository__RepositoryComponent = ModelHelper.CastAs<IRepository>(newParent);
            if ((oldRepository__RepositoryComponent != null))
            {
                oldRepository__RepositoryComponent.Components__Repository.Remove(this);
            }
            if ((newRepository__RepositoryComponent != null))
            {
                newRepository__RepositoryComponent.Components__Repository.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRepository__RepositoryComponent, newRepository__RepositoryComponent);
            this.OnRepository__RepositoryComponentChanged(e);
            this.OnPropertyChanged("Repository__RepositoryComponent", e);
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards change notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("References", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedInterfaces", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RequiredInterfaces", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the ResourceRequiredRoles__ResourceInterfaceRequiringEntity property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceRequiredRoles__ResourceInterfaceRequiringEntityCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceRequiredRoles__ResourceInterfaceRequiringEntity", e);
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REFERENCES"))
            {
                return this._references;
            }
            if ((feature == "PROVIDEDINTERFACES"))
            {
                return this._providedInterfaces;
            }
            if ((feature == "REQUIREDINTERFACES"))
            {
                return this._requiredInterfaces;
            }
            if ((feature == "RESOURCEREQUIREDROLES__RESOURCEINTERFACEREQUIRINGENTITY"))
            {
                return this._resourceRequiredRoles__ResourceInterfaceRequiringEntity;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPOSITORY__REPOSITORYCOMPONENT"))
            {
                this.Repository__RepositoryComponent = ((IRepository)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((IdentifierScope)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "REPOSITORY__REPOSITORYCOMPONENT"))
            {
                return new Repository__RepositoryComponentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REPOSITORY__REPOSITORYCOMPONENT"))
            {
                return new Repository__RepositoryComponentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository//RepositoryComponen" +
                    "t/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RepositoryComponent class
        /// </summary>
        public class RepositoryComponentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RepositoryComponent _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RepositoryComponentReferencedElementsCollection(RepositoryComponent parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Repository__RepositoryComponent != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.References.Count);
                    count = (count + this._parent.ProvidedInterfaces.Count);
                    count = (count + this._parent.RequiredInterfaces.Count);
                    count = (count + this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Repository__RepositoryComponentChanged += this.PropagateValueChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Repository__RepositoryComponentChanged -= this.PropagateValueChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Repository__RepositoryComponent == null))
                {
                    IRepository repository__RepositoryComponentCasted = item.As<IRepository>();
                    if ((repository__RepositoryComponentCasted != null))
                    {
                        this._parent.Repository__RepositoryComponent = repository__RepositoryComponentCasted;
                        return;
                    }
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
                IInterface providedInterfacesCasted = item.As<IInterface>();
                if ((providedInterfacesCasted != null))
                {
                    this._parent.ProvidedInterfaces.Add(providedInterfacesCasted);
                }
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                IResourceRequiredRole resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted = item.As<IResourceRequiredRole>();
                if ((resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted != null))
                {
                    this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Add(resourceRequiredRoles__ResourceInterfaceRequiringEntityCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Repository__RepositoryComponent = null;
                this._parent.References.Clear();
                this._parent.ProvidedInterfaces.Clear();
                this._parent.RequiredInterfaces.Clear();
                this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Repository__RepositoryComponent))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProvidedInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Repository__RepositoryComponent != null))
                {
                    array[arrayIndex] = this._parent.Repository__RepositoryComponent;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> providedInterfacesEnumerator = this._parent.ProvidedInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator = this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.GetEnumerator();
                try
                {
                    for (
                    ; resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceRequiredRoles__ResourceInterfaceRequiringEntityEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Repository__RepositoryComponent == item))
                {
                    this._parent.Repository__RepositoryComponent = null;
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.ProvidedInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                IResourceRequiredRole resourceRequiredRoleItem = item.As<IResourceRequiredRole>();
                if (((resourceRequiredRoleItem != null) 
                            && this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity.Remove(resourceRequiredRoleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Repository__RepositoryComponent).Concat(this._parent.References).Concat(this._parent.ProvidedInterfaces).Concat(this._parent.RequiredInterfaces).Concat(this._parent.ResourceRequiredRoles__ResourceInterfaceRequiringEntity).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the repository__RepositoryComponent property
        /// </summary>
        private sealed class Repository__RepositoryComponentProxy : ModelPropertyChange<IRepositoryComponent, IRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Repository__RepositoryComponentProxy(IRepositoryComponent modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRepository Value
            {
                get
                {
                    return this.ModelElement.Repository__RepositoryComponent;
                }
                set
                {
                    this.ModelElement.Repository__RepositoryComponent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Repository__RepositoryComponentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Repository__RepositoryComponentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Namespace property
        /// </summary>
        private sealed class NamespaceProxy : ModelPropertyChange<IType, INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamespaceProxy(IType modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INamespace Value
            {
                get
                {
                    return this.ModelElement.Namespace;
                }
                set
                {
                    this.ModelElement.Namespace = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NamespaceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NamespaceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged -= handler;
            }
        }
    }
}

