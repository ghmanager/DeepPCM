//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core;
using DeepPCM.Deeppcm.Core.Composition;
using DeepPCM.Deeppcm.Qosannotations;
using DeepPCM.Deeppcm.Seff;
using DeepPCM.Deeppcm.Usagemodel;
using DeepPCM.Stoex;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Parameter
{
    
    
    /// <summary>
    /// The default implementation of the VariableCharacterisation class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Parameter/5.0")]
    [XmlNamespacePrefixAttribute("parameter")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//parameter//VariableCharacteris" +
        "ation/")]
    public class VariableCharacterisation : ModelElement, IVariableCharacterisation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private VariableCharacterisationType _type;
        
        /// <summary>
        /// The backing field for the Specification_VariableCharacterisation property
        /// </summary>
        private IPCMRandomVariable _specification_VariableCharacterisation;
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual VariableCharacterisationType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    VariableCharacterisationType old = this._type;
                    this._type = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e);
                }
            }
        }
        
        /// <summary>
        /// The specification_VariableCharacterisation property
        /// </summary>
        [XmlElementNameAttribute("specification_VariableCharacterisation")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("variableCharacterisation_Specification")]
        public virtual IPCMRandomVariable Specification_VariableCharacterisation
        {
            get
            {
                return this._specification_VariableCharacterisation;
            }
            set
            {
                if ((this._specification_VariableCharacterisation != value))
                {
                    IPCMRandomVariable old = this._specification_VariableCharacterisation;
                    this._specification_VariableCharacterisation = value;
                    if ((old != null))
                    {
                        old.VariableCharacterisation_Specification = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetSpecification_VariableCharacterisation;
                    }
                    if ((value != null))
                    {
                        value.VariableCharacterisation_Specification = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetSpecification_VariableCharacterisation;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecification_VariableCharacterisationChanged(e);
                    this.OnPropertyChanged("Specification_VariableCharacterisation", e);
                }
            }
        }
        
        /// <summary>
        /// The variableUsage_VariableCharacterisation property
        /// </summary>
        [XmlElementNameAttribute("variableUsage_VariableCharacterisation")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("variableCharacterisation_VariableUsage")]
        public virtual IVariableUsage VariableUsage_VariableCharacterisation
        {
            get
            {
                return ModelHelper.CastAs<IVariableUsage>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new VariableCharacterisationChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VariableCharacterisationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//parameter//VariableCharacteris" +
                        "ation/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired when the Specification_VariableCharacterisation property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Specification_VariableCharacterisationChanged;
        
        /// <summary>
        /// Gets fired when the VariableUsage_VariableCharacterisation property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> VariableUsage_VariableCharacterisationChanged;
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Specification_VariableCharacterisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecification_VariableCharacterisationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Specification_VariableCharacterisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Specification_VariableCharacterisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpecification_VariableCharacterisation(object sender, EventArgs eventArgs)
        {
            this.Specification_VariableCharacterisation = null;
        }
        
        /// <summary>
        /// Raises the VariableUsage_VariableCharacterisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableUsage_VariableCharacterisationChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.VariableUsage_VariableCharacterisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IVariableUsage oldVariableUsage_VariableCharacterisation = ModelHelper.CastAs<IVariableUsage>(oldParent);
            IVariableUsage newVariableUsage_VariableCharacterisation = ModelHelper.CastAs<IVariableUsage>(newParent);
            if ((oldVariableUsage_VariableCharacterisation != null))
            {
                oldVariableUsage_VariableCharacterisation.VariableCharacterisation_VariableUsage.Remove(this);
            }
            if ((newVariableUsage_VariableCharacterisation != null))
            {
                newVariableUsage_VariableCharacterisation.VariableCharacterisation_VariableUsage.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldVariableUsage_VariableCharacterisation, newVariableUsage_VariableCharacterisation);
            this.OnVariableUsage_VariableCharacterisationChanged(e);
            this.OnPropertyChanged("VariableUsage_VariableCharacterisation", e);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Specification_VariableCharacterisation))
            {
                return ModelHelper.CreatePath("Specification_VariableCharacterisation");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SPECIFICATION_VARIABLECHARACTERISATION"))
            {
                return this.Specification_VariableCharacterisation;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPECIFICATION_VARIABLECHARACTERISATION"))
            {
                this.Specification_VariableCharacterisation = ((IPCMRandomVariable)(value));
                return;
            }
            if ((feature == "VARIABLEUSAGE_VARIABLECHARACTERISATION"))
            {
                this.VariableUsage_VariableCharacterisation = ((IVariableUsage)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((VariableCharacterisationType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SPECIFICATION_VARIABLECHARACTERISATION"))
            {
                return new Specification_VariableCharacterisationProxy(this);
            }
            if ((attribute == "VARIABLEUSAGE_VARIABLECHARACTERISATION"))
            {
                return new VariableUsage_VariableCharacterisationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SPECIFICATION_VARIABLECHARACTERISATION"))
            {
                return new Specification_VariableCharacterisationProxy(this);
            }
            if ((reference == "VARIABLEUSAGE_VARIABLECHARACTERISATION"))
            {
                return new VariableUsage_VariableCharacterisationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//parameter//VariableCharacteris" +
                    "ation/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VariableCharacterisation class
        /// </summary>
        public class VariableCharacterisationChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VariableCharacterisation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VariableCharacterisationChildrenCollection(VariableCharacterisation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Specification_VariableCharacterisation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Specification_VariableCharacterisationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Specification_VariableCharacterisationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Specification_VariableCharacterisation == null))
                {
                    IPCMRandomVariable specification_VariableCharacterisationCasted = item.As<IPCMRandomVariable>();
                    if ((specification_VariableCharacterisationCasted != null))
                    {
                        this._parent.Specification_VariableCharacterisation = specification_VariableCharacterisationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Specification_VariableCharacterisation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Specification_VariableCharacterisation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Specification_VariableCharacterisation != null))
                {
                    array[arrayIndex] = this._parent.Specification_VariableCharacterisation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Specification_VariableCharacterisation == item))
                {
                    this._parent.Specification_VariableCharacterisation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Specification_VariableCharacterisation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VariableCharacterisation class
        /// </summary>
        public class VariableCharacterisationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VariableCharacterisation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VariableCharacterisationReferencedElementsCollection(VariableCharacterisation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Specification_VariableCharacterisation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.VariableUsage_VariableCharacterisation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Specification_VariableCharacterisationChanged += this.PropagateValueChanges;
                this._parent.VariableUsage_VariableCharacterisationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Specification_VariableCharacterisationChanged -= this.PropagateValueChanges;
                this._parent.VariableUsage_VariableCharacterisationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Specification_VariableCharacterisation == null))
                {
                    IPCMRandomVariable specification_VariableCharacterisationCasted = item.As<IPCMRandomVariable>();
                    if ((specification_VariableCharacterisationCasted != null))
                    {
                        this._parent.Specification_VariableCharacterisation = specification_VariableCharacterisationCasted;
                        return;
                    }
                }
                if ((this._parent.VariableUsage_VariableCharacterisation == null))
                {
                    IVariableUsage variableUsage_VariableCharacterisationCasted = item.As<IVariableUsage>();
                    if ((variableUsage_VariableCharacterisationCasted != null))
                    {
                        this._parent.VariableUsage_VariableCharacterisation = variableUsage_VariableCharacterisationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Specification_VariableCharacterisation = null;
                this._parent.VariableUsage_VariableCharacterisation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Specification_VariableCharacterisation))
                {
                    return true;
                }
                if ((item == this._parent.VariableUsage_VariableCharacterisation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Specification_VariableCharacterisation != null))
                {
                    array[arrayIndex] = this._parent.Specification_VariableCharacterisation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.VariableUsage_VariableCharacterisation != null))
                {
                    array[arrayIndex] = this._parent.VariableUsage_VariableCharacterisation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Specification_VariableCharacterisation == item))
                {
                    this._parent.Specification_VariableCharacterisation = null;
                    return true;
                }
                if ((this._parent.VariableUsage_VariableCharacterisation == item))
                {
                    this._parent.VariableUsage_VariableCharacterisation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Specification_VariableCharacterisation).Concat(this._parent.VariableUsage_VariableCharacterisation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IVariableCharacterisation, VariableCharacterisationType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IVariableCharacterisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override VariableCharacterisationType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specification_VariableCharacterisation property
        /// </summary>
        private sealed class Specification_VariableCharacterisationProxy : ModelPropertyChange<IVariableCharacterisation, IPCMRandomVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Specification_VariableCharacterisationProxy(IVariableCharacterisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPCMRandomVariable Value
            {
                get
                {
                    return this.ModelElement.Specification_VariableCharacterisation;
                }
                set
                {
                    this.ModelElement.Specification_VariableCharacterisation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Specification_VariableCharacterisationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Specification_VariableCharacterisationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the variableUsage_VariableCharacterisation property
        /// </summary>
        private sealed class VariableUsage_VariableCharacterisationProxy : ModelPropertyChange<IVariableCharacterisation, IVariableUsage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VariableUsage_VariableCharacterisationProxy(IVariableCharacterisation modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVariableUsage Value
            {
                get
                {
                    return this.ModelElement.VariableUsage_VariableCharacterisation;
                }
                set
                {
                    this.ModelElement.VariableUsage_VariableCharacterisation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VariableUsage_VariableCharacterisationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VariableUsage_VariableCharacterisationChanged -= handler;
            }
        }
    }
}

