//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core;
using DeepPCM.Deeppcm.Core.Composition;
using DeepPCM.Deeppcm.Qosannotations;
using DeepPCM.Deeppcm.Seff;
using DeepPCM.Deeppcm.Usagemodel;
using DeepPCM.Stoex;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Parameter
{
    
    
    /// <summary>
    /// The default implementation of the VariableUsage class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Parameter/5.0")]
    [XmlNamespacePrefixAttribute("parameter")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//parameter//VariableUsage/")]
    public class VariableUsage : ModelElement, IVariableUsage, IModelElement
    {
        
        /// <summary>
        /// The backing field for the VariableCharacterisation_VariableUsage property
        /// </summary>
        private VariableUsageVariableCharacterisation_VariableUsageCollection _variableCharacterisation_VariableUsage;
        
        /// <summary>
        /// The backing field for the UserData_VariableUsage property
        /// </summary>
        private IUserData _userData_VariableUsage;
        
        /// <summary>
        /// The backing field for the CallAction__VariableUsage property
        /// </summary>
        private ICallAction _callAction__VariableUsage;
        
        /// <summary>
        /// The backing field for the SynchronisationPoint_VariableUsage property
        /// </summary>
        private ISynchronisationPoint _synchronisationPoint_VariableUsage;
        
        /// <summary>
        /// The backing field for the CallReturnAction__VariableUsage property
        /// </summary>
        private ICallReturnAction _callReturnAction__VariableUsage;
        
        /// <summary>
        /// The backing field for the SetVariableAction_VariableUsage property
        /// </summary>
        private ISetVariableAction _setVariableAction_VariableUsage;
        
        /// <summary>
        /// The backing field for the SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage property
        /// </summary>
        private ISpecifiedOutputParameterAbstraction _specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
        
        /// <summary>
        /// The backing field for the AssemblyContext__VariableUsage property
        /// </summary>
        private IAssemblyContext _assemblyContext__VariableUsage;
        
        /// <summary>
        /// The backing field for the EntryLevelSystemCall_InputParameterUsage property
        /// </summary>
        private IEntryLevelSystemCall _entryLevelSystemCall_InputParameterUsage;
        
        /// <summary>
        /// The backing field for the EntryLevelSystemCall_OutputParameterUsage property
        /// </summary>
        private IEntryLevelSystemCall _entryLevelSystemCall_OutputParameterUsage;
        
        /// <summary>
        /// The backing field for the NamedReference__VariableUsage property
        /// </summary>
        private IAbstractNamedReference _namedReference__VariableUsage;
        
        public VariableUsage()
        {
            this._variableCharacterisation_VariableUsage = new VariableUsageVariableCharacterisation_VariableUsageCollection(this);
            this._variableCharacterisation_VariableUsage.CollectionChanged += this.VariableCharacterisation_VariableUsageCollectionChanged;
        }
        
        /// <summary>
        /// The variableCharacterisation_VariableUsage property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("variableCharacterisation_VariableUsage")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("variableUsage_VariableCharacterisation")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IVariableCharacterisation> VariableCharacterisation_VariableUsage
        {
            get
            {
                return this._variableCharacterisation_VariableUsage;
            }
        }
        
        /// <summary>
        /// The userData_VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("userData_VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("userDataParameterUsages_UserData")]
        public virtual IUserData UserData_VariableUsage
        {
            get
            {
                return this._userData_VariableUsage;
            }
            set
            {
                if ((this._userData_VariableUsage != value))
                {
                    IUserData old = this._userData_VariableUsage;
                    this._userData_VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.UserDataParameterUsages_UserData.Remove(this);
                        old.Deleted -= this.OnResetUserData_VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.UserDataParameterUsages_UserData.Contains(this) != true))
                        {
                            value.UserDataParameterUsages_UserData.Add(this);
                        }
                        value.Deleted += this.OnResetUserData_VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUserData_VariableUsageChanged(e);
                    this.OnPropertyChanged("UserData_VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The callAction__VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("callAction__VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inputVariableUsages__CallAction")]
        public virtual ICallAction CallAction__VariableUsage
        {
            get
            {
                return this._callAction__VariableUsage;
            }
            set
            {
                if ((this._callAction__VariableUsage != value))
                {
                    ICallAction old = this._callAction__VariableUsage;
                    this._callAction__VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.InputVariableUsages__CallAction.Remove(this);
                        old.Deleted -= this.OnResetCallAction__VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.InputVariableUsages__CallAction.Contains(this) != true))
                        {
                            value.InputVariableUsages__CallAction.Add(this);
                        }
                        value.Deleted += this.OnResetCallAction__VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCallAction__VariableUsageChanged(e);
                    this.OnPropertyChanged("CallAction__VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The synchronisationPoint_VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("synchronisationPoint_VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("outputParameterUsage_SynchronisationPoint")]
        public virtual ISynchronisationPoint SynchronisationPoint_VariableUsage
        {
            get
            {
                return this._synchronisationPoint_VariableUsage;
            }
            set
            {
                if ((this._synchronisationPoint_VariableUsage != value))
                {
                    ISynchronisationPoint old = this._synchronisationPoint_VariableUsage;
                    this._synchronisationPoint_VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OutputParameterUsage_SynchronisationPoint.Remove(this);
                        old.Deleted -= this.OnResetSynchronisationPoint_VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.OutputParameterUsage_SynchronisationPoint.Contains(this) != true))
                        {
                            value.OutputParameterUsage_SynchronisationPoint.Add(this);
                        }
                        value.Deleted += this.OnResetSynchronisationPoint_VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSynchronisationPoint_VariableUsageChanged(e);
                    this.OnPropertyChanged("SynchronisationPoint_VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The callReturnAction__VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("callReturnAction__VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("returnVariableUsage__CallReturnAction")]
        public virtual ICallReturnAction CallReturnAction__VariableUsage
        {
            get
            {
                return this._callReturnAction__VariableUsage;
            }
            set
            {
                if ((this._callReturnAction__VariableUsage != value))
                {
                    ICallReturnAction old = this._callReturnAction__VariableUsage;
                    this._callReturnAction__VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ReturnVariableUsage__CallReturnAction.Remove(this);
                        old.Deleted -= this.OnResetCallReturnAction__VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.ReturnVariableUsage__CallReturnAction.Contains(this) != true))
                        {
                            value.ReturnVariableUsage__CallReturnAction.Add(this);
                        }
                        value.Deleted += this.OnResetCallReturnAction__VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCallReturnAction__VariableUsageChanged(e);
                    this.OnPropertyChanged("CallReturnAction__VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The setVariableAction_VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("setVariableAction_VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("localVariableUsages_SetVariableAction")]
        public virtual ISetVariableAction SetVariableAction_VariableUsage
        {
            get
            {
                return this._setVariableAction_VariableUsage;
            }
            set
            {
                if ((this._setVariableAction_VariableUsage != value))
                {
                    ISetVariableAction old = this._setVariableAction_VariableUsage;
                    this._setVariableAction_VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.LocalVariableUsages_SetVariableAction.Remove(this);
                        old.Deleted -= this.OnResetSetVariableAction_VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.LocalVariableUsages_SetVariableAction.Contains(this) != true))
                        {
                            value.LocalVariableUsages_SetVariableAction.Add(this);
                        }
                        value.Deleted += this.OnResetSetVariableAction_VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSetVariableAction_VariableUsageChanged(e);
                    this.OnPropertyChanged("SetVariableAction_VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("expectedExternalOutputs_SpecifiedOutputParameterAbstraction")]
        public virtual ISpecifiedOutputParameterAbstraction SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage
        {
            get
            {
                return this._specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
            }
            set
            {
                if ((this._specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage != value))
                {
                    ISpecifiedOutputParameterAbstraction old = this._specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
                    this._specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ExpectedExternalOutputs_SpecifiedOutputParameterAbstraction.Remove(this);
                        old.Deleted -= this.OnResetSpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.ExpectedExternalOutputs_SpecifiedOutputParameterAbstraction.Contains(this) != true))
                        {
                            value.ExpectedExternalOutputs_SpecifiedOutputParameterAbstraction.Add(this);
                        }
                        value.Deleted += this.OnResetSpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged(e);
                    this.OnPropertyChanged("SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The assemblyContext__VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("assemblyContext__VariableUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("configParameterUsages__AssemblyContext")]
        public virtual IAssemblyContext AssemblyContext__VariableUsage
        {
            get
            {
                return this._assemblyContext__VariableUsage;
            }
            set
            {
                if ((this._assemblyContext__VariableUsage != value))
                {
                    IAssemblyContext old = this._assemblyContext__VariableUsage;
                    this._assemblyContext__VariableUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.ConfigParameterUsages__AssemblyContext.Remove(this);
                        old.Deleted -= this.OnResetAssemblyContext__VariableUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.ConfigParameterUsages__AssemblyContext.Contains(this) != true))
                        {
                            value.ConfigParameterUsages__AssemblyContext.Add(this);
                        }
                        value.Deleted += this.OnResetAssemblyContext__VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyContext__VariableUsageChanged(e);
                    this.OnPropertyChanged("AssemblyContext__VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The entryLevelSystemCall_InputParameterUsage property
        /// </summary>
        [XmlElementNameAttribute("entryLevelSystemCall_InputParameterUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("inputParameterUsages_EntryLevelSystemCall")]
        public virtual IEntryLevelSystemCall EntryLevelSystemCall_InputParameterUsage
        {
            get
            {
                return this._entryLevelSystemCall_InputParameterUsage;
            }
            set
            {
                if ((this._entryLevelSystemCall_InputParameterUsage != value))
                {
                    IEntryLevelSystemCall old = this._entryLevelSystemCall_InputParameterUsage;
                    this._entryLevelSystemCall_InputParameterUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.InputParameterUsages_EntryLevelSystemCall.Remove(this);
                        old.Deleted -= this.OnResetEntryLevelSystemCall_InputParameterUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.InputParameterUsages_EntryLevelSystemCall.Contains(this) != true))
                        {
                            value.InputParameterUsages_EntryLevelSystemCall.Add(this);
                        }
                        value.Deleted += this.OnResetEntryLevelSystemCall_InputParameterUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntryLevelSystemCall_InputParameterUsageChanged(e);
                    this.OnPropertyChanged("EntryLevelSystemCall_InputParameterUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The entryLevelSystemCall_OutputParameterUsage property
        /// </summary>
        [XmlElementNameAttribute("entryLevelSystemCall_OutputParameterUsage")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("outputParameterUsages_EntryLevelSystemCall")]
        public virtual IEntryLevelSystemCall EntryLevelSystemCall_OutputParameterUsage
        {
            get
            {
                return this._entryLevelSystemCall_OutputParameterUsage;
            }
            set
            {
                if ((this._entryLevelSystemCall_OutputParameterUsage != value))
                {
                    IEntryLevelSystemCall old = this._entryLevelSystemCall_OutputParameterUsage;
                    this._entryLevelSystemCall_OutputParameterUsage = value;
                    this.Parent = value;
                    if ((old != null))
                    {
                        old.OutputParameterUsages_EntryLevelSystemCall.Remove(this);
                        old.Deleted -= this.OnResetEntryLevelSystemCall_OutputParameterUsage;
                    }
                    if ((value != null))
                    {
                        if ((value.OutputParameterUsages_EntryLevelSystemCall.Contains(this) != true))
                        {
                            value.OutputParameterUsages_EntryLevelSystemCall.Add(this);
                        }
                        value.Deleted += this.OnResetEntryLevelSystemCall_OutputParameterUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntryLevelSystemCall_OutputParameterUsageChanged(e);
                    this.OnPropertyChanged("EntryLevelSystemCall_OutputParameterUsage", e);
                }
            }
        }
        
        /// <summary>
        /// The namedReference__VariableUsage property
        /// </summary>
        [XmlElementNameAttribute("namedReference__VariableUsage")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IAbstractNamedReference NamedReference__VariableUsage
        {
            get
            {
                return this._namedReference__VariableUsage;
            }
            set
            {
                if ((this._namedReference__VariableUsage != value))
                {
                    IAbstractNamedReference old = this._namedReference__VariableUsage;
                    this._namedReference__VariableUsage = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetNamedReference__VariableUsage;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetNamedReference__VariableUsage;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNamedReference__VariableUsageChanged(e);
                    this.OnPropertyChanged("NamedReference__VariableUsage", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new VariableUsageChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VariableUsageReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//parameter//VariableUsage/");
            }
        }
        
        /// <summary>
        /// Gets fired when the UserData_VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UserData_VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the CallAction__VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CallAction__VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the SynchronisationPoint_VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SynchronisationPoint_VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the CallReturnAction__VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CallReturnAction__VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the SetVariableAction_VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SetVariableAction_VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the AssemblyContext__VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AssemblyContext__VariableUsageChanged;
        
        /// <summary>
        /// Gets fired when the EntryLevelSystemCall_InputParameterUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EntryLevelSystemCall_InputParameterUsageChanged;
        
        /// <summary>
        /// Gets fired when the EntryLevelSystemCall_OutputParameterUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EntryLevelSystemCall_OutputParameterUsageChanged;
        
        /// <summary>
        /// Gets fired when the NamedReference__VariableUsage property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NamedReference__VariableUsageChanged;
        
        /// <summary>
        /// Forwards change notifications for the VariableCharacterisation_VariableUsage property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VariableCharacterisation_VariableUsageCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VariableCharacterisation_VariableUsage", e);
        }
        
        /// <summary>
        /// Raises the UserData_VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUserData_VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UserData_VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the UserData_VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUserData_VariableUsage(object sender, EventArgs eventArgs)
        {
            this.UserData_VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the CallAction__VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallAction__VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CallAction__VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CallAction__VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCallAction__VariableUsage(object sender, EventArgs eventArgs)
        {
            this.CallAction__VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the SynchronisationPoint_VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSynchronisationPoint_VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SynchronisationPoint_VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SynchronisationPoint_VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSynchronisationPoint_VariableUsage(object sender, EventArgs eventArgs)
        {
            this.SynchronisationPoint_VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the CallReturnAction__VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallReturnAction__VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CallReturnAction__VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CallReturnAction__VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCallReturnAction__VariableUsage(object sender, EventArgs eventArgs)
        {
            this.CallReturnAction__VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the SetVariableAction_VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSetVariableAction_VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SetVariableAction_VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SetVariableAction_VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSetVariableAction_VariableUsage(object sender, EventArgs eventArgs)
        {
            this.SetVariableAction_VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage(object sender, EventArgs eventArgs)
        {
            this.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the AssemblyContext__VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext__VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext__VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssemblyContext__VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssemblyContext__VariableUsage(object sender, EventArgs eventArgs)
        {
            this.AssemblyContext__VariableUsage = null;
        }
        
        /// <summary>
        /// Raises the EntryLevelSystemCall_InputParameterUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntryLevelSystemCall_InputParameterUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EntryLevelSystemCall_InputParameterUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EntryLevelSystemCall_InputParameterUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEntryLevelSystemCall_InputParameterUsage(object sender, EventArgs eventArgs)
        {
            this.EntryLevelSystemCall_InputParameterUsage = null;
        }
        
        /// <summary>
        /// Raises the EntryLevelSystemCall_OutputParameterUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntryLevelSystemCall_OutputParameterUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EntryLevelSystemCall_OutputParameterUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EntryLevelSystemCall_OutputParameterUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEntryLevelSystemCall_OutputParameterUsage(object sender, EventArgs eventArgs)
        {
            this.EntryLevelSystemCall_OutputParameterUsage = null;
        }
        
        /// <summary>
        /// Raises the NamedReference__VariableUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNamedReference__VariableUsageChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NamedReference__VariableUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NamedReference__VariableUsage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNamedReference__VariableUsage(object sender, EventArgs eventArgs)
        {
            this.NamedReference__VariableUsage = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.NamedReference__VariableUsage))
            {
                return ModelHelper.CreatePath("NamedReference__VariableUsage");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NAMEDREFERENCE__VARIABLEUSAGE"))
            {
                return this.NamedReference__VariableUsage;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "VARIABLECHARACTERISATION_VARIABLEUSAGE"))
            {
                return this._variableCharacterisation_VariableUsage;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "USERDATA_VARIABLEUSAGE"))
            {
                this.UserData_VariableUsage = ((IUserData)(value));
                return;
            }
            if ((feature == "CALLACTION__VARIABLEUSAGE"))
            {
                this.CallAction__VariableUsage = ((ICallAction)(value));
                return;
            }
            if ((feature == "SYNCHRONISATIONPOINT_VARIABLEUSAGE"))
            {
                this.SynchronisationPoint_VariableUsage = ((ISynchronisationPoint)(value));
                return;
            }
            if ((feature == "CALLRETURNACTION__VARIABLEUSAGE"))
            {
                this.CallReturnAction__VariableUsage = ((ICallReturnAction)(value));
                return;
            }
            if ((feature == "SETVARIABLEACTION_VARIABLEUSAGE"))
            {
                this.SetVariableAction_VariableUsage = ((ISetVariableAction)(value));
                return;
            }
            if ((feature == "SPECIFIEDOUTPUTPARAMETERABSTRACTION_EXPECTEDEXTERNALOUTPUTS_VARIABLEUSAGE"))
            {
                this.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = ((ISpecifiedOutputParameterAbstraction)(value));
                return;
            }
            if ((feature == "ASSEMBLYCONTEXT__VARIABLEUSAGE"))
            {
                this.AssemblyContext__VariableUsage = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "ENTRYLEVELSYSTEMCALL_INPUTPARAMETERUSAGE"))
            {
                this.EntryLevelSystemCall_InputParameterUsage = ((IEntryLevelSystemCall)(value));
                return;
            }
            if ((feature == "ENTRYLEVELSYSTEMCALL_OUTPUTPARAMETERUSAGE"))
            {
                this.EntryLevelSystemCall_OutputParameterUsage = ((IEntryLevelSystemCall)(value));
                return;
            }
            if ((feature == "NAMEDREFERENCE__VARIABLEUSAGE"))
            {
                this.NamedReference__VariableUsage = ((IAbstractNamedReference)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "USERDATA_VARIABLEUSAGE"))
            {
                return new UserData_VariableUsageProxy(this);
            }
            if ((attribute == "CALLACTION__VARIABLEUSAGE"))
            {
                return new CallAction__VariableUsageProxy(this);
            }
            if ((attribute == "SYNCHRONISATIONPOINT_VARIABLEUSAGE"))
            {
                return new SynchronisationPoint_VariableUsageProxy(this);
            }
            if ((attribute == "CALLRETURNACTION__VARIABLEUSAGE"))
            {
                return new CallReturnAction__VariableUsageProxy(this);
            }
            if ((attribute == "SETVARIABLEACTION_VARIABLEUSAGE"))
            {
                return new SetVariableAction_VariableUsageProxy(this);
            }
            if ((attribute == "SPECIFIEDOUTPUTPARAMETERABSTRACTION_EXPECTEDEXTERNALOUTPUTS_VARIABLEUSAGE"))
            {
                return new SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageProxy(this);
            }
            if ((attribute == "ASSEMBLYCONTEXT__VARIABLEUSAGE"))
            {
                return new AssemblyContext__VariableUsageProxy(this);
            }
            if ((attribute == "ENTRYLEVELSYSTEMCALL_INPUTPARAMETERUSAGE"))
            {
                return new EntryLevelSystemCall_InputParameterUsageProxy(this);
            }
            if ((attribute == "ENTRYLEVELSYSTEMCALL_OUTPUTPARAMETERUSAGE"))
            {
                return new EntryLevelSystemCall_OutputParameterUsageProxy(this);
            }
            if ((attribute == "NAMEDREFERENCE__VARIABLEUSAGE"))
            {
                return new NamedReference__VariableUsageProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "USERDATA_VARIABLEUSAGE"))
            {
                return new UserData_VariableUsageProxy(this);
            }
            if ((reference == "CALLACTION__VARIABLEUSAGE"))
            {
                return new CallAction__VariableUsageProxy(this);
            }
            if ((reference == "SYNCHRONISATIONPOINT_VARIABLEUSAGE"))
            {
                return new SynchronisationPoint_VariableUsageProxy(this);
            }
            if ((reference == "CALLRETURNACTION__VARIABLEUSAGE"))
            {
                return new CallReturnAction__VariableUsageProxy(this);
            }
            if ((reference == "SETVARIABLEACTION_VARIABLEUSAGE"))
            {
                return new SetVariableAction_VariableUsageProxy(this);
            }
            if ((reference == "SPECIFIEDOUTPUTPARAMETERABSTRACTION_EXPECTEDEXTERNALOUTPUTS_VARIABLEUSAGE"))
            {
                return new SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageProxy(this);
            }
            if ((reference == "ASSEMBLYCONTEXT__VARIABLEUSAGE"))
            {
                return new AssemblyContext__VariableUsageProxy(this);
            }
            if ((reference == "ENTRYLEVELSYSTEMCALL_INPUTPARAMETERUSAGE"))
            {
                return new EntryLevelSystemCall_InputParameterUsageProxy(this);
            }
            if ((reference == "ENTRYLEVELSYSTEMCALL_OUTPUTPARAMETERUSAGE"))
            {
                return new EntryLevelSystemCall_OutputParameterUsageProxy(this);
            }
            if ((reference == "NAMEDREFERENCE__VARIABLEUSAGE"))
            {
                return new NamedReference__VariableUsageProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//parameter//VariableUsage/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VariableUsage class
        /// </summary>
        public class VariableUsageChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VariableUsage _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VariableUsageChildrenCollection(VariableUsage parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.VariableCharacterisation_VariableUsage.Count);
                    if ((this._parent.NamedReference__VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.VariableCharacterisation_VariableUsage.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NamedReference__VariableUsageChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.VariableCharacterisation_VariableUsage.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NamedReference__VariableUsageChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IVariableCharacterisation variableCharacterisation_VariableUsageCasted = item.As<IVariableCharacterisation>();
                if ((variableCharacterisation_VariableUsageCasted != null))
                {
                    this._parent.VariableCharacterisation_VariableUsage.Add(variableCharacterisation_VariableUsageCasted);
                }
                if ((this._parent.NamedReference__VariableUsage == null))
                {
                    IAbstractNamedReference namedReference__VariableUsageCasted = item.As<IAbstractNamedReference>();
                    if ((namedReference__VariableUsageCasted != null))
                    {
                        this._parent.NamedReference__VariableUsage = namedReference__VariableUsageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.VariableCharacterisation_VariableUsage.Clear();
                this._parent.NamedReference__VariableUsage = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.VariableCharacterisation_VariableUsage.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.NamedReference__VariableUsage))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> variableCharacterisation_VariableUsageEnumerator = this._parent.VariableCharacterisation_VariableUsage.GetEnumerator();
                try
                {
                    for (
                    ; variableCharacterisation_VariableUsageEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = variableCharacterisation_VariableUsageEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    variableCharacterisation_VariableUsageEnumerator.Dispose();
                }
                if ((this._parent.NamedReference__VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.NamedReference__VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IVariableCharacterisation variableCharacterisationItem = item.As<IVariableCharacterisation>();
                if (((variableCharacterisationItem != null) 
                            && this._parent.VariableCharacterisation_VariableUsage.Remove(variableCharacterisationItem)))
                {
                    return true;
                }
                if ((this._parent.NamedReference__VariableUsage == item))
                {
                    this._parent.NamedReference__VariableUsage = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.VariableCharacterisation_VariableUsage).Concat(this._parent.NamedReference__VariableUsage).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the VariableUsage class
        /// </summary>
        public class VariableUsageReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private VariableUsage _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VariableUsageReferencedElementsCollection(VariableUsage parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.VariableCharacterisation_VariableUsage.Count);
                    if ((this._parent.UserData_VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CallAction__VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SynchronisationPoint_VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CallReturnAction__VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SetVariableAction_VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssemblyContext__VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EntryLevelSystemCall_InputParameterUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EntryLevelSystemCall_OutputParameterUsage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NamedReference__VariableUsage != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.VariableCharacterisation_VariableUsage.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.UserData_VariableUsageChanged += this.PropagateValueChanges;
                this._parent.CallAction__VariableUsageChanged += this.PropagateValueChanges;
                this._parent.SynchronisationPoint_VariableUsageChanged += this.PropagateValueChanges;
                this._parent.CallReturnAction__VariableUsageChanged += this.PropagateValueChanges;
                this._parent.SetVariableAction_VariableUsageChanged += this.PropagateValueChanges;
                this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged += this.PropagateValueChanges;
                this._parent.AssemblyContext__VariableUsageChanged += this.PropagateValueChanges;
                this._parent.EntryLevelSystemCall_InputParameterUsageChanged += this.PropagateValueChanges;
                this._parent.EntryLevelSystemCall_OutputParameterUsageChanged += this.PropagateValueChanges;
                this._parent.NamedReference__VariableUsageChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.VariableCharacterisation_VariableUsage.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.UserData_VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.CallAction__VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.SynchronisationPoint_VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.CallReturnAction__VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.SetVariableAction_VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.AssemblyContext__VariableUsageChanged -= this.PropagateValueChanges;
                this._parent.EntryLevelSystemCall_InputParameterUsageChanged -= this.PropagateValueChanges;
                this._parent.EntryLevelSystemCall_OutputParameterUsageChanged -= this.PropagateValueChanges;
                this._parent.NamedReference__VariableUsageChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IVariableCharacterisation variableCharacterisation_VariableUsageCasted = item.As<IVariableCharacterisation>();
                if ((variableCharacterisation_VariableUsageCasted != null))
                {
                    this._parent.VariableCharacterisation_VariableUsage.Add(variableCharacterisation_VariableUsageCasted);
                }
                if ((this._parent.UserData_VariableUsage == null))
                {
                    IUserData userData_VariableUsageCasted = item.As<IUserData>();
                    if ((userData_VariableUsageCasted != null))
                    {
                        this._parent.UserData_VariableUsage = userData_VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.CallAction__VariableUsage == null))
                {
                    ICallAction callAction__VariableUsageCasted = item.As<ICallAction>();
                    if ((callAction__VariableUsageCasted != null))
                    {
                        this._parent.CallAction__VariableUsage = callAction__VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.SynchronisationPoint_VariableUsage == null))
                {
                    ISynchronisationPoint synchronisationPoint_VariableUsageCasted = item.As<ISynchronisationPoint>();
                    if ((synchronisationPoint_VariableUsageCasted != null))
                    {
                        this._parent.SynchronisationPoint_VariableUsage = synchronisationPoint_VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.CallReturnAction__VariableUsage == null))
                {
                    ICallReturnAction callReturnAction__VariableUsageCasted = item.As<ICallReturnAction>();
                    if ((callReturnAction__VariableUsageCasted != null))
                    {
                        this._parent.CallReturnAction__VariableUsage = callReturnAction__VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.SetVariableAction_VariableUsage == null))
                {
                    ISetVariableAction setVariableAction_VariableUsageCasted = item.As<ISetVariableAction>();
                    if ((setVariableAction_VariableUsageCasted != null))
                    {
                        this._parent.SetVariableAction_VariableUsage = setVariableAction_VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage == null))
                {
                    ISpecifiedOutputParameterAbstraction specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageCasted = item.As<ISpecifiedOutputParameterAbstraction>();
                    if ((specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageCasted != null))
                    {
                        this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.AssemblyContext__VariableUsage == null))
                {
                    IAssemblyContext assemblyContext__VariableUsageCasted = item.As<IAssemblyContext>();
                    if ((assemblyContext__VariableUsageCasted != null))
                    {
                        this._parent.AssemblyContext__VariableUsage = assemblyContext__VariableUsageCasted;
                        return;
                    }
                }
                if ((this._parent.EntryLevelSystemCall_InputParameterUsage == null))
                {
                    IEntryLevelSystemCall entryLevelSystemCall_InputParameterUsageCasted = item.As<IEntryLevelSystemCall>();
                    if ((entryLevelSystemCall_InputParameterUsageCasted != null))
                    {
                        this._parent.EntryLevelSystemCall_InputParameterUsage = entryLevelSystemCall_InputParameterUsageCasted;
                        return;
                    }
                }
                if ((this._parent.EntryLevelSystemCall_OutputParameterUsage == null))
                {
                    IEntryLevelSystemCall entryLevelSystemCall_OutputParameterUsageCasted = item.As<IEntryLevelSystemCall>();
                    if ((entryLevelSystemCall_OutputParameterUsageCasted != null))
                    {
                        this._parent.EntryLevelSystemCall_OutputParameterUsage = entryLevelSystemCall_OutputParameterUsageCasted;
                        return;
                    }
                }
                if ((this._parent.NamedReference__VariableUsage == null))
                {
                    IAbstractNamedReference namedReference__VariableUsageCasted = item.As<IAbstractNamedReference>();
                    if ((namedReference__VariableUsageCasted != null))
                    {
                        this._parent.NamedReference__VariableUsage = namedReference__VariableUsageCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.VariableCharacterisation_VariableUsage.Clear();
                this._parent.UserData_VariableUsage = null;
                this._parent.CallAction__VariableUsage = null;
                this._parent.SynchronisationPoint_VariableUsage = null;
                this._parent.CallReturnAction__VariableUsage = null;
                this._parent.SetVariableAction_VariableUsage = null;
                this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = null;
                this._parent.AssemblyContext__VariableUsage = null;
                this._parent.EntryLevelSystemCall_InputParameterUsage = null;
                this._parent.EntryLevelSystemCall_OutputParameterUsage = null;
                this._parent.NamedReference__VariableUsage = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.VariableCharacterisation_VariableUsage.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.UserData_VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.CallAction__VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.SynchronisationPoint_VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.CallReturnAction__VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.SetVariableAction_VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.AssemblyContext__VariableUsage))
                {
                    return true;
                }
                if ((item == this._parent.EntryLevelSystemCall_InputParameterUsage))
                {
                    return true;
                }
                if ((item == this._parent.EntryLevelSystemCall_OutputParameterUsage))
                {
                    return true;
                }
                if ((item == this._parent.NamedReference__VariableUsage))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> variableCharacterisation_VariableUsageEnumerator = this._parent.VariableCharacterisation_VariableUsage.GetEnumerator();
                try
                {
                    for (
                    ; variableCharacterisation_VariableUsageEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = variableCharacterisation_VariableUsageEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    variableCharacterisation_VariableUsageEnumerator.Dispose();
                }
                if ((this._parent.UserData_VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.UserData_VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CallAction__VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.CallAction__VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SynchronisationPoint_VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.SynchronisationPoint_VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CallReturnAction__VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.CallReturnAction__VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SetVariableAction_VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.SetVariableAction_VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssemblyContext__VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.AssemblyContext__VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EntryLevelSystemCall_InputParameterUsage != null))
                {
                    array[arrayIndex] = this._parent.EntryLevelSystemCall_InputParameterUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EntryLevelSystemCall_OutputParameterUsage != null))
                {
                    array[arrayIndex] = this._parent.EntryLevelSystemCall_OutputParameterUsage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NamedReference__VariableUsage != null))
                {
                    array[arrayIndex] = this._parent.NamedReference__VariableUsage;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IVariableCharacterisation variableCharacterisationItem = item.As<IVariableCharacterisation>();
                if (((variableCharacterisationItem != null) 
                            && this._parent.VariableCharacterisation_VariableUsage.Remove(variableCharacterisationItem)))
                {
                    return true;
                }
                if ((this._parent.UserData_VariableUsage == item))
                {
                    this._parent.UserData_VariableUsage = null;
                    return true;
                }
                if ((this._parent.CallAction__VariableUsage == item))
                {
                    this._parent.CallAction__VariableUsage = null;
                    return true;
                }
                if ((this._parent.SynchronisationPoint_VariableUsage == item))
                {
                    this._parent.SynchronisationPoint_VariableUsage = null;
                    return true;
                }
                if ((this._parent.CallReturnAction__VariableUsage == item))
                {
                    this._parent.CallReturnAction__VariableUsage = null;
                    return true;
                }
                if ((this._parent.SetVariableAction_VariableUsage == item))
                {
                    this._parent.SetVariableAction_VariableUsage = null;
                    return true;
                }
                if ((this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage == item))
                {
                    this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = null;
                    return true;
                }
                if ((this._parent.AssemblyContext__VariableUsage == item))
                {
                    this._parent.AssemblyContext__VariableUsage = null;
                    return true;
                }
                if ((this._parent.EntryLevelSystemCall_InputParameterUsage == item))
                {
                    this._parent.EntryLevelSystemCall_InputParameterUsage = null;
                    return true;
                }
                if ((this._parent.EntryLevelSystemCall_OutputParameterUsage == item))
                {
                    this._parent.EntryLevelSystemCall_OutputParameterUsage = null;
                    return true;
                }
                if ((this._parent.NamedReference__VariableUsage == item))
                {
                    this._parent.NamedReference__VariableUsage = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.VariableCharacterisation_VariableUsage).Concat(this._parent.UserData_VariableUsage).Concat(this._parent.CallAction__VariableUsage).Concat(this._parent.SynchronisationPoint_VariableUsage).Concat(this._parent.CallReturnAction__VariableUsage).Concat(this._parent.SetVariableAction_VariableUsage).Concat(this._parent.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage).Concat(this._parent.AssemblyContext__VariableUsage).Concat(this._parent.EntryLevelSystemCall_InputParameterUsage).Concat(this._parent.EntryLevelSystemCall_OutputParameterUsage).Concat(this._parent.NamedReference__VariableUsage).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the userData_VariableUsage property
        /// </summary>
        private sealed class UserData_VariableUsageProxy : ModelPropertyChange<IVariableUsage, IUserData>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UserData_VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUserData Value
            {
                get
                {
                    return this.ModelElement.UserData_VariableUsage;
                }
                set
                {
                    this.ModelElement.UserData_VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UserData_VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UserData_VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the callAction__VariableUsage property
        /// </summary>
        private sealed class CallAction__VariableUsageProxy : ModelPropertyChange<IVariableUsage, ICallAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CallAction__VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICallAction Value
            {
                get
                {
                    return this.ModelElement.CallAction__VariableUsage;
                }
                set
                {
                    this.ModelElement.CallAction__VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallAction__VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallAction__VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the synchronisationPoint_VariableUsage property
        /// </summary>
        private sealed class SynchronisationPoint_VariableUsageProxy : ModelPropertyChange<IVariableUsage, ISynchronisationPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SynchronisationPoint_VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISynchronisationPoint Value
            {
                get
                {
                    return this.ModelElement.SynchronisationPoint_VariableUsage;
                }
                set
                {
                    this.ModelElement.SynchronisationPoint_VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SynchronisationPoint_VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SynchronisationPoint_VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the callReturnAction__VariableUsage property
        /// </summary>
        private sealed class CallReturnAction__VariableUsageProxy : ModelPropertyChange<IVariableUsage, ICallReturnAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CallReturnAction__VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICallReturnAction Value
            {
                get
                {
                    return this.ModelElement.CallReturnAction__VariableUsage;
                }
                set
                {
                    this.ModelElement.CallReturnAction__VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallReturnAction__VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CallReturnAction__VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the setVariableAction_VariableUsage property
        /// </summary>
        private sealed class SetVariableAction_VariableUsageProxy : ModelPropertyChange<IVariableUsage, ISetVariableAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SetVariableAction_VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISetVariableAction Value
            {
                get
                {
                    return this.ModelElement.SetVariableAction_VariableUsage;
                }
                set
                {
                    this.ModelElement.SetVariableAction_VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetVariableAction_VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SetVariableAction_VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage property
        /// </summary>
        private sealed class SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageProxy : ModelPropertyChange<IVariableUsage, ISpecifiedOutputParameterAbstraction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISpecifiedOutputParameterAbstraction Value
            {
                get
                {
                    return this.ModelElement.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage;
                }
                set
                {
                    this.ModelElement.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpecifiedOutputParameterAbstraction_expectedExternalOutputs_VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the assemblyContext__VariableUsage property
        /// </summary>
        private sealed class AssemblyContext__VariableUsageProxy : ModelPropertyChange<IVariableUsage, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyContext__VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.AssemblyContext__VariableUsage;
                }
                set
                {
                    this.ModelElement.AssemblyContext__VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext__VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext__VariableUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entryLevelSystemCall_InputParameterUsage property
        /// </summary>
        private sealed class EntryLevelSystemCall_InputParameterUsageProxy : ModelPropertyChange<IVariableUsage, IEntryLevelSystemCall>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntryLevelSystemCall_InputParameterUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEntryLevelSystemCall Value
            {
                get
                {
                    return this.ModelElement.EntryLevelSystemCall_InputParameterUsage;
                }
                set
                {
                    this.ModelElement.EntryLevelSystemCall_InputParameterUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntryLevelSystemCall_InputParameterUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntryLevelSystemCall_InputParameterUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entryLevelSystemCall_OutputParameterUsage property
        /// </summary>
        private sealed class EntryLevelSystemCall_OutputParameterUsageProxy : ModelPropertyChange<IVariableUsage, IEntryLevelSystemCall>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntryLevelSystemCall_OutputParameterUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEntryLevelSystemCall Value
            {
                get
                {
                    return this.ModelElement.EntryLevelSystemCall_OutputParameterUsage;
                }
                set
                {
                    this.ModelElement.EntryLevelSystemCall_OutputParameterUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntryLevelSystemCall_OutputParameterUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntryLevelSystemCall_OutputParameterUsageChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the namedReference__VariableUsage property
        /// </summary>
        private sealed class NamedReference__VariableUsageProxy : ModelPropertyChange<IVariableUsage, IAbstractNamedReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamedReference__VariableUsageProxy(IVariableUsage modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractNamedReference Value
            {
                get
                {
                    return this.ModelElement.NamedReference__VariableUsage;
                }
                set
                {
                    this.ModelElement.NamedReference__VariableUsage = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NamedReference__VariableUsageChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NamedReference__VariableUsageChanged -= handler;
            }
        }
    }
}

