//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core;
using DeepPCM.Deeppcm.Core.Composition;
using DeepPCM.Deeppcm.Core.Entity;
using DeepPCM.Deeppcm.Parameter;
using DeepPCM.Deeppcm.Reliability;
using DeepPCM.Deeppcm.Repository;
using DeepPCM.Deeppcm.Seff.Seff_performance;
using DeepPCM.Deeppcm.Seff.Seff_reliability;
using DeepPCM.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Seff
{
    
    
    /// <summary>
    /// The default implementation of the AbstractAction class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0")]
    [XmlNamespacePrefixAttribute("seff")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//AbstractAction/")]
    [DebuggerDisplayAttribute("AbstractAction {Id}")]
    public abstract class AbstractAction : DeepPCM.Deeppcm.Core.Entity.Entity, IAbstractAction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Predecessor_AbstractAction property
        /// </summary>
        private IAbstractAction _predecessor_AbstractAction;
        
        /// <summary>
        /// The backing field for the Successor_AbstractAction property
        /// </summary>
        private IAbstractAction _successor_AbstractAction;
        
        /// <summary>
        /// The predecessor_AbstractAction property
        /// </summary>
        [XmlElementNameAttribute("predecessor_AbstractAction")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("successor_AbstractAction")]
        public virtual IAbstractAction Predecessor_AbstractAction
        {
            get
            {
                return this._predecessor_AbstractAction;
            }
            set
            {
                if ((this._predecessor_AbstractAction != value))
                {
                    IAbstractAction old = this._predecessor_AbstractAction;
                    this._predecessor_AbstractAction = value;
                    if ((old != null))
                    {
                        old.Successor_AbstractAction = null;
                        old.Deleted -= this.OnResetPredecessor_AbstractAction;
                    }
                    if ((value != null))
                    {
                        value.Successor_AbstractAction = this;
                        value.Deleted += this.OnResetPredecessor_AbstractAction;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPredecessor_AbstractActionChanged(e);
                    this.OnPropertyChanged("Predecessor_AbstractAction", e);
                }
            }
        }
        
        /// <summary>
        /// The successor_AbstractAction property
        /// </summary>
        [XmlElementNameAttribute("successor_AbstractAction")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("predecessor_AbstractAction")]
        public virtual IAbstractAction Successor_AbstractAction
        {
            get
            {
                return this._successor_AbstractAction;
            }
            set
            {
                if ((this._successor_AbstractAction != value))
                {
                    IAbstractAction old = this._successor_AbstractAction;
                    this._successor_AbstractAction = value;
                    if ((old != null))
                    {
                        old.Predecessor_AbstractAction = null;
                        old.Deleted -= this.OnResetSuccessor_AbstractAction;
                    }
                    if ((value != null))
                    {
                        value.Predecessor_AbstractAction = this;
                        value.Deleted += this.OnResetSuccessor_AbstractAction;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuccessor_AbstractActionChanged(e);
                    this.OnPropertyChanged("Successor_AbstractAction", e);
                }
            }
        }
        
        /// <summary>
        /// The resourceDemandingBehaviour_AbstractAction property
        /// </summary>
        [XmlElementNameAttribute("resourceDemandingBehaviour_AbstractAction")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("steps_Behaviour")]
        public virtual IResourceDemandingBehaviour ResourceDemandingBehaviour_AbstractAction
        {
            get
            {
                return ModelHelper.CastAs<IResourceDemandingBehaviour>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AbstractActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//AbstractAction/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Predecessor_AbstractAction property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Predecessor_AbstractActionChanged;
        
        /// <summary>
        /// Gets fired when the Successor_AbstractAction property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Successor_AbstractActionChanged;
        
        /// <summary>
        /// Gets fired when the ResourceDemandingBehaviour_AbstractAction property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ResourceDemandingBehaviour_AbstractActionChanged;
        
        /// <summary>
        /// Raises the Predecessor_AbstractActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPredecessor_AbstractActionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Predecessor_AbstractActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Predecessor_AbstractAction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPredecessor_AbstractAction(object sender, EventArgs eventArgs)
        {
            this.Predecessor_AbstractAction = null;
        }
        
        /// <summary>
        /// Raises the Successor_AbstractActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuccessor_AbstractActionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Successor_AbstractActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Successor_AbstractAction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSuccessor_AbstractAction(object sender, EventArgs eventArgs)
        {
            this.Successor_AbstractAction = null;
        }
        
        /// <summary>
        /// Raises the ResourceDemandingBehaviour_AbstractActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceDemandingBehaviour_AbstractActionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ResourceDemandingBehaviour_AbstractActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceDemandingBehaviour oldResourceDemandingBehaviour_AbstractAction = ModelHelper.CastAs<IResourceDemandingBehaviour>(oldParent);
            IResourceDemandingBehaviour newResourceDemandingBehaviour_AbstractAction = ModelHelper.CastAs<IResourceDemandingBehaviour>(newParent);
            if ((oldResourceDemandingBehaviour_AbstractAction != null))
            {
                oldResourceDemandingBehaviour_AbstractAction.Steps_Behaviour.Remove(this);
            }
            if ((newResourceDemandingBehaviour_AbstractAction != null))
            {
                newResourceDemandingBehaviour_AbstractAction.Steps_Behaviour.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceDemandingBehaviour_AbstractAction, newResourceDemandingBehaviour_AbstractAction);
            this.OnResourceDemandingBehaviour_AbstractActionChanged(e);
            this.OnPropertyChanged("ResourceDemandingBehaviour_AbstractAction", e);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PREDECESSOR_ABSTRACTACTION"))
            {
                this.Predecessor_AbstractAction = ((IAbstractAction)(value));
                return;
            }
            if ((feature == "SUCCESSOR_ABSTRACTACTION"))
            {
                this.Successor_AbstractAction = ((IAbstractAction)(value));
                return;
            }
            if ((feature == "RESOURCEDEMANDINGBEHAVIOUR_ABSTRACTACTION"))
            {
                this.ResourceDemandingBehaviour_AbstractAction = ((IResourceDemandingBehaviour)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PREDECESSOR_ABSTRACTACTION"))
            {
                return new Predecessor_AbstractActionProxy(this);
            }
            if ((attribute == "SUCCESSOR_ABSTRACTACTION"))
            {
                return new Successor_AbstractActionProxy(this);
            }
            if ((attribute == "RESOURCEDEMANDINGBEHAVIOUR_ABSTRACTACTION"))
            {
                return new ResourceDemandingBehaviour_AbstractActionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PREDECESSOR_ABSTRACTACTION"))
            {
                return new Predecessor_AbstractActionProxy(this);
            }
            if ((reference == "SUCCESSOR_ABSTRACTACTION"))
            {
                return new Successor_AbstractActionProxy(this);
            }
            if ((reference == "RESOURCEDEMANDINGBEHAVIOUR_ABSTRACTACTION"))
            {
                return new ResourceDemandingBehaviour_AbstractActionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//AbstractAction/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AbstractAction class
        /// </summary>
        public class AbstractActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AbstractAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AbstractActionReferencedElementsCollection(AbstractAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Predecessor_AbstractAction != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Successor_AbstractAction != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ResourceDemandingBehaviour_AbstractAction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Predecessor_AbstractActionChanged += this.PropagateValueChanges;
                this._parent.Successor_AbstractActionChanged += this.PropagateValueChanges;
                this._parent.ResourceDemandingBehaviour_AbstractActionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Predecessor_AbstractActionChanged -= this.PropagateValueChanges;
                this._parent.Successor_AbstractActionChanged -= this.PropagateValueChanges;
                this._parent.ResourceDemandingBehaviour_AbstractActionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Predecessor_AbstractAction == null))
                {
                    IAbstractAction predecessor_AbstractActionCasted = item.As<IAbstractAction>();
                    if ((predecessor_AbstractActionCasted != null))
                    {
                        this._parent.Predecessor_AbstractAction = predecessor_AbstractActionCasted;
                        return;
                    }
                }
                if ((this._parent.Successor_AbstractAction == null))
                {
                    IAbstractAction successor_AbstractActionCasted = item.As<IAbstractAction>();
                    if ((successor_AbstractActionCasted != null))
                    {
                        this._parent.Successor_AbstractAction = successor_AbstractActionCasted;
                        return;
                    }
                }
                if ((this._parent.ResourceDemandingBehaviour_AbstractAction == null))
                {
                    IResourceDemandingBehaviour resourceDemandingBehaviour_AbstractActionCasted = item.As<IResourceDemandingBehaviour>();
                    if ((resourceDemandingBehaviour_AbstractActionCasted != null))
                    {
                        this._parent.ResourceDemandingBehaviour_AbstractAction = resourceDemandingBehaviour_AbstractActionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Predecessor_AbstractAction = null;
                this._parent.Successor_AbstractAction = null;
                this._parent.ResourceDemandingBehaviour_AbstractAction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Predecessor_AbstractAction))
                {
                    return true;
                }
                if ((item == this._parent.Successor_AbstractAction))
                {
                    return true;
                }
                if ((item == this._parent.ResourceDemandingBehaviour_AbstractAction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Predecessor_AbstractAction != null))
                {
                    array[arrayIndex] = this._parent.Predecessor_AbstractAction;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Successor_AbstractAction != null))
                {
                    array[arrayIndex] = this._parent.Successor_AbstractAction;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ResourceDemandingBehaviour_AbstractAction != null))
                {
                    array[arrayIndex] = this._parent.ResourceDemandingBehaviour_AbstractAction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Predecessor_AbstractAction == item))
                {
                    this._parent.Predecessor_AbstractAction = null;
                    return true;
                }
                if ((this._parent.Successor_AbstractAction == item))
                {
                    this._parent.Successor_AbstractAction = null;
                    return true;
                }
                if ((this._parent.ResourceDemandingBehaviour_AbstractAction == item))
                {
                    this._parent.ResourceDemandingBehaviour_AbstractAction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Predecessor_AbstractAction).Concat(this._parent.Successor_AbstractAction).Concat(this._parent.ResourceDemandingBehaviour_AbstractAction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the predecessor_AbstractAction property
        /// </summary>
        private sealed class Predecessor_AbstractActionProxy : ModelPropertyChange<IAbstractAction, IAbstractAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Predecessor_AbstractActionProxy(IAbstractAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractAction Value
            {
                get
                {
                    return this.ModelElement.Predecessor_AbstractAction;
                }
                set
                {
                    this.ModelElement.Predecessor_AbstractAction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Predecessor_AbstractActionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Predecessor_AbstractActionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the successor_AbstractAction property
        /// </summary>
        private sealed class Successor_AbstractActionProxy : ModelPropertyChange<IAbstractAction, IAbstractAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Successor_AbstractActionProxy(IAbstractAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractAction Value
            {
                get
                {
                    return this.ModelElement.Successor_AbstractAction;
                }
                set
                {
                    this.ModelElement.Successor_AbstractAction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Successor_AbstractActionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Successor_AbstractActionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceDemandingBehaviour_AbstractAction property
        /// </summary>
        private sealed class ResourceDemandingBehaviour_AbstractActionProxy : ModelPropertyChange<IAbstractAction, IResourceDemandingBehaviour>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceDemandingBehaviour_AbstractActionProxy(IAbstractAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceDemandingBehaviour Value
            {
                get
                {
                    return this.ModelElement.ResourceDemandingBehaviour_AbstractAction;
                }
                set
                {
                    this.ModelElement.ResourceDemandingBehaviour_AbstractAction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceDemandingBehaviour_AbstractActionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceDemandingBehaviour_AbstractActionChanged -= handler;
            }
        }
    }
}

