//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core;
using DeepPCM.Deeppcm.Core.Entity;
using DeepPCM.Deeppcm.Repository;
using DeepPCM.Deeppcm.Resourcetype;
using DeepPCM.Deeppcm.Seff;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Seff.Seff_performance
{
    
    
    /// <summary>
    /// The default implementation of the ResourceCall class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/SEFF_Performance/5.0")]
    [XmlNamespacePrefixAttribute("seff_performance")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//seff_performance//Resour" +
        "ceCall/")]
    public class ResourceCall : CallAction, IResourceCall, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ResourceRequiredRole__ResourceCall property
        /// </summary>
        private IResourceRequiredRole _resourceRequiredRole__ResourceCall;
        
        /// <summary>
        /// The backing field for the Signature__ResourceCall property
        /// </summary>
        private IResourceSignature _signature__ResourceCall;
        
        /// <summary>
        /// The backing field for the NumberOfCalls__ResourceCall property
        /// </summary>
        private IPCMRandomVariable _numberOfCalls__ResourceCall;
        
        /// <summary>
        /// The action__ResourceCall property
        /// </summary>
        [XmlElementNameAttribute("action__ResourceCall")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("resourceCall__Action")]
        public virtual IAbstractInternalControlFlowAction Action__ResourceCall
        {
            get
            {
                return ModelHelper.CastAs<IAbstractInternalControlFlowAction>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The resourceRequiredRole__ResourceCall property
        /// </summary>
        [XmlElementNameAttribute("resourceRequiredRole__ResourceCall")]
        [XmlAttributeAttribute(true)]
        public virtual IResourceRequiredRole ResourceRequiredRole__ResourceCall
        {
            get
            {
                return this._resourceRequiredRole__ResourceCall;
            }
            set
            {
                if ((this._resourceRequiredRole__ResourceCall != value))
                {
                    IResourceRequiredRole old = this._resourceRequiredRole__ResourceCall;
                    this._resourceRequiredRole__ResourceCall = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetResourceRequiredRole__ResourceCall;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetResourceRequiredRole__ResourceCall;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceRequiredRole__ResourceCallChanged(e);
                    this.OnPropertyChanged("ResourceRequiredRole__ResourceCall", e);
                }
            }
        }
        
        /// <summary>
        /// The signature__ResourceCall property
        /// </summary>
        [XmlElementNameAttribute("signature__ResourceCall")]
        [XmlAttributeAttribute(true)]
        public virtual IResourceSignature Signature__ResourceCall
        {
            get
            {
                return this._signature__ResourceCall;
            }
            set
            {
                if ((this._signature__ResourceCall != value))
                {
                    IResourceSignature old = this._signature__ResourceCall;
                    this._signature__ResourceCall = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSignature__ResourceCall;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSignature__ResourceCall;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSignature__ResourceCallChanged(e);
                    this.OnPropertyChanged("Signature__ResourceCall", e);
                }
            }
        }
        
        /// <summary>
        /// The numberOfCalls__ResourceCall property
        /// </summary>
        [XmlElementNameAttribute("numberOfCalls__ResourceCall")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceCall__PCMRandomVariable")]
        public virtual IPCMRandomVariable NumberOfCalls__ResourceCall
        {
            get
            {
                return this._numberOfCalls__ResourceCall;
            }
            set
            {
                if ((this._numberOfCalls__ResourceCall != value))
                {
                    IPCMRandomVariable old = this._numberOfCalls__ResourceCall;
                    this._numberOfCalls__ResourceCall = value;
                    if ((old != null))
                    {
                        old.ResourceCall__PCMRandomVariable = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetNumberOfCalls__ResourceCall;
                    }
                    if ((value != null))
                    {
                        value.ResourceCall__PCMRandomVariable = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetNumberOfCalls__ResourceCall;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberOfCalls__ResourceCallChanged(e);
                    this.OnPropertyChanged("NumberOfCalls__ResourceCall", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ResourceCallChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceCallReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//seff_performance//Resour" +
                        "ceCall/");
            }
        }
        
        /// <summary>
        /// Gets fired when the Action__ResourceCall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Action__ResourceCallChanged;
        
        /// <summary>
        /// Gets fired when the ResourceRequiredRole__ResourceCall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ResourceRequiredRole__ResourceCallChanged;
        
        /// <summary>
        /// Gets fired when the Signature__ResourceCall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Signature__ResourceCallChanged;
        
        /// <summary>
        /// Gets fired when the NumberOfCalls__ResourceCall property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> NumberOfCalls__ResourceCallChanged;
        
        /// <summary>
        /// Raises the Action__ResourceCallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAction__ResourceCallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Action__ResourceCallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IAbstractInternalControlFlowAction oldAction__ResourceCall = ModelHelper.CastAs<IAbstractInternalControlFlowAction>(oldParent);
            IAbstractInternalControlFlowAction newAction__ResourceCall = ModelHelper.CastAs<IAbstractInternalControlFlowAction>(newParent);
            if ((oldAction__ResourceCall != null))
            {
                oldAction__ResourceCall.ResourceCall__Action.Remove(this);
            }
            if ((newAction__ResourceCall != null))
            {
                newAction__ResourceCall.ResourceCall__Action.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldAction__ResourceCall, newAction__ResourceCall);
            this.OnAction__ResourceCallChanged(e);
            this.OnPropertyChanged("Action__ResourceCall", e);
        }
        
        /// <summary>
        /// Raises the ResourceRequiredRole__ResourceCallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRequiredRole__ResourceCallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ResourceRequiredRole__ResourceCallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResourceRequiredRole__ResourceCall property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResourceRequiredRole__ResourceCall(object sender, EventArgs eventArgs)
        {
            this.ResourceRequiredRole__ResourceCall = null;
        }
        
        /// <summary>
        /// Raises the Signature__ResourceCallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSignature__ResourceCallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Signature__ResourceCallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Signature__ResourceCall property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSignature__ResourceCall(object sender, EventArgs eventArgs)
        {
            this.Signature__ResourceCall = null;
        }
        
        /// <summary>
        /// Raises the NumberOfCalls__ResourceCallChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberOfCalls__ResourceCallChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.NumberOfCalls__ResourceCallChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NumberOfCalls__ResourceCall property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNumberOfCalls__ResourceCall(object sender, EventArgs eventArgs)
        {
            this.NumberOfCalls__ResourceCall = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.NumberOfCalls__ResourceCall))
            {
                return ModelHelper.CreatePath("NumberOfCalls__ResourceCall");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "NUMBEROFCALLS__RESOURCECALL"))
            {
                return this.NumberOfCalls__ResourceCall;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ACTION__RESOURCECALL"))
            {
                this.Action__ResourceCall = ((IAbstractInternalControlFlowAction)(value));
                return;
            }
            if ((feature == "RESOURCEREQUIREDROLE__RESOURCECALL"))
            {
                this.ResourceRequiredRole__ResourceCall = ((IResourceRequiredRole)(value));
                return;
            }
            if ((feature == "SIGNATURE__RESOURCECALL"))
            {
                this.Signature__ResourceCall = ((IResourceSignature)(value));
                return;
            }
            if ((feature == "NUMBEROFCALLS__RESOURCECALL"))
            {
                this.NumberOfCalls__ResourceCall = ((IPCMRandomVariable)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ACTION__RESOURCECALL"))
            {
                return new Action__ResourceCallProxy(this);
            }
            if ((attribute == "RESOURCEREQUIREDROLE__RESOURCECALL"))
            {
                return new ResourceRequiredRole__ResourceCallProxy(this);
            }
            if ((attribute == "SIGNATURE__RESOURCECALL"))
            {
                return new Signature__ResourceCallProxy(this);
            }
            if ((attribute == "NUMBEROFCALLS__RESOURCECALL"))
            {
                return new NumberOfCalls__ResourceCallProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ACTION__RESOURCECALL"))
            {
                return new Action__ResourceCallProxy(this);
            }
            if ((reference == "RESOURCEREQUIREDROLE__RESOURCECALL"))
            {
                return new ResourceRequiredRole__ResourceCallProxy(this);
            }
            if ((reference == "SIGNATURE__RESOURCECALL"))
            {
                return new Signature__ResourceCallProxy(this);
            }
            if ((reference == "NUMBEROFCALLS__RESOURCECALL"))
            {
                return new NumberOfCalls__ResourceCallProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//seff_performance//Resour" +
                    "ceCall/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceCall class
        /// </summary>
        public class ResourceCallChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceCall _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceCallChildrenCollection(ResourceCall parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.NumberOfCalls__ResourceCall != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NumberOfCalls__ResourceCallChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NumberOfCalls__ResourceCallChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.NumberOfCalls__ResourceCall == null))
                {
                    IPCMRandomVariable numberOfCalls__ResourceCallCasted = item.As<IPCMRandomVariable>();
                    if ((numberOfCalls__ResourceCallCasted != null))
                    {
                        this._parent.NumberOfCalls__ResourceCall = numberOfCalls__ResourceCallCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NumberOfCalls__ResourceCall = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.NumberOfCalls__ResourceCall))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.NumberOfCalls__ResourceCall != null))
                {
                    array[arrayIndex] = this._parent.NumberOfCalls__ResourceCall;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.NumberOfCalls__ResourceCall == item))
                {
                    this._parent.NumberOfCalls__ResourceCall = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NumberOfCalls__ResourceCall).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceCall class
        /// </summary>
        public class ResourceCallReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceCall _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceCallReferencedElementsCollection(ResourceCall parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Action__ResourceCall != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ResourceRequiredRole__ResourceCall != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Signature__ResourceCall != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NumberOfCalls__ResourceCall != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Action__ResourceCallChanged += this.PropagateValueChanges;
                this._parent.ResourceRequiredRole__ResourceCallChanged += this.PropagateValueChanges;
                this._parent.Signature__ResourceCallChanged += this.PropagateValueChanges;
                this._parent.NumberOfCalls__ResourceCallChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Action__ResourceCallChanged -= this.PropagateValueChanges;
                this._parent.ResourceRequiredRole__ResourceCallChanged -= this.PropagateValueChanges;
                this._parent.Signature__ResourceCallChanged -= this.PropagateValueChanges;
                this._parent.NumberOfCalls__ResourceCallChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Action__ResourceCall == null))
                {
                    IAbstractInternalControlFlowAction action__ResourceCallCasted = item.As<IAbstractInternalControlFlowAction>();
                    if ((action__ResourceCallCasted != null))
                    {
                        this._parent.Action__ResourceCall = action__ResourceCallCasted;
                        return;
                    }
                }
                if ((this._parent.ResourceRequiredRole__ResourceCall == null))
                {
                    IResourceRequiredRole resourceRequiredRole__ResourceCallCasted = item.As<IResourceRequiredRole>();
                    if ((resourceRequiredRole__ResourceCallCasted != null))
                    {
                        this._parent.ResourceRequiredRole__ResourceCall = resourceRequiredRole__ResourceCallCasted;
                        return;
                    }
                }
                if ((this._parent.Signature__ResourceCall == null))
                {
                    IResourceSignature signature__ResourceCallCasted = item.As<IResourceSignature>();
                    if ((signature__ResourceCallCasted != null))
                    {
                        this._parent.Signature__ResourceCall = signature__ResourceCallCasted;
                        return;
                    }
                }
                if ((this._parent.NumberOfCalls__ResourceCall == null))
                {
                    IPCMRandomVariable numberOfCalls__ResourceCallCasted = item.As<IPCMRandomVariable>();
                    if ((numberOfCalls__ResourceCallCasted != null))
                    {
                        this._parent.NumberOfCalls__ResourceCall = numberOfCalls__ResourceCallCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Action__ResourceCall = null;
                this._parent.ResourceRequiredRole__ResourceCall = null;
                this._parent.Signature__ResourceCall = null;
                this._parent.NumberOfCalls__ResourceCall = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Action__ResourceCall))
                {
                    return true;
                }
                if ((item == this._parent.ResourceRequiredRole__ResourceCall))
                {
                    return true;
                }
                if ((item == this._parent.Signature__ResourceCall))
                {
                    return true;
                }
                if ((item == this._parent.NumberOfCalls__ResourceCall))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Action__ResourceCall != null))
                {
                    array[arrayIndex] = this._parent.Action__ResourceCall;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ResourceRequiredRole__ResourceCall != null))
                {
                    array[arrayIndex] = this._parent.ResourceRequiredRole__ResourceCall;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Signature__ResourceCall != null))
                {
                    array[arrayIndex] = this._parent.Signature__ResourceCall;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NumberOfCalls__ResourceCall != null))
                {
                    array[arrayIndex] = this._parent.NumberOfCalls__ResourceCall;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Action__ResourceCall == item))
                {
                    this._parent.Action__ResourceCall = null;
                    return true;
                }
                if ((this._parent.ResourceRequiredRole__ResourceCall == item))
                {
                    this._parent.ResourceRequiredRole__ResourceCall = null;
                    return true;
                }
                if ((this._parent.Signature__ResourceCall == item))
                {
                    this._parent.Signature__ResourceCall = null;
                    return true;
                }
                if ((this._parent.NumberOfCalls__ResourceCall == item))
                {
                    this._parent.NumberOfCalls__ResourceCall = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Action__ResourceCall).Concat(this._parent.ResourceRequiredRole__ResourceCall).Concat(this._parent.Signature__ResourceCall).Concat(this._parent.NumberOfCalls__ResourceCall).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the action__ResourceCall property
        /// </summary>
        private sealed class Action__ResourceCallProxy : ModelPropertyChange<IResourceCall, IAbstractInternalControlFlowAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Action__ResourceCallProxy(IResourceCall modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAbstractInternalControlFlowAction Value
            {
                get
                {
                    return this.ModelElement.Action__ResourceCall;
                }
                set
                {
                    this.ModelElement.Action__ResourceCall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Action__ResourceCallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Action__ResourceCallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceRequiredRole__ResourceCall property
        /// </summary>
        private sealed class ResourceRequiredRole__ResourceCallProxy : ModelPropertyChange<IResourceCall, IResourceRequiredRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceRequiredRole__ResourceCallProxy(IResourceCall modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceRequiredRole Value
            {
                get
                {
                    return this.ModelElement.ResourceRequiredRole__ResourceCall;
                }
                set
                {
                    this.ModelElement.ResourceRequiredRole__ResourceCall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceRequiredRole__ResourceCallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceRequiredRole__ResourceCallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the signature__ResourceCall property
        /// </summary>
        private sealed class Signature__ResourceCallProxy : ModelPropertyChange<IResourceCall, IResourceSignature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Signature__ResourceCallProxy(IResourceCall modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceSignature Value
            {
                get
                {
                    return this.ModelElement.Signature__ResourceCall;
                }
                set
                {
                    this.ModelElement.Signature__ResourceCall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Signature__ResourceCallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Signature__ResourceCallChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the numberOfCalls__ResourceCall property
        /// </summary>
        private sealed class NumberOfCalls__ResourceCallProxy : ModelPropertyChange<IResourceCall, IPCMRandomVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberOfCalls__ResourceCallProxy(IResourceCall modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPCMRandomVariable Value
            {
                get
                {
                    return this.ModelElement.NumberOfCalls__ResourceCall;
                }
                set
                {
                    this.ModelElement.NumberOfCalls__ResourceCall = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumberOfCalls__ResourceCallChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumberOfCalls__ResourceCallChanged -= handler;
            }
        }
    }
}

