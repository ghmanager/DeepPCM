//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using DeepPCM.Deeppcm.Core.Entity;
using DeepPCM.Deeppcm.Parameter;
using DeepPCM.Deeppcm.Repository;
using DeepPCM.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace DeepPCM.Deeppcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the OperationDelegationConnector class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//OperationDe" +
        "legationConnector/")]
    [DebuggerDisplayAttribute("OperationDelegationConnector {Id}")]
    public class OperationDelegationConnector : Connector, IOperationDelegationConnector, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OperationPort property
        /// </summary>
        private IRequiredOperationInterface _operationPort;
        
        /// <summary>
        /// The backing field for the OperationType property
        /// </summary>
        private IOperationInterface _operationType;
        
        event EventHandler<ValueChangedEventArgs> IDelegationConnector.PortChanged
        {
            add
            {
                IOperationDelegationConnector _this_OperationDelegationConnector = this;
                _this_OperationDelegationConnector.OperationPortChanged += value;
            }
            remove
            {
                IOperationDelegationConnector _this_OperationDelegationConnector = this;
                _this_OperationDelegationConnector.OperationPortChanged -= value;
            }
        }
        
        /// <summary>
        /// The OperationPort property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IRequiredOperationInterface OperationPort
        {
            get
            {
                return this._operationPort;
            }
            set
            {
                if ((this._operationPort != value))
                {
                    IRequiredOperationInterface old = this._operationPort;
                    this._operationPort = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperationPort;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperationPort;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationPortChanged(e);
                    this.OnPropertyChanged("OperationPort", e);
                }
            }
        }
        
        /// <summary>
        /// The OperationType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IOperationInterface OperationType
        {
            get
            {
                return this._operationType;
            }
            set
            {
                if ((this._operationType != value))
                {
                    IOperationInterface old = this._operationType;
                    this._operationType = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOperationType;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOperationType;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationTypeChanged(e);
                    this.OnPropertyChanged("OperationType", e);
                }
            }
        }
        
        IRequiredInterface IDelegationConnector.Port
        {
            get
            {
                IOperationDelegationConnector _this = this;
                if ((_this.OperationPort != null))
                {
                    return _this.OperationPort;
                }
                return null;
            }
            set
            {
                IOperationDelegationConnector _this = this;
                if ((value != null))
                {
                    IRequiredOperationInterface @__OperationPort = value.As<IRequiredOperationInterface>();
                    if ((@__OperationPort != null))
                    {
                        _this.OperationPort = @__OperationPort;
                        return;
                    }
                }
                else
                {
                    _this.OperationPort = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationDelegationConnectorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//OperationDe" +
                        "legationConnector/");
            }
        }
        
        /// <summary>
        /// Gets fired when the OperationPort property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OperationPortChanged;
        
        /// <summary>
        /// Gets fired when the OperationType property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> OperationTypeChanged;
        
        /// <summary>
        /// Raises the OperationPortChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationPortChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OperationPortChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperationPort property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperationPort(object sender, EventArgs eventArgs)
        {
            this.OperationPort = null;
        }
        
        /// <summary>
        /// Raises the OperationTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationTypeChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.OperationTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperationType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperationType(object sender, EventArgs eventArgs)
        {
            this.OperationType = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATIONPORT"))
            {
                this.OperationPort = ((IRequiredOperationInterface)(value));
                return;
            }
            if ((feature == "OPERATIONTYPE"))
            {
                this.OperationType = ((IOperationInterface)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OPERATIONPORT"))
            {
                return new OperationPortProxy(this);
            }
            if ((attribute == "OPERATIONTYPE"))
            {
                return new OperationTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OPERATIONPORT"))
            {
                return new OperationPortProxy(this);
            }
            if ((reference == "OPERATIONTYPE"))
            {
                return new OperationTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Delegate for this model element
        /// </summary>
        public virtual IDelegate GetDelegate()
        {
            return ((IDelegate)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//OperationDe" +
                    "legationConnector/")));
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//OperationDe" +
                    "legationConnector/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OperationDelegationConnector class
        /// </summary>
        public class OperationDelegationConnectorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OperationDelegationConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationDelegationConnectorReferencedElementsCollection(OperationDelegationConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OperationPort != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OperationType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationPortChanged += this.PropagateValueChanges;
                this._parent.OperationTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationPortChanged -= this.PropagateValueChanges;
                this._parent.OperationTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OperationPort == null))
                {
                    IRequiredOperationInterface operationPortCasted = item.As<IRequiredOperationInterface>();
                    if ((operationPortCasted != null))
                    {
                        this._parent.OperationPort = operationPortCasted;
                        return;
                    }
                }
                if ((this._parent.OperationType == null))
                {
                    IOperationInterface operationTypeCasted = item.As<IOperationInterface>();
                    if ((operationTypeCasted != null))
                    {
                        this._parent.OperationType = operationTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperationPort = null;
                this._parent.OperationType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OperationPort))
                {
                    return true;
                }
                if ((item == this._parent.OperationType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OperationPort != null))
                {
                    array[arrayIndex] = this._parent.OperationPort;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OperationType != null))
                {
                    array[arrayIndex] = this._parent.OperationType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OperationPort == item))
                {
                    this._parent.OperationPort = null;
                    return true;
                }
                if ((this._parent.OperationType == item))
                {
                    this._parent.OperationType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperationPort).Concat(this._parent.OperationType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OperationPort property
        /// </summary>
        private sealed class OperationPortProxy : ModelPropertyChange<IOperationDelegationConnector, IRequiredOperationInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationPortProxy(IOperationDelegationConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRequiredOperationInterface Value
            {
                get
                {
                    return this.ModelElement.OperationPort;
                }
                set
                {
                    this.ModelElement.OperationPort = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OperationPortChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OperationPortChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OperationType property
        /// </summary>
        private sealed class OperationTypeProxy : ModelPropertyChange<IOperationDelegationConnector, IOperationInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationTypeProxy(IOperationDelegationConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperationInterface Value
            {
                get
                {
                    return this.ModelElement.OperationType;
                }
                set
                {
                    this.ModelElement.OperationType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OperationTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OperationTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Port property
        /// </summary>
        private sealed class PortProxy : ModelPropertyChange<IDelegationConnector, IRequiredInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PortProxy(IDelegationConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRequiredInterface Value
            {
                get
                {
                    return this.ModelElement.Port;
                }
                set
                {
                    this.ModelElement.Port = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PortChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PortChanged -= handler;
            }
        }
    }
}

