//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Reliability;
using Metamodel.DeepPCM.Repository;
using Metamodel.Identifier;
using Metamodel.Units;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Resourcetype
{
    
    
    /// <summary>
    /// The default implementation of the ResourceType class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/ResourceType/1.0")]
    [XmlNamespacePrefixAttribute("resourcetype")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//resourcetype//ResourceType/")]
    [DebuggerDisplayAttribute("ResourceType {Id}")]
    public abstract class ResourceType : ReferenceType, IResourceType, IModelElement
    {
        
        /// <summary>
        /// The backing field for the UnitSpecification property
        /// </summary>
        private string _unitSpecification;
        
        /// <summary>
        /// The backing field for the Unit property
        /// </summary>
        private IUnit _unit;
        
        /// <summary>
        /// The backing field for the ProvidedResourceInterfaces property
        /// </summary>
        private ObservableCompositionList<IResourceInterface> _providedResourceInterfaces;
        
        /// <summary>
        /// The backing field for the IsAbstract property
        /// </summary>
        private bool _isAbstract = false;
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private IdentifierScope _identifierScope;
        
        /// <summary>
        /// The backing field for the InstanceOf property
        /// </summary>
        private IClass _instanceOf;
        
        /// <summary>
        /// The backing field for the Identifier property
        /// </summary>
        private IAttribute _identifier;
        
        /// <summary>
        /// The backing field for the AttributeConstraints property
        /// </summary>
        private ClassAttributeConstraintsCollection _attributeConstraints;
        
        /// <summary>
        /// The backing field for the ReferenceConstraints property
        /// </summary>
        private ClassReferenceConstraintsCollection _referenceConstraints;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        private static IClass _classInstance;
        
        public ResourceType()
        {
            this._providedResourceInterfaces = new ObservableCompositionList<IResourceInterface>(this);
            this._providedResourceInterfaces.CollectionChanging += this.ProvidedResourceInterfacesCollectionChanging;
            this._providedResourceInterfaces.CollectionChanged += this.ProvidedResourceInterfacesCollectionChanged;
            this._attributeConstraints = new ClassAttributeConstraintsCollection(this);
            this._attributeConstraints.CollectionChanging += this.AttributeConstraintsCollectionChanging;
            this._attributeConstraints.CollectionChanged += this.AttributeConstraintsCollectionChanged;
            this._referenceConstraints = new ClassReferenceConstraintsCollection(this);
            this._referenceConstraints.CollectionChanging += this.ReferenceConstraintsCollectionChanging;
            this._referenceConstraints.CollectionChanged += this.ReferenceConstraintsCollectionChanged;
        }
        
        /// <summary>
        /// The resourceRepository_ResourceType property
        /// </summary>
        [XmlElementNameAttribute("resourceRepository_ResourceType")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("availableResourceTypes_ResourceRepository")]
        public virtual IResourceRepository ResourceRepository_ResourceType
        {
            get
            {
                return ModelHelper.CastAs<IResourceRepository>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The unitSpecification property
        /// </summary>
        [XmlElementNameAttribute("unitSpecification")]
        [XmlAttributeAttribute(true)]
        public virtual string UnitSpecification
        {
            get
            {
                return this._unitSpecification;
            }
            set
            {
                if ((this._unitSpecification != value))
                {
                    string old = this._unitSpecification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitSpecificationChanging(e);
                    this.OnPropertyChanging("UnitSpecification", e);
                    this._unitSpecification = value;
                    this.OnUnitSpecificationChanged(e);
                    this.OnPropertyChanged("UnitSpecification", e);
                }
            }
        }
        
        /// <summary>
        /// The unit property
        /// </summary>
        [XmlElementNameAttribute("unit")]
        [XmlAttributeAttribute(true)]
        public virtual IUnit Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    IUnit old = this._unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitChanging(e);
                    this.OnPropertyChanging("Unit", e);
                    this._unit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetUnit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetUnit;
                    }
                    this.OnUnitChanged(e);
                    this.OnPropertyChanged("Unit", e);
                }
            }
        }
        
        /// <summary>
        /// The ProvidedResourceInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IResourceInterface> ProvidedResourceInterfaces
        {
            get
            {
                return this._providedResourceInterfaces;
            }
        }
        
        ICollectionExpression<IClass> IClass.BaseTypes
        {
            get
            {
                return new ResourceInterfaceProvidingEntityBaseTypesCollection(this);
            }
        }
        
        /// <summary>
        /// The IsAbstract property
        /// </summary>
        [DefaultValueAttribute(false)]
        [XmlAttributeAttribute(true)]
        public virtual bool IsAbstract
        {
            get
            {
                return this._isAbstract;
            }
            set
            {
                if ((this._isAbstract != value))
                {
                    bool old = this._isAbstract;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAbstractChanging(e);
                    this.OnPropertyChanging("IsAbstract", e);
                    this._isAbstract = value;
                    this.OnIsAbstractChanged(e);
                    this.OnPropertyChanged("IsAbstract", e);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [XmlAttributeAttribute(true)]
        public virtual IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e);
                }
            }
        }
        
        /// <summary>
        /// The InstanceOf property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IClass InstanceOf
        {
            get
            {
                return this._instanceOf;
            }
            set
            {
                if ((this._instanceOf != value))
                {
                    IClass old = this._instanceOf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstanceOfChanging(e);
                    this.OnPropertyChanging("InstanceOf", e);
                    this._instanceOf = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetInstanceOf;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetInstanceOf;
                    }
                    this.OnInstanceOfChanged(e);
                    this.OnPropertyChanged("InstanceOf", e);
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the attribute that will identify instances of this class
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IAttribute Identifier
        {
            get
            {
                return this._identifier;
            }
            set
            {
                if ((this._identifier != value))
                {
                    IAttribute old = this._identifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierChanging(e);
                    this.OnPropertyChanging("Identifier", e);
                    this._identifier = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetIdentifier;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetIdentifier;
                    }
                    this.OnIdentifierChanged(e);
                    this.OnPropertyChanged("Identifier", e);
                }
            }
        }
        
        /// <summary>
        /// The AttributeConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IAttributeConstraint> AttributeConstraints
        {
            get
            {
                return this._attributeConstraints;
            }
        }
        
        /// <summary>
        /// The ReferenceConstraints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IReferenceConstraint> ReferenceConstraints
        {
            get
            {
                return this._referenceConstraints;
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public virtual string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanging(e);
                    this.OnPropertyChanging("EntityName", e);
                    this._entityName = value;
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//resourcetype//ResourceType/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceRepository_ResourceType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceRepository_ResourceTypeChanging;
        
        /// <summary>
        /// Gets fired when the ResourceRepository_ResourceType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceRepository_ResourceTypeChanged;
        
        /// <summary>
        /// Gets fired before the UnitSpecification property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitSpecificationChanging;
        
        /// <summary>
        /// Gets fired when the UnitSpecification property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitSpecificationChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the IsAbstract property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanging;
        
        /// <summary>
        /// Gets fired when the IsAbstract property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAbstractChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired before the InstanceOf property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceOfChanging;
        
        /// <summary>
        /// Gets fired when the InstanceOf property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstanceOfChanged;
        
        /// <summary>
        /// Gets fired before the Identifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanging;
        
        /// <summary>
        /// Gets fired when the Identifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierChanged;
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the EntityName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanging;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        /// <summary>
        /// Raises the ResourceRepository_ResourceTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRepository_ResourceTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRepository_ResourceTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IResourceRepository oldResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(oldParent);
            IResourceRepository newResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceRepository_ResourceType, newResourceRepository_ResourceType);
            this.OnResourceRepository_ResourceTypeChanging(e);
            this.OnPropertyChanging("ResourceRepository_ResourceType");
        }
        
        /// <summary>
        /// Raises the ResourceRepository_ResourceTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRepository_ResourceTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRepository_ResourceTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceRepository oldResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(oldParent);
            IResourceRepository newResourceRepository_ResourceType = ModelHelper.CastAs<IResourceRepository>(newParent);
            if ((oldResourceRepository_ResourceType != null))
            {
                oldResourceRepository_ResourceType.AvailableResourceTypes_ResourceRepository.Remove(this);
            }
            if ((newResourceRepository_ResourceType != null))
            {
                newResourceRepository_ResourceType.AvailableResourceTypes_ResourceRepository.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceRepository_ResourceType, newResourceRepository_ResourceType);
            this.OnResourceRepository_ResourceTypeChanged(e);
            this.OnPropertyChanged("ResourceRepository_ResourceType", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Raises the UnitSpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitSpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitSpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitSpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitSpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitSpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Unit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnit(object sender, System.EventArgs eventArgs)
        {
            this.Unit = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProvidedResourceInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedResourceInterfacesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProvidedResourceInterfaces", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProvidedResourceInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedResourceInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedResourceInterfaces", e);
        }
        
        /// <summary>
        /// Raises the IsAbstractChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAbstractChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAbstractChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAbstractChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceOfChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceOfChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceOfChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstanceOfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstanceOfChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstanceOfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InstanceOf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInstanceOf(object sender, System.EventArgs eventArgs)
        {
            this.InstanceOf = null;
        }
        
        /// <summary>
        /// Raises the IdentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Identifier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIdentifier(object sender, System.EventArgs eventArgs)
        {
            this.Identifier = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AttributeConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeConstraintsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("AttributeConstraints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AttributeConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AttributeConstraintsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AttributeConstraints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReferenceConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferenceConstraintsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ReferenceConstraints", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReferenceConstraints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferenceConstraintsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReferenceConstraints", e);
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            if ((attribute == "UNITSPECIFICATION"))
            {
                return this.UnitSpecification;
            }
            if ((attribute == "ISABSTRACT"))
            {
                return this.IsAbstract;
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PROVIDEDRESOURCEINTERFACES"))
            {
                return this._providedResourceInterfaces;
            }
            if ((feature == "ATTRIBUTECONSTRAINTS"))
            {
                return this._attributeConstraints;
            }
            if ((feature == "REFERENCECONSTRAINTS"))
            {
                return this._referenceConstraints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOURCEREPOSITORY_RESOURCETYPE"))
            {
                this.ResourceRepository_ResourceType = ((IResourceRepository)(value));
                return;
            }
            if ((feature == "UNIT"))
            {
                this.Unit = ((IUnit)(value));
                return;
            }
            if ((feature == "INSTANCEOF"))
            {
                this.InstanceOf = ((IClass)(value));
                return;
            }
            if ((feature == "IDENTIFIER"))
            {
                this.Identifier = ((IAttribute)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            if ((feature == "UNITSPECIFICATION"))
            {
                this.UnitSpecification = ((string)(value));
                return;
            }
            if ((feature == "ISABSTRACT"))
            {
                this.IsAbstract = ((bool)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RESOURCEREPOSITORY_RESOURCETYPE"))
            {
                return new ResourceRepository_ResourceTypeProxy(this);
            }
            if ((attribute == "UNIT"))
            {
                return new UnitProxy(this);
            }
            if ((attribute == "INSTANCEOF"))
            {
                return new InstanceOfProxy(this);
            }
            if ((attribute == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RESOURCEREPOSITORY_RESOURCETYPE"))
            {
                return new ResourceRepository_ResourceTypeProxy(this);
            }
            if ((reference == "UNIT"))
            {
                return new UnitProxy(this);
            }
            if ((reference == "INSTANCEOF"))
            {
                return new InstanceOfProxy(this);
            }
            if ((reference == "IDENTIFIER"))
            {
                return new IdentifierProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//resourcetype//ResourceType/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceType class
        /// </summary>
        public class ResourceTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceTypeReferencedElementsCollection(ResourceType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ResourceRepository_ResourceType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Unit != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ProvidedResourceInterfaces.Count);
                    if ((this._parent.InstanceOf != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Identifier != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.AttributeConstraints.Count);
                    count = (count + this._parent.ReferenceConstraints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceRepository_ResourceTypeChanged += this.PropagateValueChanges;
                this._parent.UnitChanged += this.PropagateValueChanges;
                this._parent.ProvidedResourceInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InstanceOfChanged += this.PropagateValueChanges;
                this._parent.IdentifierChanged += this.PropagateValueChanges;
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceRepository_ResourceTypeChanged -= this.PropagateValueChanges;
                this._parent.UnitChanged -= this.PropagateValueChanges;
                this._parent.ProvidedResourceInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InstanceOfChanged -= this.PropagateValueChanges;
                this._parent.IdentifierChanged -= this.PropagateValueChanges;
                this._parent.AttributeConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReferenceConstraints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ResourceRepository_ResourceType == null))
                {
                    IResourceRepository resourceRepository_ResourceTypeCasted = item.As<IResourceRepository>();
                    if ((resourceRepository_ResourceTypeCasted != null))
                    {
                        this._parent.ResourceRepository_ResourceType = resourceRepository_ResourceTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Unit == null))
                {
                    IUnit unitCasted = item.As<IUnit>();
                    if ((unitCasted != null))
                    {
                        this._parent.Unit = unitCasted;
                        return;
                    }
                }
                IResourceInterface providedResourceInterfacesCasted = item.As<IResourceInterface>();
                if ((providedResourceInterfacesCasted != null))
                {
                    this._parent.ProvidedResourceInterfaces.Add(providedResourceInterfacesCasted);
                }
                if ((this._parent.InstanceOf == null))
                {
                    IClass instanceOfCasted = item.As<IClass>();
                    if ((instanceOfCasted != null))
                    {
                        this._parent.InstanceOf = instanceOfCasted;
                        return;
                    }
                }
                if ((this._parent.Identifier == null))
                {
                    IAttribute identifierCasted = item.As<IAttribute>();
                    if ((identifierCasted != null))
                    {
                        this._parent.Identifier = identifierCasted;
                        return;
                    }
                }
                IAttributeConstraint attributeConstraintsCasted = item.As<IAttributeConstraint>();
                if ((attributeConstraintsCasted != null))
                {
                    this._parent.AttributeConstraints.Add(attributeConstraintsCasted);
                }
                IReferenceConstraint referenceConstraintsCasted = item.As<IReferenceConstraint>();
                if ((referenceConstraintsCasted != null))
                {
                    this._parent.ReferenceConstraints.Add(referenceConstraintsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceRepository_ResourceType = null;
                this._parent.Unit = null;
                this._parent.ProvidedResourceInterfaces.Clear();
                this._parent.InstanceOf = null;
                this._parent.Identifier = null;
                this._parent.AttributeConstraints.Clear();
                this._parent.ReferenceConstraints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ResourceRepository_ResourceType))
                {
                    return true;
                }
                if ((item == this._parent.Unit))
                {
                    return true;
                }
                if (this._parent.ProvidedResourceInterfaces.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.InstanceOf))
                {
                    return true;
                }
                if ((item == this._parent.Identifier))
                {
                    return true;
                }
                if (this._parent.AttributeConstraints.Contains(item))
                {
                    return true;
                }
                if (this._parent.ReferenceConstraints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ResourceRepository_ResourceType != null))
                {
                    array[arrayIndex] = this._parent.ResourceRepository_ResourceType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Unit != null))
                {
                    array[arrayIndex] = this._parent.Unit;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> providedResourceInterfacesEnumerator = this._parent.ProvidedResourceInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedResourceInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedResourceInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedResourceInterfacesEnumerator.Dispose();
                }
                if ((this._parent.InstanceOf != null))
                {
                    array[arrayIndex] = this._parent.InstanceOf;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Identifier != null))
                {
                    array[arrayIndex] = this._parent.Identifier;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> attributeConstraintsEnumerator = this._parent.AttributeConstraints.GetEnumerator();
                try
                {
                    for (
                    ; attributeConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = attributeConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    attributeConstraintsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referenceConstraintsEnumerator = this._parent.ReferenceConstraints.GetEnumerator();
                try
                {
                    for (
                    ; referenceConstraintsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referenceConstraintsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referenceConstraintsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ResourceRepository_ResourceType == item))
                {
                    this._parent.ResourceRepository_ResourceType = null;
                    return true;
                }
                if ((this._parent.Unit == item))
                {
                    this._parent.Unit = null;
                    return true;
                }
                IResourceInterface resourceInterfaceItem = item.As<IResourceInterface>();
                if (((resourceInterfaceItem != null) 
                            && this._parent.ProvidedResourceInterfaces.Remove(resourceInterfaceItem)))
                {
                    return true;
                }
                if ((this._parent.InstanceOf == item))
                {
                    this._parent.InstanceOf = null;
                    return true;
                }
                if ((this._parent.Identifier == item))
                {
                    this._parent.Identifier = null;
                    return true;
                }
                IAttributeConstraint attributeConstraintItem = item.As<IAttributeConstraint>();
                if (((attributeConstraintItem != null) 
                            && this._parent.AttributeConstraints.Remove(attributeConstraintItem)))
                {
                    return true;
                }
                IReferenceConstraint referenceConstraintItem = item.As<IReferenceConstraint>();
                if (((referenceConstraintItem != null) 
                            && this._parent.ReferenceConstraints.Remove(referenceConstraintItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceRepository_ResourceType).Concat(this._parent.Unit).Concat(this._parent.ProvidedResourceInterfaces).Concat(this._parent.InstanceOf).Concat(this._parent.Identifier).Concat(this._parent.AttributeConstraints).Concat(this._parent.ReferenceConstraints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceRepository_ResourceType property
        /// </summary>
        private sealed class ResourceRepository_ResourceTypeProxy : ModelPropertyChange<IResourceType, IResourceRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceRepository_ResourceTypeProxy(IResourceType modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceRepository Value
            {
                get
                {
                    return this.ModelElement.ResourceRepository_ResourceType;
                }
                set
                {
                    this.ModelElement.ResourceRepository_ResourceType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceRepository_ResourceTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceRepository_ResourceTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unitSpecification property
        /// </summary>
        private sealed class UnitSpecificationProxy : ModelPropertyChange<IUnitCarryingElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitSpecificationProxy(IUnitCarryingElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.UnitSpecification;
                }
                set
                {
                    this.ModelElement.UnitSpecification = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitSpecificationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitSpecificationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unit property
        /// </summary>
        private sealed class UnitProxy : ModelPropertyChange<IUnitCarryingElement, IUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitProxy(IUnitCarryingElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnit Value
            {
                get
                {
                    return this.ModelElement.Unit;
                }
                set
                {
                    this.ModelElement.Unit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged -= handler;
            }
        }
    }
}

