//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core;
using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Protocol;
using Metamodel.DeepPCM.Reliability;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.Seff;
using Metamodel.DeepPCM.System0;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Repository
{
    
    
    /// <summary>
    /// The default implementation of the EventGroupSubscriber class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Repository/1.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//repository//EventGroupSubscriber/")]
    [DebuggerDisplayAttribute("EventGroupSubscriber {Id}")]
    public class EventGroupSubscriber : MetaElement, IEventGroupSubscriber, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EventGroup property
        /// </summary>
        private IEventGroup _eventGroup;
        
        /// <summary>
        /// The backing field for the FilterCondition__EventGroupSubscriber property
        /// </summary>
        private IPCMRandomVariable _filterCondition__EventGroupSubscriber;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        /// <summary>
        /// The backing field for the Opposite property
        /// </summary>
        private IReference _opposite;
        
        /// <summary>
        /// The backing field for the Refines property
        /// </summary>
        private IReference _refines;
        
        /// <summary>
        /// The backing field for the Anchor property
        /// </summary>
        private IClass _anchor;
        
        private static IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IRequiredInterface.InterfaceChanged
        {
            add
            {
                IEventGroupSubscriber _this_EventGroupSubscriber = this;
                _this_EventGroupSubscriber.EventGroupChanged += value;
            }
            remove
            {
                IEventGroupSubscriber _this_EventGroupSubscriber = this;
                _this_EventGroupSubscriber.EventGroupChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IRequiredInterface.InterfaceChanging
        {
            add
            {
                IEventGroupSubscriber _this_EventGroupSubscriber = this;
                _this_EventGroupSubscriber.EventGroupChanging += value;
            }
            remove
            {
                IEventGroupSubscriber _this_EventGroupSubscriber = this;
                _this_EventGroupSubscriber.EventGroupChanging -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanged
        {
            add
            {
                IRequiredInterface _this_RequiredInterface = this;
                _this_RequiredInterface.InterfaceChanged += value;
            }
            remove
            {
                IRequiredInterface _this_RequiredInterface = this;
                _this_RequiredInterface.InterfaceChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.ReferenceTypeChanging
        {
            add
            {
                IRequiredInterface _this_RequiredInterface = this;
                _this_RequiredInterface.InterfaceChanging += value;
            }
            remove
            {
                IRequiredInterface _this_RequiredInterface = this;
                _this_RequiredInterface.InterfaceChanging -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.LowerBoundChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.UpperBoundChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IReference.IsContainmentChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsOrderedChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.IsUniqueChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanged
        {
            add
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanged += value;
            }
            remove
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> ITypedElement.TypeChanging
        {
            add
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanging += value;
            }
            remove
            {
                IReference _this_Reference = this;
                _this_Reference.ReferenceTypeChanging -= value;
            }
        }
        
        /// <summary>
        /// The EventGroup property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IEventGroup EventGroup
        {
            get
            {
                return this._eventGroup;
            }
            set
            {
                if ((this._eventGroup != value))
                {
                    IEventGroup old = this._eventGroup;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEventGroupChanging(e);
                    this.OnPropertyChanging("EventGroup", e);
                    this._eventGroup = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEventGroup;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEventGroup;
                    }
                    this.OnEventGroupChanged(e);
                    this.OnPropertyChanged("EventGroup", e);
                }
            }
        }
        
        /// <summary>
        /// The filterCondition__EventGroupSubscriber property
        /// </summary>
        [XmlElementNameAttribute("filterCondition__EventGroupSubscriber")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("EventGroupSubscriber__FilterCondition")]
        public virtual IPCMRandomVariable FilterCondition__EventGroupSubscriber
        {
            get
            {
                return this._filterCondition__EventGroupSubscriber;
            }
            set
            {
                if ((this._filterCondition__EventGroupSubscriber != value))
                {
                    IPCMRandomVariable old = this._filterCondition__EventGroupSubscriber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFilterCondition__EventGroupSubscriberChanging(e);
                    this.OnPropertyChanging("FilterCondition__EventGroupSubscriber", e);
                    this._filterCondition__EventGroupSubscriber = value;
                    if ((old != null))
                    {
                        old.EventGroupSubscriber__FilterCondition = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetFilterCondition__EventGroupSubscriber;
                    }
                    if ((value != null))
                    {
                        value.EventGroupSubscriber__FilterCondition = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetFilterCondition__EventGroupSubscriber;
                    }
                    this.OnFilterCondition__EventGroupSubscriberChanged(e);
                    this.OnPropertyChanged("FilterCondition__EventGroupSubscriber", e);
                }
            }
        }
        
        IInterface IRequiredInterface.Interface
        {
            get
            {
                IEventGroupSubscriber _this = this;
                if ((_this.EventGroup != null))
                {
                    return _this.EventGroup;
                }
                return null;
            }
            set
            {
                IEventGroupSubscriber _this = this;
                if ((value != null))
                {
                    IEventGroup @__EventGroup = value.As<IEventGroup>();
                    if ((@__EventGroup != null))
                    {
                        _this.EventGroup = @__EventGroup;
                        return;
                    }
                }
                else
                {
                    _this.EventGroup = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        IReferenceType IReference.ReferenceType
        {
            get
            {
                IRequiredInterface _this = this;
                if ((_this.Interface != null))
                {
                    return _this.Interface;
                }
                return null;
            }
            set
            {
                IRequiredInterface _this = this;
                if ((value != null))
                {
                    IInterface @__Interface = value.As<IInterface>();
                    if ((@__Interface != null))
                    {
                        _this.Interface = @__Interface;
                        return;
                    }
                }
                else
                {
                    _this.Interface = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        int ITypedElement.LowerBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        int ITypedElement.UpperBound
        {
            get
            {
                return 1;
            }
            set
            {
                if ((value != 1))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool IReference.IsContainment
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsOrdered
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        bool ITypedElement.IsUnique
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public virtual string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanging(e);
                    this.OnPropertyChanging("EntityName", e);
                    this._entityName = value;
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e);
                }
            }
        }
        
        /// <summary>
        /// The DeclaringType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("References")]
        public virtual IReferenceType DeclaringType
        {
            get
            {
                return ModelHelper.CastAs<IReferenceType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The Opposite property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Opposite")]
        public virtual IReference Opposite
        {
            get
            {
                return this._opposite;
            }
            set
            {
                if ((this._opposite != value))
                {
                    IReference old = this._opposite;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOppositeChanging(e);
                    this.OnPropertyChanging("Opposite", e);
                    this._opposite = value;
                    if ((old != null))
                    {
                        old.Opposite = null;
                        old.Deleted -= this.OnResetOpposite;
                    }
                    if ((value != null))
                    {
                        value.Opposite = this;
                        value.Deleted += this.OnResetOpposite;
                    }
                    this.OnOppositeChanged(e);
                    this.OnPropertyChanged("Opposite", e);
                }
            }
        }
        
        /// <summary>
        /// The reference that is refined by the current reference, only applicable if the reference is part of a class
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IReference Refines
        {
            get
            {
                return this._refines;
            }
            set
            {
                if ((this._refines != value))
                {
                    IReference old = this._refines;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRefinesChanging(e);
                    this.OnPropertyChanging("Refines", e);
                    this._refines = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRefines;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRefines;
                    }
                    this.OnRefinesChanged(e);
                    this.OnPropertyChanged("Refines", e);
                }
            }
        }
        
        /// <summary>
        /// The least common anchestor of an instance and its referenced element, if statically known
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IClass Anchor
        {
            get
            {
                return this._anchor;
            }
            set
            {
                if ((this._anchor != value))
                {
                    IClass old = this._anchor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorChanging(e);
                    this.OnPropertyChanging("Anchor", e);
                    this._anchor = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAnchor;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAnchor;
                    }
                    this.OnAnchorChanged(e);
                    this.OnPropertyChanged("Anchor", e);
                }
            }
        }
        
        IType ITypedElement.Type
        {
            get
            {
                IReference _this = this;
                if ((_this.ReferenceType != null))
                {
                    return _this.ReferenceType;
                }
                return null;
            }
            set
            {
                IReference _this = this;
                if ((value != null))
                {
                    IReferenceType @__ReferenceType = value.As<IReferenceType>();
                    if ((@__ReferenceType != null))
                    {
                        _this.ReferenceType = @__ReferenceType;
                        return;
                    }
                }
                else
                {
                    _this.ReferenceType = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new EventGroupSubscriberChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EventGroupSubscriberReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//EventGroupSubscriber/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EventGroup property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EventGroupChanging;
        
        /// <summary>
        /// Gets fired when the EventGroup property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EventGroupChanged;
        
        /// <summary>
        /// Gets fired before the FilterCondition__EventGroupSubscriber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilterCondition__EventGroupSubscriberChanging;
        
        /// <summary>
        /// Gets fired when the FilterCondition__EventGroupSubscriber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FilterCondition__EventGroupSubscriberChanged;
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the EntityName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanging;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        /// <summary>
        /// Gets fired before the DeclaringType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanging;
        
        /// <summary>
        /// Gets fired when the DeclaringType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeclaringTypeChanged;
        
        /// <summary>
        /// Gets fired before the Opposite property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppositeChanging;
        
        /// <summary>
        /// Gets fired when the Opposite property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OppositeChanged;
        
        /// <summary>
        /// Gets fired before the Refines property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefinesChanging;
        
        /// <summary>
        /// Gets fired when the Refines property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RefinesChanged;
        
        /// <summary>
        /// Gets fired before the Anchor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorChanging;
        
        /// <summary>
        /// Gets fired when the Anchor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorChanged;
        
        /// <summary>
        /// Raises the EventGroupChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventGroupChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EventGroupChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EventGroupChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventGroupChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EventGroupChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EventGroup property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEventGroup(object sender, System.EventArgs eventArgs)
        {
            this.EventGroup = null;
        }
        
        /// <summary>
        /// Raises the FilterCondition__EventGroupSubscriberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilterCondition__EventGroupSubscriberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilterCondition__EventGroupSubscriberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FilterCondition__EventGroupSubscriberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilterCondition__EventGroupSubscriberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FilterCondition__EventGroupSubscriberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FilterCondition__EventGroupSubscriber property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFilterCondition__EventGroupSubscriber(object sender, System.EventArgs eventArgs)
        {
            this.FilterCondition__EventGroupSubscriber = null;
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeclaringType, newDeclaringType);
            this.OnDeclaringTypeChanging(e);
            this.OnPropertyChanging("DeclaringType");
        }
        
        /// <summary>
        /// Raises the DeclaringTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclaringTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeclaringTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IReferenceType oldDeclaringType = ModelHelper.CastAs<IReferenceType>(oldParent);
            IReferenceType newDeclaringType = ModelHelper.CastAs<IReferenceType>(newParent);
            if ((oldDeclaringType != null))
            {
                oldDeclaringType.References.Remove(this);
            }
            if ((newDeclaringType != null))
            {
                newDeclaringType.References.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldDeclaringType, newDeclaringType);
            this.OnDeclaringTypeChanged(e);
            this.OnPropertyChanged("DeclaringType", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Raises the OppositeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppositeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OppositeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOppositeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OppositeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Opposite property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpposite(object sender, System.EventArgs eventArgs)
        {
            this.Opposite = null;
        }
        
        /// <summary>
        /// Raises the RefinesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefinesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RefinesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRefinesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RefinesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Refines property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRefines(object sender, System.EventArgs eventArgs)
        {
            this.Refines = null;
        }
        
        /// <summary>
        /// Raises the AnchorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Anchor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAnchor(object sender, System.EventArgs eventArgs)
        {
            this.Anchor = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.FilterCondition__EventGroupSubscriber))
            {
                return ModelHelper.CreatePath("FilterCondition__EventGroupSubscriber");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FILTERCONDITION__EVENTGROUPSUBSCRIBER"))
            {
                return this.FilterCondition__EventGroupSubscriber;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EVENTGROUP"))
            {
                this.EventGroup = ((IEventGroup)(value));
                return;
            }
            if ((feature == "FILTERCONDITION__EVENTGROUPSUBSCRIBER"))
            {
                this.FilterCondition__EventGroupSubscriber = ((IPCMRandomVariable)(value));
                return;
            }
            if ((feature == "DECLARINGTYPE"))
            {
                this.DeclaringType = ((IReferenceType)(value));
                return;
            }
            if ((feature == "OPPOSITE"))
            {
                this.Opposite = ((IReference)(value));
                return;
            }
            if ((feature == "REFINES"))
            {
                this.Refines = ((IReference)(value));
                return;
            }
            if ((feature == "ANCHOR"))
            {
                this.Anchor = ((IClass)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EVENTGROUP"))
            {
                return new EventGroupProxy(this);
            }
            if ((attribute == "FILTERCONDITION__EVENTGROUPSUBSCRIBER"))
            {
                return new FilterCondition__EventGroupSubscriberProxy(this);
            }
            if ((attribute == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((attribute == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            if ((attribute == "REFINES"))
            {
                return new RefinesProxy(this);
            }
            if ((attribute == "ANCHOR"))
            {
                return new AnchorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EVENTGROUP"))
            {
                return new EventGroupProxy(this);
            }
            if ((reference == "FILTERCONDITION__EVENTGROUPSUBSCRIBER"))
            {
                return new FilterCondition__EventGroupSubscriberProxy(this);
            }
            if ((reference == "DECLARINGTYPE"))
            {
                return new DeclaringTypeProxy(this);
            }
            if ((reference == "OPPOSITE"))
            {
                return new OppositeProxy(this);
            }
            if ((reference == "REFINES"))
            {
                return new RefinesProxy(this);
            }
            if ((reference == "ANCHOR"))
            {
                return new AnchorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//EventGroupSubscriber/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventGroupSubscriber class
        /// </summary>
        public class EventGroupSubscriberChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventGroupSubscriber _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventGroupSubscriberChildrenCollection(EventGroupSubscriber parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FilterCondition__EventGroupSubscriber != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FilterCondition__EventGroupSubscriberChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FilterCondition__EventGroupSubscriberChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FilterCondition__EventGroupSubscriber == null))
                {
                    IPCMRandomVariable filterCondition__EventGroupSubscriberCasted = item.As<IPCMRandomVariable>();
                    if ((filterCondition__EventGroupSubscriberCasted != null))
                    {
                        this._parent.FilterCondition__EventGroupSubscriber = filterCondition__EventGroupSubscriberCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FilterCondition__EventGroupSubscriber = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FilterCondition__EventGroupSubscriber))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FilterCondition__EventGroupSubscriber != null))
                {
                    array[arrayIndex] = this._parent.FilterCondition__EventGroupSubscriber;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FilterCondition__EventGroupSubscriber == item))
                {
                    this._parent.FilterCondition__EventGroupSubscriber = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FilterCondition__EventGroupSubscriber).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventGroupSubscriber class
        /// </summary>
        public class EventGroupSubscriberReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventGroupSubscriber _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventGroupSubscriberReferencedElementsCollection(EventGroupSubscriber parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EventGroup != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FilterCondition__EventGroupSubscriber != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DeclaringType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Opposite != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Refines != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Anchor != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EventGroupChanged += this.PropagateValueChanges;
                this._parent.FilterCondition__EventGroupSubscriberChanged += this.PropagateValueChanges;
                this._parent.DeclaringTypeChanged += this.PropagateValueChanges;
                this._parent.OppositeChanged += this.PropagateValueChanges;
                this._parent.RefinesChanged += this.PropagateValueChanges;
                this._parent.AnchorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EventGroupChanged -= this.PropagateValueChanges;
                this._parent.FilterCondition__EventGroupSubscriberChanged -= this.PropagateValueChanges;
                this._parent.DeclaringTypeChanged -= this.PropagateValueChanges;
                this._parent.OppositeChanged -= this.PropagateValueChanges;
                this._parent.RefinesChanged -= this.PropagateValueChanges;
                this._parent.AnchorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EventGroup == null))
                {
                    IEventGroup eventGroupCasted = item.As<IEventGroup>();
                    if ((eventGroupCasted != null))
                    {
                        this._parent.EventGroup = eventGroupCasted;
                        return;
                    }
                }
                if ((this._parent.FilterCondition__EventGroupSubscriber == null))
                {
                    IPCMRandomVariable filterCondition__EventGroupSubscriberCasted = item.As<IPCMRandomVariable>();
                    if ((filterCondition__EventGroupSubscriberCasted != null))
                    {
                        this._parent.FilterCondition__EventGroupSubscriber = filterCondition__EventGroupSubscriberCasted;
                        return;
                    }
                }
                if ((this._parent.DeclaringType == null))
                {
                    IReferenceType declaringTypeCasted = item.As<IReferenceType>();
                    if ((declaringTypeCasted != null))
                    {
                        this._parent.DeclaringType = declaringTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Opposite == null))
                {
                    IReference oppositeCasted = item.As<IReference>();
                    if ((oppositeCasted != null))
                    {
                        this._parent.Opposite = oppositeCasted;
                        return;
                    }
                }
                if ((this._parent.Refines == null))
                {
                    IReference refinesCasted = item.As<IReference>();
                    if ((refinesCasted != null))
                    {
                        this._parent.Refines = refinesCasted;
                        return;
                    }
                }
                if ((this._parent.Anchor == null))
                {
                    IClass anchorCasted = item.As<IClass>();
                    if ((anchorCasted != null))
                    {
                        this._parent.Anchor = anchorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EventGroup = null;
                this._parent.FilterCondition__EventGroupSubscriber = null;
                this._parent.DeclaringType = null;
                this._parent.Opposite = null;
                this._parent.Refines = null;
                this._parent.Anchor = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EventGroup))
                {
                    return true;
                }
                if ((item == this._parent.FilterCondition__EventGroupSubscriber))
                {
                    return true;
                }
                if ((item == this._parent.DeclaringType))
                {
                    return true;
                }
                if ((item == this._parent.Opposite))
                {
                    return true;
                }
                if ((item == this._parent.Refines))
                {
                    return true;
                }
                if ((item == this._parent.Anchor))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EventGroup != null))
                {
                    array[arrayIndex] = this._parent.EventGroup;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FilterCondition__EventGroupSubscriber != null))
                {
                    array[arrayIndex] = this._parent.FilterCondition__EventGroupSubscriber;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DeclaringType != null))
                {
                    array[arrayIndex] = this._parent.DeclaringType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Opposite != null))
                {
                    array[arrayIndex] = this._parent.Opposite;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Refines != null))
                {
                    array[arrayIndex] = this._parent.Refines;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Anchor != null))
                {
                    array[arrayIndex] = this._parent.Anchor;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EventGroup == item))
                {
                    this._parent.EventGroup = null;
                    return true;
                }
                if ((this._parent.FilterCondition__EventGroupSubscriber == item))
                {
                    this._parent.FilterCondition__EventGroupSubscriber = null;
                    return true;
                }
                if ((this._parent.DeclaringType == item))
                {
                    this._parent.DeclaringType = null;
                    return true;
                }
                if ((this._parent.Opposite == item))
                {
                    this._parent.Opposite = null;
                    return true;
                }
                if ((this._parent.Refines == item))
                {
                    this._parent.Refines = null;
                    return true;
                }
                if ((this._parent.Anchor == item))
                {
                    this._parent.Anchor = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EventGroup).Concat(this._parent.FilterCondition__EventGroupSubscriber).Concat(this._parent.DeclaringType).Concat(this._parent.Opposite).Concat(this._parent.Refines).Concat(this._parent.Anchor).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EventGroup property
        /// </summary>
        private sealed class EventGroupProxy : ModelPropertyChange<IEventGroupSubscriber, IEventGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EventGroupProxy(IEventGroupSubscriber modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEventGroup Value
            {
                get
                {
                    return this.ModelElement.EventGroup;
                }
                set
                {
                    this.ModelElement.EventGroup = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EventGroupChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EventGroupChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the filterCondition__EventGroupSubscriber property
        /// </summary>
        private sealed class FilterCondition__EventGroupSubscriberProxy : ModelPropertyChange<IEventGroupSubscriber, IPCMRandomVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FilterCondition__EventGroupSubscriberProxy(IEventGroupSubscriber modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPCMRandomVariable Value
            {
                get
                {
                    return this.ModelElement.FilterCondition__EventGroupSubscriber;
                }
                set
                {
                    this.ModelElement.FilterCondition__EventGroupSubscriber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilterCondition__EventGroupSubscriberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilterCondition__EventGroupSubscriberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Interface property
        /// </summary>
        private sealed class InterfaceProxy : ModelPropertyChange<IRequiredInterface, IInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InterfaceProxy(IRequiredInterface modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInterface Value
            {
                get
                {
                    return this.ModelElement.Interface;
                }
                set
                {
                    this.ModelElement.Interface = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InterfaceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InterfaceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsContainment property
        /// </summary>
        private sealed class IsContainmentProxy : ModelPropertyChange<IReference, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsContainmentProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsContainment;
                }
                set
                {
                    this.ModelElement.IsContainment = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsContainmentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsContainmentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeclaringType property
        /// </summary>
        private sealed class DeclaringTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeclaringTypeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.DeclaringType;
                }
                set
                {
                    this.ModelElement.DeclaringType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeclaringTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DeclaringTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Opposite property
        /// </summary>
        private sealed class OppositeProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OppositeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Opposite;
                }
                set
                {
                    this.ModelElement.Opposite = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OppositeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReferenceType property
        /// </summary>
        private sealed class ReferenceTypeProxy : ModelPropertyChange<IReference, IReferenceType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceTypeProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReferenceType Value
            {
                get
                {
                    return this.ModelElement.ReferenceType;
                }
                set
                {
                    this.ModelElement.ReferenceType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferenceTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReferenceTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Refines property
        /// </summary>
        private sealed class RefinesProxy : ModelPropertyChange<IReference, IReference>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RefinesProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReference Value
            {
                get
                {
                    return this.ModelElement.Refines;
                }
                set
                {
                    this.ModelElement.Refines = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefinesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RefinesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Anchor property
        /// </summary>
        private sealed class AnchorProxy : ModelPropertyChange<IReference, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorProxy(IReference modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.Anchor;
                }
                set
                {
                    this.ModelElement.Anchor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AnchorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsOrdered property
        /// </summary>
        private sealed class IsOrderedProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsOrderedProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsOrdered;
                }
                set
                {
                    this.ModelElement.IsOrdered = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsOrderedChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsUnique property
        /// </summary>
        private sealed class IsUniqueProxy : ModelPropertyChange<ITypedElement, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsUniqueProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsUnique;
                }
                set
                {
                    this.ModelElement.IsUnique = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsUniqueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LowerBound property
        /// </summary>
        private sealed class LowerBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerBoundProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowerBound;
                }
                set
                {
                    this.ModelElement.LowerBound = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerBoundChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerBoundChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the UpperBound property
        /// </summary>
        private sealed class UpperBoundProxy : ModelPropertyChange<ITypedElement, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperBoundProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.UpperBound;
                }
                set
                {
                    this.ModelElement.UpperBound = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperBoundChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UpperBoundChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<ITypedElement, IType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(ITypedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IType Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
    }
}

