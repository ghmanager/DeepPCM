//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core;
using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Protocol;
using Metamodel.DeepPCM.Reliability;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.Seff;
using Metamodel.DeepPCM.System0;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Repository
{
    
    
    /// <summary>
    /// The default implementation of the InnerDeclaration class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Repository/1.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//repository//InnerDeclaration/")]
    public class InnerDeclaration : NamedElement, IInnerDeclaration, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Datatype_InnerDeclaration property
        /// </summary>
        private IDataType _datatype_InnerDeclaration;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The datatype_InnerDeclaration property
        /// </summary>
        [XmlElementNameAttribute("datatype_InnerDeclaration")]
        [XmlAttributeAttribute(true)]
        public virtual IDataType Datatype_InnerDeclaration
        {
            get
            {
                return this._datatype_InnerDeclaration;
            }
            set
            {
                if ((this._datatype_InnerDeclaration != value))
                {
                    IDataType old = this._datatype_InnerDeclaration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDatatype_InnerDeclarationChanging(e);
                    this.OnPropertyChanging("Datatype_InnerDeclaration", e);
                    this._datatype_InnerDeclaration = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDatatype_InnerDeclaration;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDatatype_InnerDeclaration;
                    }
                    this.OnDatatype_InnerDeclarationChanged(e);
                    this.OnPropertyChanged("Datatype_InnerDeclaration", e);
                }
            }
        }
        
        /// <summary>
        /// The compositeDataType_InnerDeclaration property
        /// </summary>
        [XmlElementNameAttribute("compositeDataType_InnerDeclaration")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("innerDeclaration_CompositeDataType")]
        public virtual ICompositeDataType CompositeDataType_InnerDeclaration
        {
            get
            {
                return ModelHelper.CastAs<ICompositeDataType>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InnerDeclarationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//InnerDeclaration/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Datatype_InnerDeclaration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Datatype_InnerDeclarationChanging;
        
        /// <summary>
        /// Gets fired when the Datatype_InnerDeclaration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Datatype_InnerDeclarationChanged;
        
        /// <summary>
        /// Gets fired before the CompositeDataType_InnerDeclaration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CompositeDataType_InnerDeclarationChanging;
        
        /// <summary>
        /// Gets fired when the CompositeDataType_InnerDeclaration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CompositeDataType_InnerDeclarationChanged;
        
        /// <summary>
        /// Raises the Datatype_InnerDeclarationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDatatype_InnerDeclarationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Datatype_InnerDeclarationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Datatype_InnerDeclarationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDatatype_InnerDeclarationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Datatype_InnerDeclarationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Datatype_InnerDeclaration property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDatatype_InnerDeclaration(object sender, System.EventArgs eventArgs)
        {
            this.Datatype_InnerDeclaration = null;
        }
        
        /// <summary>
        /// Raises the CompositeDataType_InnerDeclarationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompositeDataType_InnerDeclarationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CompositeDataType_InnerDeclarationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ICompositeDataType oldCompositeDataType_InnerDeclaration = ModelHelper.CastAs<ICompositeDataType>(oldParent);
            ICompositeDataType newCompositeDataType_InnerDeclaration = ModelHelper.CastAs<ICompositeDataType>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldCompositeDataType_InnerDeclaration, newCompositeDataType_InnerDeclaration);
            this.OnCompositeDataType_InnerDeclarationChanging(e);
            this.OnPropertyChanging("CompositeDataType_InnerDeclaration");
        }
        
        /// <summary>
        /// Raises the CompositeDataType_InnerDeclarationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompositeDataType_InnerDeclarationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CompositeDataType_InnerDeclarationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ICompositeDataType oldCompositeDataType_InnerDeclaration = ModelHelper.CastAs<ICompositeDataType>(oldParent);
            ICompositeDataType newCompositeDataType_InnerDeclaration = ModelHelper.CastAs<ICompositeDataType>(newParent);
            if ((oldCompositeDataType_InnerDeclaration != null))
            {
                oldCompositeDataType_InnerDeclaration.InnerDeclaration_CompositeDataType.Remove(this);
            }
            if ((newCompositeDataType_InnerDeclaration != null))
            {
                newCompositeDataType_InnerDeclaration.InnerDeclaration_CompositeDataType.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldCompositeDataType_InnerDeclaration, newCompositeDataType_InnerDeclaration);
            this.OnCompositeDataType_InnerDeclarationChanged(e);
            this.OnPropertyChanged("CompositeDataType_InnerDeclaration", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DATATYPE_INNERDECLARATION"))
            {
                this.Datatype_InnerDeclaration = ((IDataType)(value));
                return;
            }
            if ((feature == "COMPOSITEDATATYPE_INNERDECLARATION"))
            {
                this.CompositeDataType_InnerDeclaration = ((ICompositeDataType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DATATYPE_INNERDECLARATION"))
            {
                return new Datatype_InnerDeclarationProxy(this);
            }
            if ((attribute == "COMPOSITEDATATYPE_INNERDECLARATION"))
            {
                return new CompositeDataType_InnerDeclarationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DATATYPE_INNERDECLARATION"))
            {
                return new Datatype_InnerDeclarationProxy(this);
            }
            if ((reference == "COMPOSITEDATATYPE_INNERDECLARATION"))
            {
                return new CompositeDataType_InnerDeclarationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//InnerDeclaration/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InnerDeclaration class
        /// </summary>
        public class InnerDeclarationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InnerDeclaration _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InnerDeclarationReferencedElementsCollection(InnerDeclaration parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Datatype_InnerDeclaration != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CompositeDataType_InnerDeclaration != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Datatype_InnerDeclarationChanged += this.PropagateValueChanges;
                this._parent.CompositeDataType_InnerDeclarationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Datatype_InnerDeclarationChanged -= this.PropagateValueChanges;
                this._parent.CompositeDataType_InnerDeclarationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Datatype_InnerDeclaration == null))
                {
                    IDataType datatype_InnerDeclarationCasted = item.As<IDataType>();
                    if ((datatype_InnerDeclarationCasted != null))
                    {
                        this._parent.Datatype_InnerDeclaration = datatype_InnerDeclarationCasted;
                        return;
                    }
                }
                if ((this._parent.CompositeDataType_InnerDeclaration == null))
                {
                    ICompositeDataType compositeDataType_InnerDeclarationCasted = item.As<ICompositeDataType>();
                    if ((compositeDataType_InnerDeclarationCasted != null))
                    {
                        this._parent.CompositeDataType_InnerDeclaration = compositeDataType_InnerDeclarationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Datatype_InnerDeclaration = null;
                this._parent.CompositeDataType_InnerDeclaration = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Datatype_InnerDeclaration))
                {
                    return true;
                }
                if ((item == this._parent.CompositeDataType_InnerDeclaration))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Datatype_InnerDeclaration != null))
                {
                    array[arrayIndex] = this._parent.Datatype_InnerDeclaration;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CompositeDataType_InnerDeclaration != null))
                {
                    array[arrayIndex] = this._parent.CompositeDataType_InnerDeclaration;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Datatype_InnerDeclaration == item))
                {
                    this._parent.Datatype_InnerDeclaration = null;
                    return true;
                }
                if ((this._parent.CompositeDataType_InnerDeclaration == item))
                {
                    this._parent.CompositeDataType_InnerDeclaration = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Datatype_InnerDeclaration).Concat(this._parent.CompositeDataType_InnerDeclaration).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the datatype_InnerDeclaration property
        /// </summary>
        private sealed class Datatype_InnerDeclarationProxy : ModelPropertyChange<IInnerDeclaration, IDataType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Datatype_InnerDeclarationProxy(IInnerDeclaration modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDataType Value
            {
                get
                {
                    return this.ModelElement.Datatype_InnerDeclaration;
                }
                set
                {
                    this.ModelElement.Datatype_InnerDeclaration = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Datatype_InnerDeclarationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Datatype_InnerDeclarationChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the compositeDataType_InnerDeclaration property
        /// </summary>
        private sealed class CompositeDataType_InnerDeclarationProxy : ModelPropertyChange<IInnerDeclaration, ICompositeDataType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CompositeDataType_InnerDeclarationProxy(IInnerDeclaration modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICompositeDataType Value
            {
                get
                {
                    return this.ModelElement.CompositeDataType_InnerDeclaration;
                }
                set
                {
                    this.ModelElement.CompositeDataType_InnerDeclaration = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CompositeDataType_InnerDeclarationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CompositeDataType_InnerDeclarationChanged -= handler;
            }
        }
    }
}

