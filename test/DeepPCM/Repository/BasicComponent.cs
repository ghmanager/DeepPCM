//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core;
using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Protocol;
using Metamodel.DeepPCM.Reliability;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.Seff;
using Metamodel.DeepPCM.System0;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Repository
{
    
    
    /// <summary>
    /// The default implementation of the BasicComponent class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Repository/1.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//repository//BasicComponent/")]
    [DebuggerDisplayAttribute("BasicComponent {Name}")]
    public class BasicComponent : MetaElement, IBasicComponent, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ServiceEffectSpecifications__BasicComponent property
        /// </summary>
        private BasicComponentServiceEffectSpecifications__BasicComponentCollection _serviceEffectSpecifications__BasicComponent;
        
        /// <summary>
        /// The backing field for the PassiveResource_BasicComponent property
        /// </summary>
        private BasicComponentPassiveResource_BasicComponentCollection _passiveResource_BasicComponent;
        
        /// <summary>
        /// The backing field for the ComponentType property
        /// </summary>
        private ComponentType _componentType = ComponentType.BUSINESS_COMPONENT;
        
        /// <summary>
        /// The backing field for the ParentCompleteComponentTypes property
        /// </summary>
        private ObservableAssociationList<ICompleteComponentType> _parentCompleteComponentTypes;
        
        /// <summary>
        /// The backing field for the ComponentParameterUsage_ImplementationComponentType property
        /// </summary>
        private ObservableCompositionList<IVariableUsage> _componentParameterUsage_ImplementationComponentType;
        
        /// <summary>
        /// The backing field for the ProvidedInterfaces property
        /// </summary>
        private ObservableCompositionList<IInterface> _providedInterfaces;
        
        /// <summary>
        /// The backing field for the RequiredInterfaces property
        /// </summary>
        private ObservableCompositionList<IRequiredInterface> _requiredInterfaces;
        
        /// <summary>
        /// The backing field for the ResourceRequiredInterfaces property
        /// </summary>
        private IResourceRequiredInterface _resourceRequiredInterfaces;
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private IdentifierScope _identifierScope;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        private static IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IType.NamespaceChanged
        {
            add
            {
                IRepositoryComponent _this_RepositoryComponent = this;
                _this_RepositoryComponent.Repository__RepositoryComponentChanged += value;
            }
            remove
            {
                IRepositoryComponent _this_RepositoryComponent = this;
                _this_RepositoryComponent.Repository__RepositoryComponentChanged -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IType.NamespaceChanging
        {
            add
            {
                IRepositoryComponent _this_RepositoryComponent = this;
                _this_RepositoryComponent.Repository__RepositoryComponentChanging += value;
            }
            remove
            {
                IRepositoryComponent _this_RepositoryComponent = this;
                _this_RepositoryComponent.Repository__RepositoryComponentChanging -= value;
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        public BasicComponent()
        {
            this._serviceEffectSpecifications__BasicComponent = new BasicComponentServiceEffectSpecifications__BasicComponentCollection(this);
            this._serviceEffectSpecifications__BasicComponent.CollectionChanging += this.ServiceEffectSpecifications__BasicComponentCollectionChanging;
            this._serviceEffectSpecifications__BasicComponent.CollectionChanged += this.ServiceEffectSpecifications__BasicComponentCollectionChanged;
            this._passiveResource_BasicComponent = new BasicComponentPassiveResource_BasicComponentCollection(this);
            this._passiveResource_BasicComponent.CollectionChanging += this.PassiveResource_BasicComponentCollectionChanging;
            this._passiveResource_BasicComponent.CollectionChanged += this.PassiveResource_BasicComponentCollectionChanged;
            this._parentCompleteComponentTypes = new ObservableAssociationList<ICompleteComponentType>();
            this._parentCompleteComponentTypes.CollectionChanging += this.ParentCompleteComponentTypesCollectionChanging;
            this._parentCompleteComponentTypes.CollectionChanged += this.ParentCompleteComponentTypesCollectionChanged;
            this._componentParameterUsage_ImplementationComponentType = new ObservableCompositionList<IVariableUsage>(this);
            this._componentParameterUsage_ImplementationComponentType.CollectionChanging += this.ComponentParameterUsage_ImplementationComponentTypeCollectionChanging;
            this._componentParameterUsage_ImplementationComponentType.CollectionChanged += this.ComponentParameterUsage_ImplementationComponentTypeCollectionChanged;
            this._providedInterfaces = new ObservableCompositionList<IInterface>(this);
            this._providedInterfaces.CollectionChanging += this.ProvidedInterfacesCollectionChanging;
            this._providedInterfaces.CollectionChanged += this.ProvidedInterfacesCollectionChanged;
            this._requiredInterfaces = new ObservableCompositionList<IRequiredInterface>(this);
            this._requiredInterfaces.CollectionChanging += this.RequiredInterfacesCollectionChanging;
            this._requiredInterfaces.CollectionChanged += this.RequiredInterfacesCollectionChanged;
        }
        
        /// <summary>
        /// The serviceEffectSpecifications__BasicComponent property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("serviceEffectSpecifications__BasicComponent")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("basicComponent_ServiceEffectSpecification")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IServiceEffectSpecification> ServiceEffectSpecifications__BasicComponent
        {
            get
            {
                return this._serviceEffectSpecifications__BasicComponent;
            }
        }
        
        /// <summary>
        /// The passiveResource_BasicComponent property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("passiveResource_BasicComponent")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("basicComponent_PassiveResource")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IPassiveResource> PassiveResource_BasicComponent
        {
            get
            {
                return this._passiveResource_BasicComponent;
            }
        }
        
        /// <summary>
        /// The componentType property
        /// </summary>
        [DefaultValueAttribute(ComponentType.BUSINESS_COMPONENT)]
        [XmlElementNameAttribute("componentType")]
        [XmlAttributeAttribute(true)]
        public virtual ComponentType ComponentType
        {
            get
            {
                return this._componentType;
            }
            set
            {
                if ((this._componentType != value))
                {
                    ComponentType old = this._componentType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnComponentTypeChanging(e);
                    this.OnPropertyChanging("ComponentType", e);
                    this._componentType = value;
                    this.OnComponentTypeChanged(e);
                    this.OnPropertyChanged("ComponentType", e);
                }
            }
        }
        
        /// <summary>
        /// The parentCompleteComponentTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("parentCompleteComponentTypes")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ICollectionExpression<ICompleteComponentType> ParentCompleteComponentTypes
        {
            get
            {
                return this._parentCompleteComponentTypes;
            }
        }
        
        /// <summary>
        /// The componentParameterUsage_ImplementationComponentType property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("componentParameterUsage_ImplementationComponentType")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IVariableUsage> ComponentParameterUsage_ImplementationComponentType
        {
            get
            {
                return this._componentParameterUsage_ImplementationComponentType;
            }
        }
        
        /// <summary>
        /// The repository__RepositoryComponent property
        /// </summary>
        [XmlElementNameAttribute("repository__RepositoryComponent")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("components__Repository")]
        public virtual IRepository Repository__RepositoryComponent
        {
            get
            {
                return ModelHelper.CastAs<IRepository>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        INamespace IType.Namespace
        {
            get
            {
                IRepositoryComponent _this = this;
                if ((_this.Repository__RepositoryComponent != null))
                {
                    return _this.Repository__RepositoryComponent;
                }
                return null;
            }
            set
            {
                IRepositoryComponent _this = this;
                if ((value != null))
                {
                    IRepository @__repository__RepositoryComponent = value.As<IRepository>();
                    if ((@__repository__RepositoryComponent != null))
                    {
                        _this.Repository__RepositoryComponent = @__repository__RepositoryComponent;
                        return;
                    }
                }
                else
                {
                    _this.Repository__RepositoryComponent = null;
                    return;
                }
                throw new System.ArgumentException("There was no suitable refining reference found for this object");
            }
        }
        
        ICollectionExpression<IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IAttribute> IStructuredType.Attributes
        {
            get
            {
                return EmptyList<IAttribute>.Instance;
            }
        }
        
        ICollectionExpression<IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<IAttributeConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IEvent> IReferenceType.Events
        {
            get
            {
                return EmptyList<IEvent>.Instance;
            }
        }
        
        IAttribute IClass.Identifier
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IOperation> IStructuredType.Operations
        {
            get
            {
                return EmptyList<IOperation>.Instance;
            }
        }
        
        IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IClass> IClass.BaseTypes
        {
            get
            {
                return new RepositoryComponentBaseTypesCollection(this);
            }
        }
        
        bool IClass.IsAbstract
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// The ProvidedInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IInterface> ProvidedInterfaces
        {
            get
            {
                return this._providedInterfaces;
            }
        }
        
        /// <summary>
        /// The RequiredInterfaces property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IRequiredInterface> RequiredInterfaces
        {
            get
            {
                return this._requiredInterfaces;
            }
        }
        
        ICollectionExpression<IReference> IReferenceType.References
        {
            get
            {
                return new InterfaceRequiringEntityReferencesCollection(this);
            }
        }
        
        /// <summary>
        /// The resourceRequiredInterfaces property
        /// </summary>
        [XmlElementNameAttribute("resourceRequiredInterfaces")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("resourceInterfaceRequiringEntity")]
        public virtual IResourceRequiredInterface ResourceRequiredInterfaces
        {
            get
            {
                return this._resourceRequiredInterfaces;
            }
            set
            {
                if ((this._resourceRequiredInterfaces != value))
                {
                    IResourceRequiredInterface old = this._resourceRequiredInterfaces;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceRequiredInterfacesChanging(e);
                    this.OnPropertyChanging("ResourceRequiredInterfaces", e);
                    this._resourceRequiredInterfaces = value;
                    if ((old != null))
                    {
                        old.ResourceInterfaceRequiringEntity = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetResourceRequiredInterfaces;
                    }
                    if ((value != null))
                    {
                        value.ResourceInterfaceRequiringEntity = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetResourceRequiredInterfaces;
                    }
                    this.OnResourceRequiredInterfacesChanged(e);
                    this.OnPropertyChanged("ResourceRequiredInterfaces", e);
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [XmlAttributeAttribute(true)]
        public virtual IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e);
                }
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public virtual string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanging(e);
                    this.OnPropertyChanging("EntityName", e);
                    this._entityName = value;
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new BasicComponentChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BasicComponentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//BasicComponent/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ComponentType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ComponentTypeChanging;
        
        /// <summary>
        /// Gets fired when the ComponentType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ComponentTypeChanged;
        
        /// <summary>
        /// Gets fired before the Repository__RepositoryComponent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Repository__RepositoryComponentChanging;
        
        /// <summary>
        /// Gets fired when the Repository__RepositoryComponent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Repository__RepositoryComponentChanged;
        
        /// <summary>
        /// Gets fired before the ResourceRequiredInterfaces property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceRequiredInterfacesChanging;
        
        /// <summary>
        /// Gets fired when the ResourceRequiredInterfaces property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceRequiredInterfacesChanged;
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the EntityName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanging;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceEffectSpecifications__BasicComponent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceEffectSpecifications__BasicComponentCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ServiceEffectSpecifications__BasicComponent", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceEffectSpecifications__BasicComponent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceEffectSpecifications__BasicComponentCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceEffectSpecifications__BasicComponent", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PassiveResource_BasicComponent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PassiveResource_BasicComponentCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PassiveResource_BasicComponent", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PassiveResource_BasicComponent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PassiveResource_BasicComponentCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PassiveResource_BasicComponent", e);
        }
        
        /// <summary>
        /// Raises the ComponentTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnComponentTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ComponentTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ComponentTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnComponentTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ComponentTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ParentCompleteComponentTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParentCompleteComponentTypesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ParentCompleteComponentTypes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ParentCompleteComponentTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ParentCompleteComponentTypesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ParentCompleteComponentTypes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ComponentParameterUsage_ImplementationComponentType property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ComponentParameterUsage_ImplementationComponentTypeCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ComponentParameterUsage_ImplementationComponentType", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ComponentParameterUsage_ImplementationComponentType property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ComponentParameterUsage_ImplementationComponentTypeCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ComponentParameterUsage_ImplementationComponentType", e);
        }
        
        /// <summary>
        /// Raises the Repository__RepositoryComponentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepository__RepositoryComponentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Repository__RepositoryComponentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IRepository oldRepository__RepositoryComponent = ModelHelper.CastAs<IRepository>(oldParent);
            IRepository newRepository__RepositoryComponent = ModelHelper.CastAs<IRepository>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRepository__RepositoryComponent, newRepository__RepositoryComponent);
            this.OnRepository__RepositoryComponentChanging(e);
            this.OnPropertyChanging("Repository__RepositoryComponent");
        }
        
        /// <summary>
        /// Raises the Repository__RepositoryComponentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepository__RepositoryComponentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Repository__RepositoryComponentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IRepository oldRepository__RepositoryComponent = ModelHelper.CastAs<IRepository>(oldParent);
            IRepository newRepository__RepositoryComponent = ModelHelper.CastAs<IRepository>(newParent);
            if ((oldRepository__RepositoryComponent != null))
            {
                oldRepository__RepositoryComponent.Components__Repository.Remove(this);
            }
            if ((newRepository__RepositoryComponent != null))
            {
                newRepository__RepositoryComponent.Components__Repository.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldRepository__RepositoryComponent, newRepository__RepositoryComponent);
            this.OnRepository__RepositoryComponentChanged(e);
            this.OnPropertyChanged("Repository__RepositoryComponent", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ProvidedInterfaces", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProvidedInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProvidedInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProvidedInterfaces", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RequiredInterfaces", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RequiredInterfaces property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequiredInterfacesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RequiredInterfaces", e);
        }
        
        /// <summary>
        /// Raises the ResourceRequiredInterfacesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRequiredInterfacesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRequiredInterfacesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourceRequiredInterfacesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceRequiredInterfacesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceRequiredInterfacesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResourceRequiredInterfaces property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResourceRequiredInterfaces(object sender, System.EventArgs eventArgs)
        {
            this.ResourceRequiredInterfaces = null;
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ResourceRequiredInterfaces))
            {
                return ModelHelper.CreatePath("ResourceRequiredInterfaces");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "RESOURCEREQUIREDINTERFACES"))
            {
                return this.ResourceRequiredInterfaces;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COMPONENTTYPE"))
            {
                return this.ComponentType;
            }
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICEEFFECTSPECIFICATIONS__BASICCOMPONENT"))
            {
                return this._serviceEffectSpecifications__BasicComponent;
            }
            if ((feature == "PASSIVERESOURCE_BASICCOMPONENT"))
            {
                return this._passiveResource_BasicComponent;
            }
            if ((feature == "PARENTCOMPLETECOMPONENTTYPES"))
            {
                return this._parentCompleteComponentTypes;
            }
            if ((feature == "COMPONENTPARAMETERUSAGE_IMPLEMENTATIONCOMPONENTTYPE"))
            {
                return this._componentParameterUsage_ImplementationComponentType;
            }
            if ((feature == "PROVIDEDINTERFACES"))
            {
                return this._providedInterfaces;
            }
            if ((feature == "REQUIREDINTERFACES"))
            {
                return this._requiredInterfaces;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REPOSITORY__REPOSITORYCOMPONENT"))
            {
                this.Repository__RepositoryComponent = ((IRepository)(value));
                return;
            }
            if ((feature == "RESOURCEREQUIREDINTERFACES"))
            {
                this.ResourceRequiredInterfaces = ((IResourceRequiredInterface)(value));
                return;
            }
            if ((feature == "COMPONENTTYPE"))
            {
                this.ComponentType = ((ComponentType)(value));
                return;
            }
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((IdentifierScope)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "REPOSITORY__REPOSITORYCOMPONENT"))
            {
                return new Repository__RepositoryComponentProxy(this);
            }
            if ((attribute == "RESOURCEREQUIREDINTERFACES"))
            {
                return new ResourceRequiredInterfacesProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REPOSITORY__REPOSITORYCOMPONENT"))
            {
                return new Repository__RepositoryComponentProxy(this);
            }
            if ((reference == "RESOURCEREQUIREDINTERFACES"))
            {
                return new ResourceRequiredInterfacesProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//BasicComponent/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BasicComponent class
        /// </summary>
        public class BasicComponentChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BasicComponent _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BasicComponentChildrenCollection(BasicComponent parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ServiceEffectSpecifications__BasicComponent.Count);
                    count = (count + this._parent.PassiveResource_BasicComponent.Count);
                    count = (count + this._parent.ComponentParameterUsage_ImplementationComponentType.Count);
                    count = (count + this._parent.ProvidedInterfaces.Count);
                    count = (count + this._parent.RequiredInterfaces.Count);
                    if ((this._parent.ResourceRequiredInterfaces != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceEffectSpecifications__BasicComponent.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PassiveResource_BasicComponent.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ComponentParameterUsage_ImplementationComponentType.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredInterfacesChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceEffectSpecifications__BasicComponent.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PassiveResource_BasicComponent.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ComponentParameterUsage_ImplementationComponentType.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredInterfacesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IServiceEffectSpecification serviceEffectSpecifications__BasicComponentCasted = item.As<IServiceEffectSpecification>();
                if ((serviceEffectSpecifications__BasicComponentCasted != null))
                {
                    this._parent.ServiceEffectSpecifications__BasicComponent.Add(serviceEffectSpecifications__BasicComponentCasted);
                }
                IPassiveResource passiveResource_BasicComponentCasted = item.As<IPassiveResource>();
                if ((passiveResource_BasicComponentCasted != null))
                {
                    this._parent.PassiveResource_BasicComponent.Add(passiveResource_BasicComponentCasted);
                }
                IVariableUsage componentParameterUsage_ImplementationComponentTypeCasted = item.As<IVariableUsage>();
                if ((componentParameterUsage_ImplementationComponentTypeCasted != null))
                {
                    this._parent.ComponentParameterUsage_ImplementationComponentType.Add(componentParameterUsage_ImplementationComponentTypeCasted);
                }
                IInterface providedInterfacesCasted = item.As<IInterface>();
                if ((providedInterfacesCasted != null))
                {
                    this._parent.ProvidedInterfaces.Add(providedInterfacesCasted);
                }
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                if ((this._parent.ResourceRequiredInterfaces == null))
                {
                    IResourceRequiredInterface resourceRequiredInterfacesCasted = item.As<IResourceRequiredInterface>();
                    if ((resourceRequiredInterfacesCasted != null))
                    {
                        this._parent.ResourceRequiredInterfaces = resourceRequiredInterfacesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceEffectSpecifications__BasicComponent.Clear();
                this._parent.PassiveResource_BasicComponent.Clear();
                this._parent.ComponentParameterUsage_ImplementationComponentType.Clear();
                this._parent.ProvidedInterfaces.Clear();
                this._parent.RequiredInterfaces.Clear();
                this._parent.ResourceRequiredInterfaces = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ServiceEffectSpecifications__BasicComponent.Contains(item))
                {
                    return true;
                }
                if (this._parent.PassiveResource_BasicComponent.Contains(item))
                {
                    return true;
                }
                if (this._parent.ComponentParameterUsage_ImplementationComponentType.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProvidedInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ResourceRequiredInterfaces))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> serviceEffectSpecifications__BasicComponentEnumerator = this._parent.ServiceEffectSpecifications__BasicComponent.GetEnumerator();
                try
                {
                    for (
                    ; serviceEffectSpecifications__BasicComponentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceEffectSpecifications__BasicComponentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceEffectSpecifications__BasicComponentEnumerator.Dispose();
                }
                IEnumerator<IModelElement> passiveResource_BasicComponentEnumerator = this._parent.PassiveResource_BasicComponent.GetEnumerator();
                try
                {
                    for (
                    ; passiveResource_BasicComponentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = passiveResource_BasicComponentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    passiveResource_BasicComponentEnumerator.Dispose();
                }
                IEnumerator<IModelElement> componentParameterUsage_ImplementationComponentTypeEnumerator = this._parent.ComponentParameterUsage_ImplementationComponentType.GetEnumerator();
                try
                {
                    for (
                    ; componentParameterUsage_ImplementationComponentTypeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = componentParameterUsage_ImplementationComponentTypeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    componentParameterUsage_ImplementationComponentTypeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> providedInterfacesEnumerator = this._parent.ProvidedInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                if ((this._parent.ResourceRequiredInterfaces != null))
                {
                    array[arrayIndex] = this._parent.ResourceRequiredInterfaces;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IServiceEffectSpecification serviceEffectSpecificationItem = item.As<IServiceEffectSpecification>();
                if (((serviceEffectSpecificationItem != null) 
                            && this._parent.ServiceEffectSpecifications__BasicComponent.Remove(serviceEffectSpecificationItem)))
                {
                    return true;
                }
                IPassiveResource passiveResourceItem = item.As<IPassiveResource>();
                if (((passiveResourceItem != null) 
                            && this._parent.PassiveResource_BasicComponent.Remove(passiveResourceItem)))
                {
                    return true;
                }
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.ComponentParameterUsage_ImplementationComponentType.Remove(variableUsageItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.ProvidedInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                if ((this._parent.ResourceRequiredInterfaces == item))
                {
                    this._parent.ResourceRequiredInterfaces = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceEffectSpecifications__BasicComponent).Concat(this._parent.PassiveResource_BasicComponent).Concat(this._parent.ComponentParameterUsage_ImplementationComponentType).Concat(this._parent.ProvidedInterfaces).Concat(this._parent.RequiredInterfaces).Concat(this._parent.ResourceRequiredInterfaces).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BasicComponent class
        /// </summary>
        public class BasicComponentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BasicComponent _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BasicComponentReferencedElementsCollection(BasicComponent parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ServiceEffectSpecifications__BasicComponent.Count);
                    count = (count + this._parent.PassiveResource_BasicComponent.Count);
                    count = (count + this._parent.ParentCompleteComponentTypes.Count);
                    count = (count + this._parent.ComponentParameterUsage_ImplementationComponentType.Count);
                    if ((this._parent.Repository__RepositoryComponent != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ProvidedInterfaces.Count);
                    count = (count + this._parent.RequiredInterfaces.Count);
                    if ((this._parent.ResourceRequiredInterfaces != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceEffectSpecifications__BasicComponent.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PassiveResource_BasicComponent.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentCompleteComponentTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ComponentParameterUsage_ImplementationComponentType.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Repository__RepositoryComponentChanged += this.PropagateValueChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredInterfacesChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceEffectSpecifications__BasicComponent.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PassiveResource_BasicComponent.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentCompleteComponentTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ComponentParameterUsage_ImplementationComponentType.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Repository__RepositoryComponentChanged -= this.PropagateValueChanges;
                this._parent.ProvidedInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RequiredInterfaces.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredInterfacesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IServiceEffectSpecification serviceEffectSpecifications__BasicComponentCasted = item.As<IServiceEffectSpecification>();
                if ((serviceEffectSpecifications__BasicComponentCasted != null))
                {
                    this._parent.ServiceEffectSpecifications__BasicComponent.Add(serviceEffectSpecifications__BasicComponentCasted);
                }
                IPassiveResource passiveResource_BasicComponentCasted = item.As<IPassiveResource>();
                if ((passiveResource_BasicComponentCasted != null))
                {
                    this._parent.PassiveResource_BasicComponent.Add(passiveResource_BasicComponentCasted);
                }
                ICompleteComponentType parentCompleteComponentTypesCasted = item.As<ICompleteComponentType>();
                if ((parentCompleteComponentTypesCasted != null))
                {
                    this._parent.ParentCompleteComponentTypes.Add(parentCompleteComponentTypesCasted);
                }
                IVariableUsage componentParameterUsage_ImplementationComponentTypeCasted = item.As<IVariableUsage>();
                if ((componentParameterUsage_ImplementationComponentTypeCasted != null))
                {
                    this._parent.ComponentParameterUsage_ImplementationComponentType.Add(componentParameterUsage_ImplementationComponentTypeCasted);
                }
                if ((this._parent.Repository__RepositoryComponent == null))
                {
                    IRepository repository__RepositoryComponentCasted = item.As<IRepository>();
                    if ((repository__RepositoryComponentCasted != null))
                    {
                        this._parent.Repository__RepositoryComponent = repository__RepositoryComponentCasted;
                        return;
                    }
                }
                IInterface providedInterfacesCasted = item.As<IInterface>();
                if ((providedInterfacesCasted != null))
                {
                    this._parent.ProvidedInterfaces.Add(providedInterfacesCasted);
                }
                IRequiredInterface requiredInterfacesCasted = item.As<IRequiredInterface>();
                if ((requiredInterfacesCasted != null))
                {
                    this._parent.RequiredInterfaces.Add(requiredInterfacesCasted);
                }
                if ((this._parent.ResourceRequiredInterfaces == null))
                {
                    IResourceRequiredInterface resourceRequiredInterfacesCasted = item.As<IResourceRequiredInterface>();
                    if ((resourceRequiredInterfacesCasted != null))
                    {
                        this._parent.ResourceRequiredInterfaces = resourceRequiredInterfacesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceEffectSpecifications__BasicComponent.Clear();
                this._parent.PassiveResource_BasicComponent.Clear();
                this._parent.ParentCompleteComponentTypes.Clear();
                this._parent.ComponentParameterUsage_ImplementationComponentType.Clear();
                this._parent.Repository__RepositoryComponent = null;
                this._parent.ProvidedInterfaces.Clear();
                this._parent.RequiredInterfaces.Clear();
                this._parent.ResourceRequiredInterfaces = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ServiceEffectSpecifications__BasicComponent.Contains(item))
                {
                    return true;
                }
                if (this._parent.PassiveResource_BasicComponent.Contains(item))
                {
                    return true;
                }
                if (this._parent.ParentCompleteComponentTypes.Contains(item))
                {
                    return true;
                }
                if (this._parent.ComponentParameterUsage_ImplementationComponentType.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Repository__RepositoryComponent))
                {
                    return true;
                }
                if (this._parent.ProvidedInterfaces.Contains(item))
                {
                    return true;
                }
                if (this._parent.RequiredInterfaces.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ResourceRequiredInterfaces))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> serviceEffectSpecifications__BasicComponentEnumerator = this._parent.ServiceEffectSpecifications__BasicComponent.GetEnumerator();
                try
                {
                    for (
                    ; serviceEffectSpecifications__BasicComponentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceEffectSpecifications__BasicComponentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceEffectSpecifications__BasicComponentEnumerator.Dispose();
                }
                IEnumerator<IModelElement> passiveResource_BasicComponentEnumerator = this._parent.PassiveResource_BasicComponent.GetEnumerator();
                try
                {
                    for (
                    ; passiveResource_BasicComponentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = passiveResource_BasicComponentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    passiveResource_BasicComponentEnumerator.Dispose();
                }
                IEnumerator<IModelElement> parentCompleteComponentTypesEnumerator = this._parent.ParentCompleteComponentTypes.GetEnumerator();
                try
                {
                    for (
                    ; parentCompleteComponentTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = parentCompleteComponentTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    parentCompleteComponentTypesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> componentParameterUsage_ImplementationComponentTypeEnumerator = this._parent.ComponentParameterUsage_ImplementationComponentType.GetEnumerator();
                try
                {
                    for (
                    ; componentParameterUsage_ImplementationComponentTypeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = componentParameterUsage_ImplementationComponentTypeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    componentParameterUsage_ImplementationComponentTypeEnumerator.Dispose();
                }
                if ((this._parent.Repository__RepositoryComponent != null))
                {
                    array[arrayIndex] = this._parent.Repository__RepositoryComponent;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> providedInterfacesEnumerator = this._parent.ProvidedInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; providedInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = providedInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    providedInterfacesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requiredInterfacesEnumerator = this._parent.RequiredInterfaces.GetEnumerator();
                try
                {
                    for (
                    ; requiredInterfacesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requiredInterfacesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requiredInterfacesEnumerator.Dispose();
                }
                if ((this._parent.ResourceRequiredInterfaces != null))
                {
                    array[arrayIndex] = this._parent.ResourceRequiredInterfaces;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IServiceEffectSpecification serviceEffectSpecificationItem = item.As<IServiceEffectSpecification>();
                if (((serviceEffectSpecificationItem != null) 
                            && this._parent.ServiceEffectSpecifications__BasicComponent.Remove(serviceEffectSpecificationItem)))
                {
                    return true;
                }
                IPassiveResource passiveResourceItem = item.As<IPassiveResource>();
                if (((passiveResourceItem != null) 
                            && this._parent.PassiveResource_BasicComponent.Remove(passiveResourceItem)))
                {
                    return true;
                }
                ICompleteComponentType completeComponentTypeItem = item.As<ICompleteComponentType>();
                if (((completeComponentTypeItem != null) 
                            && this._parent.ParentCompleteComponentTypes.Remove(completeComponentTypeItem)))
                {
                    return true;
                }
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.ComponentParameterUsage_ImplementationComponentType.Remove(variableUsageItem)))
                {
                    return true;
                }
                if ((this._parent.Repository__RepositoryComponent == item))
                {
                    this._parent.Repository__RepositoryComponent = null;
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.ProvidedInterfaces.Remove(interfaceItem)))
                {
                    return true;
                }
                IRequiredInterface requiredInterfaceItem = item.As<IRequiredInterface>();
                if (((requiredInterfaceItem != null) 
                            && this._parent.RequiredInterfaces.Remove(requiredInterfaceItem)))
                {
                    return true;
                }
                if ((this._parent.ResourceRequiredInterfaces == item))
                {
                    this._parent.ResourceRequiredInterfaces = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceEffectSpecifications__BasicComponent).Concat(this._parent.PassiveResource_BasicComponent).Concat(this._parent.ParentCompleteComponentTypes).Concat(this._parent.ComponentParameterUsage_ImplementationComponentType).Concat(this._parent.Repository__RepositoryComponent).Concat(this._parent.ProvidedInterfaces).Concat(this._parent.RequiredInterfaces).Concat(this._parent.ResourceRequiredInterfaces).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the componentType property
        /// </summary>
        private sealed class ComponentTypeProxy : ModelPropertyChange<IImplementationComponentType, ComponentType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ComponentTypeProxy(IImplementationComponentType modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ComponentType Value
            {
                get
                {
                    return this.ModelElement.ComponentType;
                }
                set
                {
                    this.ModelElement.ComponentType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ComponentTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ComponentTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the repository__RepositoryComponent property
        /// </summary>
        private sealed class Repository__RepositoryComponentProxy : ModelPropertyChange<IRepositoryComponent, IRepository>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Repository__RepositoryComponentProxy(IRepositoryComponent modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRepository Value
            {
                get
                {
                    return this.ModelElement.Repository__RepositoryComponent;
                }
                set
                {
                    this.ModelElement.Repository__RepositoryComponent = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Repository__RepositoryComponentChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Repository__RepositoryComponentChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceRequiredInterfaces property
        /// </summary>
        private sealed class ResourceRequiredInterfacesProxy : ModelPropertyChange<IResourceInterfaceRequiringEntity, IResourceRequiredInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceRequiredInterfacesProxy(IResourceInterfaceRequiringEntity modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceRequiredInterface Value
            {
                get
                {
                    return this.ModelElement.ResourceRequiredInterfaces;
                }
                set
                {
                    this.ModelElement.ResourceRequiredInterfaces = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceRequiredInterfacesChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceRequiredInterfacesChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Namespace property
        /// </summary>
        private sealed class NamespaceProxy : ModelPropertyChange<IType, INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NamespaceProxy(IType modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INamespace Value
            {
                get
                {
                    return this.ModelElement.Namespace;
                }
                set
                {
                    this.ModelElement.Namespace = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NamespaceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NamespaceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged -= handler;
            }
        }
    }
}

