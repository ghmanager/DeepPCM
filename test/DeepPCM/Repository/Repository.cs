//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core;
using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Protocol;
using Metamodel.DeepPCM.Reliability;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.Seff;
using Metamodel.DeepPCM.System0;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Repository
{
    
    
    /// <summary>
    /// The default implementation of the Repository class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Repository/1.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//repository//Repository/")]
    [DebuggerDisplayAttribute("Repository {Name}")]
    public class Repository : MetaElement, IRepository, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RepositoryDescription property
        /// </summary>
        private string _repositoryDescription;
        
        /// <summary>
        /// The backing field for the Components__Repository property
        /// </summary>
        private RepositoryComponents__RepositoryCollection _components__Repository;
        
        /// <summary>
        /// The backing field for the Interfaces__Repository property
        /// </summary>
        private RepositoryInterfaces__RepositoryCollection _interfaces__Repository;
        
        /// <summary>
        /// The backing field for the FailureTypes__Repository property
        /// </summary>
        private RepositoryFailureTypes__RepositoryCollection _failureTypes__Repository;
        
        /// <summary>
        /// The backing field for the DataTypes__Repository property
        /// </summary>
        private RepositoryDataTypes__RepositoryCollection _dataTypes__Repository;
        
        /// <summary>
        /// The backing field for the EventChannel__Repository property
        /// </summary>
        private RepositoryEventChannel__RepositoryCollection _eventChannel__Repository;
        
        /// <summary>
        /// The backing field for the Delegate__Repository property
        /// </summary>
        private RepositoryDelegate__RepositoryCollection _delegate__Repository;
        
        /// <summary>
        /// The backing field for the SystemSpecifications property
        /// </summary>
        private RepositorySystemSpecificationsCollection _systemSpecifications;
        
        /// <summary>
        /// The backing field for the Uri property
        /// </summary>
        private Uri _uri;
        
        /// <summary>
        /// The backing field for the Prefix property
        /// </summary>
        private string _prefix;
        
        /// <summary>
        /// The backing field for the Id property
        /// </summary>
        private string _id;
        
        /// <summary>
        /// The backing field for the EntityName property
        /// </summary>
        private string _entityName = "aName";
        
        private static IClass _classInstance;
        
        public Repository()
        {
            this._components__Repository = new RepositoryComponents__RepositoryCollection(this);
            this._components__Repository.CollectionChanging += this.Components__RepositoryCollectionChanging;
            this._components__Repository.CollectionChanged += this.Components__RepositoryCollectionChanged;
            this._interfaces__Repository = new RepositoryInterfaces__RepositoryCollection(this);
            this._interfaces__Repository.CollectionChanging += this.Interfaces__RepositoryCollectionChanging;
            this._interfaces__Repository.CollectionChanged += this.Interfaces__RepositoryCollectionChanged;
            this._failureTypes__Repository = new RepositoryFailureTypes__RepositoryCollection(this);
            this._failureTypes__Repository.CollectionChanging += this.FailureTypes__RepositoryCollectionChanging;
            this._failureTypes__Repository.CollectionChanged += this.FailureTypes__RepositoryCollectionChanged;
            this._dataTypes__Repository = new RepositoryDataTypes__RepositoryCollection(this);
            this._dataTypes__Repository.CollectionChanging += this.DataTypes__RepositoryCollectionChanging;
            this._dataTypes__Repository.CollectionChanged += this.DataTypes__RepositoryCollectionChanged;
            this._eventChannel__Repository = new RepositoryEventChannel__RepositoryCollection(this);
            this._eventChannel__Repository.CollectionChanging += this.EventChannel__RepositoryCollectionChanging;
            this._eventChannel__Repository.CollectionChanged += this.EventChannel__RepositoryCollectionChanged;
            this._delegate__Repository = new RepositoryDelegate__RepositoryCollection(this);
            this._delegate__Repository.CollectionChanging += this.Delegate__RepositoryCollectionChanging;
            this._delegate__Repository.CollectionChanged += this.Delegate__RepositoryCollectionChanged;
            this._systemSpecifications = new RepositorySystemSpecificationsCollection(this);
            this._systemSpecifications.CollectionChanging += this.SystemSpecificationsCollectionChanging;
            this._systemSpecifications.CollectionChanged += this.SystemSpecificationsCollectionChanged;
        }
        
        /// <summary>
        /// The repositoryDescription property
        /// </summary>
        [XmlElementNameAttribute("repositoryDescription")]
        [XmlAttributeAttribute(true)]
        public virtual string RepositoryDescription
        {
            get
            {
                return this._repositoryDescription;
            }
            set
            {
                if ((this._repositoryDescription != value))
                {
                    string old = this._repositoryDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRepositoryDescriptionChanging(e);
                    this.OnPropertyChanging("RepositoryDescription", e);
                    this._repositoryDescription = value;
                    this.OnRepositoryDescriptionChanged(e);
                    this.OnPropertyChanged("RepositoryDescription", e);
                }
            }
        }
        
        /// <summary>
        /// The components__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("components__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__RepositoryComponent")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IRepositoryComponent> Components__Repository
        {
            get
            {
                return this._components__Repository;
            }
        }
        
        /// <summary>
        /// The interfaces__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("interfaces__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__Interface")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IInterface> Interfaces__Repository
        {
            get
            {
                return this._interfaces__Repository;
            }
        }
        
        /// <summary>
        /// The failureTypes__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("failureTypes__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__FailureType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IFailureType> FailureTypes__Repository
        {
            get
            {
                return this._failureTypes__Repository;
            }
        }
        
        /// <summary>
        /// The dataTypes__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("dataTypes__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__DataType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IDataType> DataTypes__Repository
        {
            get
            {
                return this._dataTypes__Repository;
            }
        }
        
        /// <summary>
        /// The eventChannel__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eventChannel__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__EventChannel")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IEventChannel> EventChannel__Repository
        {
            get
            {
                return this._eventChannel__Repository;
            }
        }
        
        /// <summary>
        /// The delegate__Repository property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("delegate__Repository")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("repository__Delegate")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IDelegate> Delegate__Repository
        {
            get
            {
                return this._delegate__Repository;
            }
        }
        
        /// <summary>
        /// The SystemSpecifications property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("Repository")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<ISystemSpecification> SystemSpecifications
        {
            get
            {
                return this._systemSpecifications;
            }
        }
        
        ICollectionExpression<IType> INamespace.Types
        {
            get
            {
                return new RepositoryTypesCollection(this);
            }
        }
        
        ICollectionExpression<INamespace> INamespace.ChildNamespaces
        {
            get
            {
                return EmptyList<INamespace>.Instance;
            }
        }
        
        /// <summary>
        /// The Uri property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Uri Uri
        {
            get
            {
                return this._uri;
            }
            set
            {
                if ((this._uri != value))
                {
                    Uri old = this._uri;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUriChanging(e);
                    this.OnPropertyChanging("Uri", e);
                    this._uri = value;
                    this.OnUriChanged(e);
                    this.OnPropertyChanged("Uri", e);
                }
            }
        }
        
        /// <summary>
        /// The Prefix property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Prefix
        {
            get
            {
                return this._prefix;
            }
            set
            {
                if ((this._prefix != value))
                {
                    string old = this._prefix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrefixChanging(e);
                    this.OnPropertyChanging("Prefix", e);
                    this._prefix = value;
                    this.OnPrefixChanged(e);
                    this.OnPropertyChanged("Prefix", e);
                }
            }
        }
        
        /// <summary>
        /// The ParentNamespace property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChildNamespaces")]
        public virtual INamespace ParentNamespace
        {
            get
            {
                return ModelHelper.CastAs<INamespace>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The id property
        /// </summary>
        [XmlElementNameAttribute("id")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    string old = this._id;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdChanging(e);
                    this.OnPropertyChanging("Id", e);
                    this._id = value;
                    this.OnIdChanged(e);
                    this.OnPropertyChanged("Id", e);
                }
            }
        }
        
        /// <summary>
        /// The entityName property
        /// </summary>
        [DefaultValueAttribute("aName")]
        [XmlElementNameAttribute("entityName")]
        [XmlAttributeAttribute(true)]
        public virtual string EntityName
        {
            get
            {
                return this._entityName;
            }
            set
            {
                if ((this._entityName != value))
                {
                    string old = this._entityName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEntityNameChanging(e);
                    this.OnPropertyChanging("EntityName", e);
                    this._entityName = value;
                    this.OnEntityNameChanged(e);
                    this.OnPropertyChanged("EntityName", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new RepositoryChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RepositoryReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//Repository/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RepositoryDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepositoryDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the RepositoryDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RepositoryDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the Uri property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UriChanging;
        
        /// <summary>
        /// Gets fired when the Uri property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UriChanged;
        
        /// <summary>
        /// Gets fired before the Prefix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanging;
        
        /// <summary>
        /// Gets fired when the Prefix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanged;
        
        /// <summary>
        /// Gets fired before the ParentNamespace property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentNamespaceChanging;
        
        /// <summary>
        /// Gets fired when the ParentNamespace property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentNamespaceChanged;
        
        /// <summary>
        /// Gets fired before the Id property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanging;
        
        /// <summary>
        /// Gets fired when the Id property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdChanged;
        
        /// <summary>
        /// Gets fired before the EntityName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanging;
        
        /// <summary>
        /// Gets fired when the EntityName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EntityNameChanged;
        
        /// <summary>
        /// Raises the RepositoryDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RepositoryDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRepositoryDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RepositoryDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Components__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Components__RepositoryCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Components__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Components__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Components__RepositoryCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Components__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Interfaces__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Interfaces__RepositoryCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Interfaces__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Interfaces__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Interfaces__RepositoryCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Interfaces__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FailureTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FailureTypes__RepositoryCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("FailureTypes__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FailureTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FailureTypes__RepositoryCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FailureTypes__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DataTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DataTypes__RepositoryCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DataTypes__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DataTypes__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DataTypes__RepositoryCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DataTypes__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EventChannel__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventChannel__RepositoryCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EventChannel__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EventChannel__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventChannel__RepositoryCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EventChannel__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Delegate__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Delegate__RepositoryCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Delegate__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Delegate__Repository property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Delegate__RepositoryCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Delegate__Repository", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SystemSpecifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SystemSpecificationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SystemSpecifications", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SystemSpecifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SystemSpecificationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SystemSpecifications", e);
        }
        
        /// <summary>
        /// Raises the UriChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUriChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UriChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UriChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUriChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UriChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrefixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrefixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentNamespaceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentNamespaceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentNamespaceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            INamespace oldParentNamespace = ModelHelper.CastAs<INamespace>(oldParent);
            INamespace newParentNamespace = ModelHelper.CastAs<INamespace>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentNamespace, newParentNamespace);
            this.OnParentNamespaceChanging(e);
            this.OnPropertyChanging("ParentNamespace");
        }
        
        /// <summary>
        /// Raises the ParentNamespaceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentNamespaceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentNamespaceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            INamespace oldParentNamespace = ModelHelper.CastAs<INamespace>(oldParent);
            INamespace newParentNamespace = ModelHelper.CastAs<INamespace>(newParent);
            if ((oldParentNamespace != null))
            {
                oldParentNamespace.ChildNamespaces.Remove(this);
            }
            if ((newParentNamespace != null))
            {
                newParentNamespace.ChildNamespaces.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentNamespace, newParentNamespace);
            this.OnParentNamespaceChanged(e);
            this.OnPropertyChanged("ParentNamespace", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Raises the IdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EntityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEntityNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EntityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REPOSITORYDESCRIPTION"))
            {
                return this.RepositoryDescription;
            }
            if ((attribute == "URI"))
            {
                return this.Uri;
            }
            if ((attribute == "PREFIX"))
            {
                return this.Prefix;
            }
            if ((attribute == "ID"))
            {
                return this.Id;
            }
            if ((attribute == "ENTITYNAME"))
            {
                return this.EntityName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "COMPONENTS__REPOSITORY"))
            {
                return this._components__Repository;
            }
            if ((feature == "INTERFACES__REPOSITORY"))
            {
                return this._interfaces__Repository;
            }
            if ((feature == "FAILURETYPES__REPOSITORY"))
            {
                return this._failureTypes__Repository;
            }
            if ((feature == "DATATYPES__REPOSITORY"))
            {
                return this._dataTypes__Repository;
            }
            if ((feature == "EVENTCHANNEL__REPOSITORY"))
            {
                return this._eventChannel__Repository;
            }
            if ((feature == "DELEGATE__REPOSITORY"))
            {
                return this._delegate__Repository;
            }
            if ((feature == "SYSTEMSPECIFICATIONS"))
            {
                return this._systemSpecifications;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARENTNAMESPACE"))
            {
                this.ParentNamespace = ((INamespace)(value));
                return;
            }
            if ((feature == "REPOSITORYDESCRIPTION"))
            {
                this.RepositoryDescription = ((string)(value));
                return;
            }
            if ((feature == "URI"))
            {
                this.Uri = ((Uri)(value));
                return;
            }
            if ((feature == "PREFIX"))
            {
                this.Prefix = ((string)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.Id = ((string)(value));
                return;
            }
            if ((feature == "ENTITYNAME"))
            {
                this.EntityName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PARENTNAMESPACE"))
            {
                return new ParentNamespaceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PARENTNAMESPACE"))
            {
                return new ParentNamespaceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//repository//Repository/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Repository class
        /// </summary>
        public class RepositoryChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Repository _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RepositoryChildrenCollection(Repository parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Components__Repository.Count);
                    count = (count + this._parent.Interfaces__Repository.Count);
                    count = (count + this._parent.FailureTypes__Repository.Count);
                    count = (count + this._parent.DataTypes__Repository.Count);
                    count = (count + this._parent.EventChannel__Repository.Count);
                    count = (count + this._parent.Delegate__Repository.Count);
                    count = (count + this._parent.SystemSpecifications.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannel__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Delegate__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SystemSpecifications.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannel__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Delegate__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SystemSpecifications.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRepositoryComponent components__RepositoryCasted = item.As<IRepositoryComponent>();
                if ((components__RepositoryCasted != null))
                {
                    this._parent.Components__Repository.Add(components__RepositoryCasted);
                }
                IInterface interfaces__RepositoryCasted = item.As<IInterface>();
                if ((interfaces__RepositoryCasted != null))
                {
                    this._parent.Interfaces__Repository.Add(interfaces__RepositoryCasted);
                }
                IFailureType failureTypes__RepositoryCasted = item.As<IFailureType>();
                if ((failureTypes__RepositoryCasted != null))
                {
                    this._parent.FailureTypes__Repository.Add(failureTypes__RepositoryCasted);
                }
                IDataType dataTypes__RepositoryCasted = item.As<IDataType>();
                if ((dataTypes__RepositoryCasted != null))
                {
                    this._parent.DataTypes__Repository.Add(dataTypes__RepositoryCasted);
                }
                IEventChannel eventChannel__RepositoryCasted = item.As<IEventChannel>();
                if ((eventChannel__RepositoryCasted != null))
                {
                    this._parent.EventChannel__Repository.Add(eventChannel__RepositoryCasted);
                }
                IDelegate delegate__RepositoryCasted = item.As<IDelegate>();
                if ((delegate__RepositoryCasted != null))
                {
                    this._parent.Delegate__Repository.Add(delegate__RepositoryCasted);
                }
                ISystemSpecification systemSpecificationsCasted = item.As<ISystemSpecification>();
                if ((systemSpecificationsCasted != null))
                {
                    this._parent.SystemSpecifications.Add(systemSpecificationsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Components__Repository.Clear();
                this._parent.Interfaces__Repository.Clear();
                this._parent.FailureTypes__Repository.Clear();
                this._parent.DataTypes__Repository.Clear();
                this._parent.EventChannel__Repository.Clear();
                this._parent.Delegate__Repository.Clear();
                this._parent.SystemSpecifications.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Components__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.Interfaces__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.FailureTypes__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.DataTypes__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannel__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.Delegate__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.SystemSpecifications.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> components__RepositoryEnumerator = this._parent.Components__Repository.GetEnumerator();
                try
                {
                    for (
                    ; components__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = components__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    components__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> interfaces__RepositoryEnumerator = this._parent.Interfaces__Repository.GetEnumerator();
                try
                {
                    for (
                    ; interfaces__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interfaces__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interfaces__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> failureTypes__RepositoryEnumerator = this._parent.FailureTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; failureTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = failureTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    failureTypes__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dataTypes__RepositoryEnumerator = this._parent.DataTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; dataTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dataTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dataTypes__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannel__RepositoryEnumerator = this._parent.EventChannel__Repository.GetEnumerator();
                try
                {
                    for (
                    ; eventChannel__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannel__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannel__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> delegate__RepositoryEnumerator = this._parent.Delegate__Repository.GetEnumerator();
                try
                {
                    for (
                    ; delegate__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = delegate__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    delegate__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> systemSpecificationsEnumerator = this._parent.SystemSpecifications.GetEnumerator();
                try
                {
                    for (
                    ; systemSpecificationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = systemSpecificationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    systemSpecificationsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRepositoryComponent repositoryComponentItem = item.As<IRepositoryComponent>();
                if (((repositoryComponentItem != null) 
                            && this._parent.Components__Repository.Remove(repositoryComponentItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.Interfaces__Repository.Remove(interfaceItem)))
                {
                    return true;
                }
                IFailureType failureTypeItem = item.As<IFailureType>();
                if (((failureTypeItem != null) 
                            && this._parent.FailureTypes__Repository.Remove(failureTypeItem)))
                {
                    return true;
                }
                IDataType dataTypeItem = item.As<IDataType>();
                if (((dataTypeItem != null) 
                            && this._parent.DataTypes__Repository.Remove(dataTypeItem)))
                {
                    return true;
                }
                IEventChannel eventChannelItem = item.As<IEventChannel>();
                if (((eventChannelItem != null) 
                            && this._parent.EventChannel__Repository.Remove(eventChannelItem)))
                {
                    return true;
                }
                IDelegate delegateItem = item.As<IDelegate>();
                if (((delegateItem != null) 
                            && this._parent.Delegate__Repository.Remove(delegateItem)))
                {
                    return true;
                }
                ISystemSpecification systemSpecificationItem = item.As<ISystemSpecification>();
                if (((systemSpecificationItem != null) 
                            && this._parent.SystemSpecifications.Remove(systemSpecificationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Components__Repository).Concat(this._parent.Interfaces__Repository).Concat(this._parent.FailureTypes__Repository).Concat(this._parent.DataTypes__Repository).Concat(this._parent.EventChannel__Repository).Concat(this._parent.Delegate__Repository).Concat(this._parent.SystemSpecifications).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Repository class
        /// </summary>
        public class RepositoryReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Repository _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RepositoryReferencedElementsCollection(Repository parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Components__Repository.Count);
                    count = (count + this._parent.Interfaces__Repository.Count);
                    count = (count + this._parent.FailureTypes__Repository.Count);
                    count = (count + this._parent.DataTypes__Repository.Count);
                    count = (count + this._parent.EventChannel__Repository.Count);
                    count = (count + this._parent.Delegate__Repository.Count);
                    count = (count + this._parent.SystemSpecifications.Count);
                    if ((this._parent.ParentNamespace != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannel__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Delegate__Repository.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SystemSpecifications.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentNamespaceChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Components__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Interfaces__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FailureTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DataTypes__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannel__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Delegate__Repository.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SystemSpecifications.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentNamespaceChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRepositoryComponent components__RepositoryCasted = item.As<IRepositoryComponent>();
                if ((components__RepositoryCasted != null))
                {
                    this._parent.Components__Repository.Add(components__RepositoryCasted);
                }
                IInterface interfaces__RepositoryCasted = item.As<IInterface>();
                if ((interfaces__RepositoryCasted != null))
                {
                    this._parent.Interfaces__Repository.Add(interfaces__RepositoryCasted);
                }
                IFailureType failureTypes__RepositoryCasted = item.As<IFailureType>();
                if ((failureTypes__RepositoryCasted != null))
                {
                    this._parent.FailureTypes__Repository.Add(failureTypes__RepositoryCasted);
                }
                IDataType dataTypes__RepositoryCasted = item.As<IDataType>();
                if ((dataTypes__RepositoryCasted != null))
                {
                    this._parent.DataTypes__Repository.Add(dataTypes__RepositoryCasted);
                }
                IEventChannel eventChannel__RepositoryCasted = item.As<IEventChannel>();
                if ((eventChannel__RepositoryCasted != null))
                {
                    this._parent.EventChannel__Repository.Add(eventChannel__RepositoryCasted);
                }
                IDelegate delegate__RepositoryCasted = item.As<IDelegate>();
                if ((delegate__RepositoryCasted != null))
                {
                    this._parent.Delegate__Repository.Add(delegate__RepositoryCasted);
                }
                ISystemSpecification systemSpecificationsCasted = item.As<ISystemSpecification>();
                if ((systemSpecificationsCasted != null))
                {
                    this._parent.SystemSpecifications.Add(systemSpecificationsCasted);
                }
                if ((this._parent.ParentNamespace == null))
                {
                    INamespace parentNamespaceCasted = item.As<INamespace>();
                    if ((parentNamespaceCasted != null))
                    {
                        this._parent.ParentNamespace = parentNamespaceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Components__Repository.Clear();
                this._parent.Interfaces__Repository.Clear();
                this._parent.FailureTypes__Repository.Clear();
                this._parent.DataTypes__Repository.Clear();
                this._parent.EventChannel__Repository.Clear();
                this._parent.Delegate__Repository.Clear();
                this._parent.SystemSpecifications.Clear();
                this._parent.ParentNamespace = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Components__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.Interfaces__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.FailureTypes__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.DataTypes__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannel__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.Delegate__Repository.Contains(item))
                {
                    return true;
                }
                if (this._parent.SystemSpecifications.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ParentNamespace))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> components__RepositoryEnumerator = this._parent.Components__Repository.GetEnumerator();
                try
                {
                    for (
                    ; components__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = components__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    components__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> interfaces__RepositoryEnumerator = this._parent.Interfaces__Repository.GetEnumerator();
                try
                {
                    for (
                    ; interfaces__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = interfaces__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    interfaces__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> failureTypes__RepositoryEnumerator = this._parent.FailureTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; failureTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = failureTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    failureTypes__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> dataTypes__RepositoryEnumerator = this._parent.DataTypes__Repository.GetEnumerator();
                try
                {
                    for (
                    ; dataTypes__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dataTypes__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dataTypes__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannel__RepositoryEnumerator = this._parent.EventChannel__Repository.GetEnumerator();
                try
                {
                    for (
                    ; eventChannel__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannel__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannel__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> delegate__RepositoryEnumerator = this._parent.Delegate__Repository.GetEnumerator();
                try
                {
                    for (
                    ; delegate__RepositoryEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = delegate__RepositoryEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    delegate__RepositoryEnumerator.Dispose();
                }
                IEnumerator<IModelElement> systemSpecificationsEnumerator = this._parent.SystemSpecifications.GetEnumerator();
                try
                {
                    for (
                    ; systemSpecificationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = systemSpecificationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    systemSpecificationsEnumerator.Dispose();
                }
                if ((this._parent.ParentNamespace != null))
                {
                    array[arrayIndex] = this._parent.ParentNamespace;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRepositoryComponent repositoryComponentItem = item.As<IRepositoryComponent>();
                if (((repositoryComponentItem != null) 
                            && this._parent.Components__Repository.Remove(repositoryComponentItem)))
                {
                    return true;
                }
                IInterface interfaceItem = item.As<IInterface>();
                if (((interfaceItem != null) 
                            && this._parent.Interfaces__Repository.Remove(interfaceItem)))
                {
                    return true;
                }
                IFailureType failureTypeItem = item.As<IFailureType>();
                if (((failureTypeItem != null) 
                            && this._parent.FailureTypes__Repository.Remove(failureTypeItem)))
                {
                    return true;
                }
                IDataType dataTypeItem = item.As<IDataType>();
                if (((dataTypeItem != null) 
                            && this._parent.DataTypes__Repository.Remove(dataTypeItem)))
                {
                    return true;
                }
                IEventChannel eventChannelItem = item.As<IEventChannel>();
                if (((eventChannelItem != null) 
                            && this._parent.EventChannel__Repository.Remove(eventChannelItem)))
                {
                    return true;
                }
                IDelegate delegateItem = item.As<IDelegate>();
                if (((delegateItem != null) 
                            && this._parent.Delegate__Repository.Remove(delegateItem)))
                {
                    return true;
                }
                ISystemSpecification systemSpecificationItem = item.As<ISystemSpecification>();
                if (((systemSpecificationItem != null) 
                            && this._parent.SystemSpecifications.Remove(systemSpecificationItem)))
                {
                    return true;
                }
                if ((this._parent.ParentNamespace == item))
                {
                    this._parent.ParentNamespace = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Components__Repository).Concat(this._parent.Interfaces__Repository).Concat(this._parent.FailureTypes__Repository).Concat(this._parent.DataTypes__Repository).Concat(this._parent.EventChannel__Repository).Concat(this._parent.Delegate__Repository).Concat(this._parent.SystemSpecifications).Concat(this._parent.ParentNamespace).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the repositoryDescription property
        /// </summary>
        private sealed class RepositoryDescriptionProxy : ModelPropertyChange<IRepository, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RepositoryDescriptionProxy(IRepository modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RepositoryDescription;
                }
                set
                {
                    this.ModelElement.RepositoryDescription = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RepositoryDescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RepositoryDescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Uri property
        /// </summary>
        private sealed class UriProxy : ModelPropertyChange<INamespace, Uri>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UriProxy(INamespace modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Uri Value
            {
                get
                {
                    return this.ModelElement.Uri;
                }
                set
                {
                    this.ModelElement.Uri = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UriChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UriChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Prefix property
        /// </summary>
        private sealed class PrefixProxy : ModelPropertyChange<INamespace, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrefixProxy(INamespace modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Prefix;
                }
                set
                {
                    this.ModelElement.Prefix = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PrefixChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PrefixChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParentNamespace property
        /// </summary>
        private sealed class ParentNamespaceProxy : ModelPropertyChange<INamespace, INamespace>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentNamespaceProxy(INamespace modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INamespace Value
            {
                get
                {
                    return this.ModelElement.ParentNamespace;
                }
                set
                {
                    this.ModelElement.ParentNamespace = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParentNamespaceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParentNamespaceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the id property
        /// </summary>
        private sealed class IdProxy : ModelPropertyChange<IIdentifier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdProxy(IIdentifier modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Id;
                }
                set
                {
                    this.ModelElement.Id = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the entityName property
        /// </summary>
        private sealed class EntityNameProxy : ModelPropertyChange<INamedElement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EntityNameProxy(INamedElement modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EntityName;
                }
                set
                {
                    this.ModelElement.EntityName = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EntityNameChanged -= handler;
            }
        }
    }
}

