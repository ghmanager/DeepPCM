//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core;
using Metamodel.DeepPCM.Core.Composition;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Parameter;
using Metamodel.DeepPCM.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Usagemodel
{
    
    
    /// <summary>
    /// The default implementation of the UsageModel class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/UsageModel/1.0")]
    [XmlNamespacePrefixAttribute("usagemodel")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//usagemodel//UsageModel/")]
    [DebuggerDisplayAttribute("UsageModel {Name}")]
    public class UsageModel : NMF.Models.Meta.Type, IUsageModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the UsageScenario_UsageModel property
        /// </summary>
        private UsageModelUsageScenario_UsageModelCollection _usageScenario_UsageModel;
        
        /// <summary>
        /// The backing field for the UserData_UsageModel property
        /// </summary>
        private UsageModelUserData_UsageModelCollection _userData_UsageModel;
        
        /// <summary>
        /// The backing field for the IdentifierScope property
        /// </summary>
        private IdentifierScope _identifierScope;
        
        /// <summary>
        /// The backing field for the References property
        /// </summary>
        private ReferenceTypeReferencesCollection _references;
        
        private static IClass _classInstance;
        
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IdentifierChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.InstanceOfChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanged
        {
            add
            {
            }
            remove
            {
            }
        }
        event EventHandler<ValueChangedEventArgs> IClass.IsAbstractChanging
        {
            add
            {
            }
            remove
            {
            }
        }
        
        public UsageModel()
        {
            this._usageScenario_UsageModel = new UsageModelUsageScenario_UsageModelCollection(this);
            this._usageScenario_UsageModel.CollectionChanging += this.UsageScenario_UsageModelCollectionChanging;
            this._usageScenario_UsageModel.CollectionChanged += this.UsageScenario_UsageModelCollectionChanged;
            this._userData_UsageModel = new UsageModelUserData_UsageModelCollection(this);
            this._userData_UsageModel.CollectionChanging += this.UserData_UsageModelCollectionChanging;
            this._userData_UsageModel.CollectionChanged += this.UserData_UsageModelCollectionChanged;
            this._references = new ReferenceTypeReferencesCollection(this);
            this._references.CollectionChanging += this.ReferencesCollectionChanging;
            this._references.CollectionChanged += this.ReferencesCollectionChanged;
        }
        
        /// <summary>
        /// The usageScenario_UsageModel property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("usageScenario_UsageModel")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("usageModel_UsageScenario")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IUsageScenario> UsageScenario_UsageModel
        {
            get
            {
                return this._usageScenario_UsageModel;
            }
        }
        
        /// <summary>
        /// The userData_UsageModel property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("userData_UsageModel")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("usageModel_UserData")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IUserData> UserData_UsageModel
        {
            get
            {
                return this._userData_UsageModel;
            }
        }
        
        ICollectionExpression<IReferenceConstraint> IClass.ReferenceConstraints
        {
            get
            {
                return EmptyList<IReferenceConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IAttribute> IStructuredType.Attributes
        {
            get
            {
                return EmptyList<IAttribute>.Instance;
            }
        }
        
        ICollectionExpression<IAttributeConstraint> IClass.AttributeConstraints
        {
            get
            {
                return EmptyList<IAttributeConstraint>.Instance;
            }
        }
        
        ICollectionExpression<IEvent> IReferenceType.Events
        {
            get
            {
                return EmptyList<IEvent>.Instance;
            }
        }
        
        ICollectionExpression<IOperation> IStructuredType.Operations
        {
            get
            {
                return EmptyList<IOperation>.Instance;
            }
        }
        
        IAttribute IClass.Identifier
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        IClass IClass.InstanceOf
        {
            get
            {
                return null;
            }
            set
            {
                if ((value != null))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        ICollectionExpression<IClass> IClass.BaseTypes
        {
            get
            {
                return EmptyList<IClass>.Instance;
            }
        }
        
        bool IClass.IsAbstract
        {
            get
            {
                return false;
            }
            set
            {
                if ((value != false))
                {
                    throw new System.NotSupportedException();
                }
            }
        }
        
        /// <summary>
        /// Specifies whether the identifier is valid only in the scope of its container or on a global scope.
        /// </summary>
        /// <remarks>This attribute is ignored when this class is not identified.</remarks>
        [XmlAttributeAttribute(true)]
        public virtual IdentifierScope IdentifierScope
        {
            get
            {
                return this._identifierScope;
            }
            set
            {
                if ((this._identifierScope != value))
                {
                    IdentifierScope old = this._identifierScope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdentifierScopeChanging(e);
                    this.OnPropertyChanging("IdentifierScope", e);
                    this._identifierScope = value;
                    this.OnIdentifierScopeChanged(e);
                    this.OnPropertyChanged("IdentifierScope", e);
                }
            }
        }
        
        /// <summary>
        /// The References property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("DeclaringType")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IReference> References
        {
            get
            {
                return this._references;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new UsageModelChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UsageModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//usagemodel//UsageModel/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IdentifierScope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanging;
        
        /// <summary>
        /// Gets fired when the IdentifierScope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdentifierScopeChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UsageScenario_UsageModel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsageScenario_UsageModelCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UsageScenario_UsageModel", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UsageScenario_UsageModel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UsageScenario_UsageModelCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UsageScenario_UsageModel", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserData_UsageModel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserData_UsageModelCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UserData_UsageModel", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserData_UsageModel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserData_UsageModelCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserData_UsageModel", e);
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdentifierScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdentifierScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdentifierScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("References", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the References property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReferencesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("References", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "IDENTIFIERSCOPE"))
            {
                return this.IdentifierScope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USAGESCENARIO_USAGEMODEL"))
            {
                return this._usageScenario_UsageModel;
            }
            if ((feature == "USERDATA_USAGEMODEL"))
            {
                return this._userData_UsageModel;
            }
            if ((feature == "REFERENCES"))
            {
                return this._references;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "IDENTIFIERSCOPE"))
            {
                this.IdentifierScope = ((IdentifierScope)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public virtual IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//usagemodel//UsageModel/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UsageModel class
        /// </summary>
        public class UsageModelChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UsageModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UsageModelChildrenCollection(UsageModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UsageScenario_UsageModel.Count);
                    count = (count + this._parent.UserData_UsageModel.Count);
                    count = (count + this._parent.References.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UsageScenario_UsageModel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.UserData_UsageModel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UsageScenario_UsageModel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.UserData_UsageModel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IUsageScenario usageScenario_UsageModelCasted = item.As<IUsageScenario>();
                if ((usageScenario_UsageModelCasted != null))
                {
                    this._parent.UsageScenario_UsageModel.Add(usageScenario_UsageModelCasted);
                }
                IUserData userData_UsageModelCasted = item.As<IUserData>();
                if ((userData_UsageModelCasted != null))
                {
                    this._parent.UserData_UsageModel.Add(userData_UsageModelCasted);
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UsageScenario_UsageModel.Clear();
                this._parent.UserData_UsageModel.Clear();
                this._parent.References.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UsageScenario_UsageModel.Contains(item))
                {
                    return true;
                }
                if (this._parent.UserData_UsageModel.Contains(item))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> usageScenario_UsageModelEnumerator = this._parent.UsageScenario_UsageModel.GetEnumerator();
                try
                {
                    for (
                    ; usageScenario_UsageModelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = usageScenario_UsageModelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    usageScenario_UsageModelEnumerator.Dispose();
                }
                IEnumerator<IModelElement> userData_UsageModelEnumerator = this._parent.UserData_UsageModel.GetEnumerator();
                try
                {
                    for (
                    ; userData_UsageModelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userData_UsageModelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userData_UsageModelEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IUsageScenario usageScenarioItem = item.As<IUsageScenario>();
                if (((usageScenarioItem != null) 
                            && this._parent.UsageScenario_UsageModel.Remove(usageScenarioItem)))
                {
                    return true;
                }
                IUserData userDataItem = item.As<IUserData>();
                if (((userDataItem != null) 
                            && this._parent.UserData_UsageModel.Remove(userDataItem)))
                {
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UsageScenario_UsageModel).Concat(this._parent.UserData_UsageModel).Concat(this._parent.References).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UsageModel class
        /// </summary>
        public class UsageModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UsageModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UsageModelReferencedElementsCollection(UsageModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UsageScenario_UsageModel.Count);
                    count = (count + this._parent.UserData_UsageModel.Count);
                    count = (count + this._parent.References.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UsageScenario_UsageModel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.UserData_UsageModel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UsageScenario_UsageModel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.UserData_UsageModel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.References.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IUsageScenario usageScenario_UsageModelCasted = item.As<IUsageScenario>();
                if ((usageScenario_UsageModelCasted != null))
                {
                    this._parent.UsageScenario_UsageModel.Add(usageScenario_UsageModelCasted);
                }
                IUserData userData_UsageModelCasted = item.As<IUserData>();
                if ((userData_UsageModelCasted != null))
                {
                    this._parent.UserData_UsageModel.Add(userData_UsageModelCasted);
                }
                IReference referencesCasted = item.As<IReference>();
                if ((referencesCasted != null))
                {
                    this._parent.References.Add(referencesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UsageScenario_UsageModel.Clear();
                this._parent.UserData_UsageModel.Clear();
                this._parent.References.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UsageScenario_UsageModel.Contains(item))
                {
                    return true;
                }
                if (this._parent.UserData_UsageModel.Contains(item))
                {
                    return true;
                }
                if (this._parent.References.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> usageScenario_UsageModelEnumerator = this._parent.UsageScenario_UsageModel.GetEnumerator();
                try
                {
                    for (
                    ; usageScenario_UsageModelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = usageScenario_UsageModelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    usageScenario_UsageModelEnumerator.Dispose();
                }
                IEnumerator<IModelElement> userData_UsageModelEnumerator = this._parent.UserData_UsageModel.GetEnumerator();
                try
                {
                    for (
                    ; userData_UsageModelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userData_UsageModelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userData_UsageModelEnumerator.Dispose();
                }
                IEnumerator<IModelElement> referencesEnumerator = this._parent.References.GetEnumerator();
                try
                {
                    for (
                    ; referencesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = referencesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    referencesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IUsageScenario usageScenarioItem = item.As<IUsageScenario>();
                if (((usageScenarioItem != null) 
                            && this._parent.UsageScenario_UsageModel.Remove(usageScenarioItem)))
                {
                    return true;
                }
                IUserData userDataItem = item.As<IUserData>();
                if (((userDataItem != null) 
                            && this._parent.UserData_UsageModel.Remove(userDataItem)))
                {
                    return true;
                }
                IReference referenceItem = item.As<IReference>();
                if (((referenceItem != null) 
                            && this._parent.References.Remove(referenceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UsageScenario_UsageModel).Concat(this._parent.UserData_UsageModel).Concat(this._parent.References).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IsAbstract property
        /// </summary>
        private sealed class IsAbstractProxy : ModelPropertyChange<IClass, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAbstractProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAbstract;
                }
                set
                {
                    this.ModelElement.IsAbstract = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IsAbstractChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdentifierScope property
        /// </summary>
        private sealed class IdentifierScopeProxy : ModelPropertyChange<IClass, IdentifierScope>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierScopeProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IdentifierScope Value
            {
                get
                {
                    return this.ModelElement.IdentifierScope;
                }
                set
                {
                    this.ModelElement.IdentifierScope = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierScopeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InstanceOf property
        /// </summary>
        private sealed class InstanceOfProxy : ModelPropertyChange<IClass, IClass>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstanceOfProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClass Value
            {
                get
                {
                    return this.ModelElement.InstanceOf;
                }
                set
                {
                    this.ModelElement.InstanceOf = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InstanceOfChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Identifier property
        /// </summary>
        private sealed class IdentifierProxy : ModelPropertyChange<IClass, IAttribute>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdentifierProxy(IClass modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAttribute Value
            {
                get
                {
                    return this.ModelElement.Identifier;
                }
                set
                {
                    this.ModelElement.Identifier = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IdentifierChanged -= handler;
            }
        }
    }
}

