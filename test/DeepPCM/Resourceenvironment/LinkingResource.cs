//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core;
using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.Identifier;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Resourceenvironment
{
    
    
    /// <summary>
    /// The default implementation of the LinkingResource class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/ResourceEnvironment/1.0")]
    [XmlNamespacePrefixAttribute("resourceenvironment")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//resourceenvironment//LinkingResource/")]
    [DebuggerDisplayAttribute("LinkingResource {Id}")]
    public class LinkingResource : Metamodel.DeepPCM.Core.Entity.Entity, ILinkingResource, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ConnectedResourceContainers_LinkingResource property
        /// </summary>
        private ObservableAssociationList<IResourceContainer> _connectedResourceContainers_LinkingResource;
        
        /// <summary>
        /// The backing field for the CommunicationLinkResourceSpecifications_LinkingResource property
        /// </summary>
        private ICommunicationLinkResourceSpecification _communicationLinkResourceSpecifications_LinkingResource;
        
        private static IClass _classInstance;
        
        public LinkingResource()
        {
            this._connectedResourceContainers_LinkingResource = new ObservableAssociationList<IResourceContainer>();
            this._connectedResourceContainers_LinkingResource.CollectionChanging += this.ConnectedResourceContainers_LinkingResourceCollectionChanging;
            this._connectedResourceContainers_LinkingResource.CollectionChanged += this.ConnectedResourceContainers_LinkingResourceCollectionChanged;
        }
        
        /// <summary>
        /// The connectedResourceContainers_LinkingResource property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("connectedResourceContainers_LinkingResource")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IResourceContainer> ConnectedResourceContainers_LinkingResource
        {
            get
            {
                return this._connectedResourceContainers_LinkingResource;
            }
        }
        
        /// <summary>
        /// The communicationLinkResourceSpecifications_LinkingResource property
        /// </summary>
        [XmlElementNameAttribute("communicationLinkResourceSpecifications_LinkingResource")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("linkingResource_CommunicationLinkResourceSpecification")]
        public virtual ICommunicationLinkResourceSpecification CommunicationLinkResourceSpecifications_LinkingResource
        {
            get
            {
                return this._communicationLinkResourceSpecifications_LinkingResource;
            }
            set
            {
                if ((this._communicationLinkResourceSpecifications_LinkingResource != value))
                {
                    ICommunicationLinkResourceSpecification old = this._communicationLinkResourceSpecifications_LinkingResource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommunicationLinkResourceSpecifications_LinkingResourceChanging(e);
                    this.OnPropertyChanging("CommunicationLinkResourceSpecifications_LinkingResource", e);
                    this._communicationLinkResourceSpecifications_LinkingResource = value;
                    if ((old != null))
                    {
                        old.LinkingResource_CommunicationLinkResourceSpecification = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetCommunicationLinkResourceSpecifications_LinkingResource;
                    }
                    if ((value != null))
                    {
                        value.LinkingResource_CommunicationLinkResourceSpecification = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetCommunicationLinkResourceSpecifications_LinkingResource;
                    }
                    this.OnCommunicationLinkResourceSpecifications_LinkingResourceChanged(e);
                    this.OnPropertyChanged("CommunicationLinkResourceSpecifications_LinkingResource", e);
                }
            }
        }
        
        /// <summary>
        /// The resourceEnvironment_LinkingResource property
        /// </summary>
        [XmlElementNameAttribute("resourceEnvironment_LinkingResource")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("linkingResources__ResourceEnvironment")]
        public virtual IResourceEnvironment ResourceEnvironment_LinkingResource
        {
            get
            {
                return ModelHelper.CastAs<IResourceEnvironment>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new LinkingResourceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LinkingResourceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//resourceenvironment//LinkingResource/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CommunicationLinkResourceSpecifications_LinkingResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommunicationLinkResourceSpecifications_LinkingResourceChanging;
        
        /// <summary>
        /// Gets fired when the CommunicationLinkResourceSpecifications_LinkingResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommunicationLinkResourceSpecifications_LinkingResourceChanged;
        
        /// <summary>
        /// Gets fired before the ResourceEnvironment_LinkingResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceEnvironment_LinkingResourceChanging;
        
        /// <summary>
        /// Gets fired when the ResourceEnvironment_LinkingResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceEnvironment_LinkingResourceChanged;
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConnectedResourceContainers_LinkingResource property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectedResourceContainers_LinkingResourceCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConnectedResourceContainers_LinkingResource", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConnectedResourceContainers_LinkingResource property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectedResourceContainers_LinkingResourceCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConnectedResourceContainers_LinkingResource", e);
        }
        
        /// <summary>
        /// Raises the CommunicationLinkResourceSpecifications_LinkingResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationLinkResourceSpecifications_LinkingResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommunicationLinkResourceSpecifications_LinkingResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommunicationLinkResourceSpecifications_LinkingResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommunicationLinkResourceSpecifications_LinkingResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommunicationLinkResourceSpecifications_LinkingResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CommunicationLinkResourceSpecifications_LinkingResource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCommunicationLinkResourceSpecifications_LinkingResource(object sender, System.EventArgs eventArgs)
        {
            this.CommunicationLinkResourceSpecifications_LinkingResource = null;
        }
        
        /// <summary>
        /// Raises the ResourceEnvironment_LinkingResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceEnvironment_LinkingResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceEnvironment_LinkingResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            IResourceEnvironment oldResourceEnvironment_LinkingResource = ModelHelper.CastAs<IResourceEnvironment>(oldParent);
            IResourceEnvironment newResourceEnvironment_LinkingResource = ModelHelper.CastAs<IResourceEnvironment>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceEnvironment_LinkingResource, newResourceEnvironment_LinkingResource);
            this.OnResourceEnvironment_LinkingResourceChanging(e);
            this.OnPropertyChanging("ResourceEnvironment_LinkingResource");
        }
        
        /// <summary>
        /// Raises the ResourceEnvironment_LinkingResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceEnvironment_LinkingResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceEnvironment_LinkingResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IResourceEnvironment oldResourceEnvironment_LinkingResource = ModelHelper.CastAs<IResourceEnvironment>(oldParent);
            IResourceEnvironment newResourceEnvironment_LinkingResource = ModelHelper.CastAs<IResourceEnvironment>(newParent);
            if ((oldResourceEnvironment_LinkingResource != null))
            {
                oldResourceEnvironment_LinkingResource.LinkingResources__ResourceEnvironment.Remove(this);
            }
            if ((newResourceEnvironment_LinkingResource != null))
            {
                newResourceEnvironment_LinkingResource.LinkingResources__ResourceEnvironment.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldResourceEnvironment_LinkingResource, newResourceEnvironment_LinkingResource);
            this.OnResourceEnvironment_LinkingResourceChanged(e);
            this.OnPropertyChanged("ResourceEnvironment_LinkingResource", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.CommunicationLinkResourceSpecifications_LinkingResource))
            {
                return ModelHelper.CreatePath("CommunicationLinkResourceSpecifications_LinkingResource");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "COMMUNICATIONLINKRESOURCESPECIFICATIONS_LINKINGRESOURCE"))
            {
                return this.CommunicationLinkResourceSpecifications_LinkingResource;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONNECTEDRESOURCECONTAINERS_LINKINGRESOURCE"))
            {
                return this._connectedResourceContainers_LinkingResource;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMMUNICATIONLINKRESOURCESPECIFICATIONS_LINKINGRESOURCE"))
            {
                this.CommunicationLinkResourceSpecifications_LinkingResource = ((ICommunicationLinkResourceSpecification)(value));
                return;
            }
            if ((feature == "RESOURCEENVIRONMENT_LINKINGRESOURCE"))
            {
                this.ResourceEnvironment_LinkingResource = ((IResourceEnvironment)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "COMMUNICATIONLINKRESOURCESPECIFICATIONS_LINKINGRESOURCE"))
            {
                return new CommunicationLinkResourceSpecifications_LinkingResourceProxy(this);
            }
            if ((attribute == "RESOURCEENVIRONMENT_LINKINGRESOURCE"))
            {
                return new ResourceEnvironment_LinkingResourceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "COMMUNICATIONLINKRESOURCESPECIFICATIONS_LINKINGRESOURCE"))
            {
                return new CommunicationLinkResourceSpecifications_LinkingResourceProxy(this);
            }
            if ((reference == "RESOURCEENVIRONMENT_LINKINGRESOURCE"))
            {
                return new ResourceEnvironment_LinkingResourceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//resourceenvironment//LinkingResource/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LinkingResource class
        /// </summary>
        public class LinkingResourceChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LinkingResource _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LinkingResourceChildrenCollection(LinkingResource parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CommunicationLinkResourceSpecifications_LinkingResourceChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CommunicationLinkResourceSpecifications_LinkingResourceChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource == null))
                {
                    ICommunicationLinkResourceSpecification communicationLinkResourceSpecifications_LinkingResourceCasted = item.As<ICommunicationLinkResourceSpecification>();
                    if ((communicationLinkResourceSpecifications_LinkingResourceCasted != null))
                    {
                        this._parent.CommunicationLinkResourceSpecifications_LinkingResource = communicationLinkResourceSpecifications_LinkingResourceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CommunicationLinkResourceSpecifications_LinkingResource = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CommunicationLinkResourceSpecifications_LinkingResource))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource != null))
                {
                    array[arrayIndex] = this._parent.CommunicationLinkResourceSpecifications_LinkingResource;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource == item))
                {
                    this._parent.CommunicationLinkResourceSpecifications_LinkingResource = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CommunicationLinkResourceSpecifications_LinkingResource).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LinkingResource class
        /// </summary>
        public class LinkingResourceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LinkingResource _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LinkingResourceReferencedElementsCollection(LinkingResource parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConnectedResourceContainers_LinkingResource.Count);
                    if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ResourceEnvironment_LinkingResource != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConnectedResourceContainers_LinkingResource.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CommunicationLinkResourceSpecifications_LinkingResourceChanged += this.PropagateValueChanges;
                this._parent.ResourceEnvironment_LinkingResourceChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConnectedResourceContainers_LinkingResource.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CommunicationLinkResourceSpecifications_LinkingResourceChanged -= this.PropagateValueChanges;
                this._parent.ResourceEnvironment_LinkingResourceChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IResourceContainer connectedResourceContainers_LinkingResourceCasted = item.As<IResourceContainer>();
                if ((connectedResourceContainers_LinkingResourceCasted != null))
                {
                    this._parent.ConnectedResourceContainers_LinkingResource.Add(connectedResourceContainers_LinkingResourceCasted);
                }
                if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource == null))
                {
                    ICommunicationLinkResourceSpecification communicationLinkResourceSpecifications_LinkingResourceCasted = item.As<ICommunicationLinkResourceSpecification>();
                    if ((communicationLinkResourceSpecifications_LinkingResourceCasted != null))
                    {
                        this._parent.CommunicationLinkResourceSpecifications_LinkingResource = communicationLinkResourceSpecifications_LinkingResourceCasted;
                        return;
                    }
                }
                if ((this._parent.ResourceEnvironment_LinkingResource == null))
                {
                    IResourceEnvironment resourceEnvironment_LinkingResourceCasted = item.As<IResourceEnvironment>();
                    if ((resourceEnvironment_LinkingResourceCasted != null))
                    {
                        this._parent.ResourceEnvironment_LinkingResource = resourceEnvironment_LinkingResourceCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConnectedResourceContainers_LinkingResource.Clear();
                this._parent.CommunicationLinkResourceSpecifications_LinkingResource = null;
                this._parent.ResourceEnvironment_LinkingResource = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConnectedResourceContainers_LinkingResource.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CommunicationLinkResourceSpecifications_LinkingResource))
                {
                    return true;
                }
                if ((item == this._parent.ResourceEnvironment_LinkingResource))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> connectedResourceContainers_LinkingResourceEnumerator = this._parent.ConnectedResourceContainers_LinkingResource.GetEnumerator();
                try
                {
                    for (
                    ; connectedResourceContainers_LinkingResourceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectedResourceContainers_LinkingResourceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectedResourceContainers_LinkingResourceEnumerator.Dispose();
                }
                if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource != null))
                {
                    array[arrayIndex] = this._parent.CommunicationLinkResourceSpecifications_LinkingResource;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ResourceEnvironment_LinkingResource != null))
                {
                    array[arrayIndex] = this._parent.ResourceEnvironment_LinkingResource;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IResourceContainer resourceContainerItem = item.As<IResourceContainer>();
                if (((resourceContainerItem != null) 
                            && this._parent.ConnectedResourceContainers_LinkingResource.Remove(resourceContainerItem)))
                {
                    return true;
                }
                if ((this._parent.CommunicationLinkResourceSpecifications_LinkingResource == item))
                {
                    this._parent.CommunicationLinkResourceSpecifications_LinkingResource = null;
                    return true;
                }
                if ((this._parent.ResourceEnvironment_LinkingResource == item))
                {
                    this._parent.ResourceEnvironment_LinkingResource = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConnectedResourceContainers_LinkingResource).Concat(this._parent.CommunicationLinkResourceSpecifications_LinkingResource).Concat(this._parent.ResourceEnvironment_LinkingResource).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the communicationLinkResourceSpecifications_LinkingResource property
        /// </summary>
        private sealed class CommunicationLinkResourceSpecifications_LinkingResourceProxy : ModelPropertyChange<ILinkingResource, ICommunicationLinkResourceSpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommunicationLinkResourceSpecifications_LinkingResourceProxy(ILinkingResource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICommunicationLinkResourceSpecification Value
            {
                get
                {
                    return this.ModelElement.CommunicationLinkResourceSpecifications_LinkingResource;
                }
                set
                {
                    this.ModelElement.CommunicationLinkResourceSpecifications_LinkingResource = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommunicationLinkResourceSpecifications_LinkingResourceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommunicationLinkResourceSpecifications_LinkingResourceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceEnvironment_LinkingResource property
        /// </summary>
        private sealed class ResourceEnvironment_LinkingResourceProxy : ModelPropertyChange<ILinkingResource, IResourceEnvironment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceEnvironment_LinkingResourceProxy(ILinkingResource modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IResourceEnvironment Value
            {
                get
                {
                    return this.ModelElement.ResourceEnvironment_LinkingResource;
                }
                set
                {
                    this.ModelElement.ResourceEnvironment_LinkingResource = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceEnvironment_LinkingResourceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ResourceEnvironment_LinkingResourceChanged -= handler;
            }
        }
    }
}

