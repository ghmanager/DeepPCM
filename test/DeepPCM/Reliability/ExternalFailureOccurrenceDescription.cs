//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using Metamodel.DeepPCM.Core.Entity;
using Metamodel.DeepPCM.Qosannotations.Qos_reliability;
using Metamodel.DeepPCM.Repository;
using Metamodel.DeepPCM.Resourcetype;
using Metamodel.DeepPCM.Seff;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace Metamodel.DeepPCM.Reliability
{
    
    
    /// <summary>
    /// The default implementation of the ExternalFailureOccurrenceDescription class
    /// </summary>
    [XmlNamespaceAttribute("http://github.com/ghmanager/DeepPCM/Reliability/1.0")]
    [XmlNamespacePrefixAttribute("reliability")]
    [ModelRepresentationClassAttribute("http://github.com/ghmanager/DeepPCM/1.0#//reliability//ExternalFailureOccurrenceD" +
        "escription/")]
    public class ExternalFailureOccurrenceDescription : FailureOccurrenceDescription, IExternalFailureOccurrenceDescription, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FailureType__ExternalFailureOccurrenceDescription property
        /// </summary>
        private IFailureType _failureType__ExternalFailureOccurrenceDescription;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription property
        /// </summary>
        [XmlElementNameAttribute("specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("externalFailureOccurrenceDescriptions__SpecifiedReliabilityAnnotation")]
        public virtual ISpecifiedReliabilityAnnotation SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription
        {
            get
            {
                return ModelHelper.CastAs<ISpecifiedReliabilityAnnotation>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The failureType__ExternalFailureOccurrenceDescription property
        /// </summary>
        [XmlElementNameAttribute("failureType__ExternalFailureOccurrenceDescription")]
        [XmlAttributeAttribute(true)]
        public virtual IFailureType FailureType__ExternalFailureOccurrenceDescription
        {
            get
            {
                return this._failureType__ExternalFailureOccurrenceDescription;
            }
            set
            {
                if ((this._failureType__ExternalFailureOccurrenceDescription != value))
                {
                    IFailureType old = this._failureType__ExternalFailureOccurrenceDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailureType__ExternalFailureOccurrenceDescriptionChanging(e);
                    this.OnPropertyChanging("FailureType__ExternalFailureOccurrenceDescription", e);
                    this._failureType__ExternalFailureOccurrenceDescription = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFailureType__ExternalFailureOccurrenceDescription;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFailureType__ExternalFailureOccurrenceDescription;
                    }
                    this.OnFailureType__ExternalFailureOccurrenceDescriptionChanged(e);
                    this.OnPropertyChanged("FailureType__ExternalFailureOccurrenceDescription", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ExternalFailureOccurrenceDescriptionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//reliability//ExternalFailureOccurrenceD" +
                            "escription/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the FailureType__ExternalFailureOccurrenceDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureType__ExternalFailureOccurrenceDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the FailureType__ExternalFailureOccurrenceDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureType__ExternalFailureOccurrenceDescriptionChanged;
        
        /// <summary>
        /// Raises the SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element is about to change
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanging(IModelElement newParent, IModelElement oldParent)
        {
            ISpecifiedReliabilityAnnotation oldSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = ModelHelper.CastAs<ISpecifiedReliabilityAnnotation>(oldParent);
            ISpecifiedReliabilityAnnotation newSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = ModelHelper.CastAs<ISpecifiedReliabilityAnnotation>(newParent);
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription, newSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription);
            this.OnSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanging(e);
            this.OnPropertyChanging("SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription");
        }
        
        /// <summary>
        /// Raises the SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            ISpecifiedReliabilityAnnotation oldSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = ModelHelper.CastAs<ISpecifiedReliabilityAnnotation>(oldParent);
            ISpecifiedReliabilityAnnotation newSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = ModelHelper.CastAs<ISpecifiedReliabilityAnnotation>(newParent);
            if ((oldSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription != null))
            {
                oldSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription.ExternalFailureOccurrenceDescriptions__SpecifiedReliabilityAnnotation.Remove(this);
            }
            if ((newSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription != null))
            {
                newSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription.ExternalFailureOccurrenceDescriptions__SpecifiedReliabilityAnnotation.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription, newSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription);
            this.OnSpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged(e);
            this.OnPropertyChanged("SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription", e);
            base.OnParentChanged(newParent, oldParent);
        }
        
        /// <summary>
        /// Raises the FailureType__ExternalFailureOccurrenceDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureType__ExternalFailureOccurrenceDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureType__ExternalFailureOccurrenceDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailureType__ExternalFailureOccurrenceDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureType__ExternalFailureOccurrenceDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureType__ExternalFailureOccurrenceDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FailureType__ExternalFailureOccurrenceDescription property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFailureType__ExternalFailureOccurrenceDescription(object sender, System.EventArgs eventArgs)
        {
            this.FailureType__ExternalFailureOccurrenceDescription = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPECIFIEDRELIABILITYANNOTATION__EXTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                this.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = ((ISpecifiedReliabilityAnnotation)(value));
                return;
            }
            if ((feature == "FAILURETYPE__EXTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                this.FailureType__ExternalFailureOccurrenceDescription = ((IFailureType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SPECIFIEDRELIABILITYANNOTATION__EXTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionProxy(this);
            }
            if ((attribute == "FAILURETYPE__EXTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new FailureType__ExternalFailureOccurrenceDescriptionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SPECIFIEDRELIABILITYANNOTATION__EXTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionProxy(this);
            }
            if ((reference == "FAILURETYPE__EXTERNALFAILUREOCCURRENCEDESCRIPTION"))
            {
                return new FailureType__ExternalFailureOccurrenceDescriptionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://github.com/ghmanager/DeepPCM/1.0#//reliability//ExternalFailureOccurrenceD" +
                        "escription/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ExternalFailureOccurrenceDescription class
        /// </summary>
        public class ExternalFailureOccurrenceDescriptionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ExternalFailureOccurrenceDescription _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ExternalFailureOccurrenceDescriptionReferencedElementsCollection(ExternalFailureOccurrenceDescription parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FailureType__ExternalFailureOccurrenceDescription != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged += this.PropagateValueChanges;
                this._parent.FailureType__ExternalFailureOccurrenceDescriptionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged -= this.PropagateValueChanges;
                this._parent.FailureType__ExternalFailureOccurrenceDescriptionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription == null))
                {
                    ISpecifiedReliabilityAnnotation specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionCasted = item.As<ISpecifiedReliabilityAnnotation>();
                    if ((specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionCasted != null))
                    {
                        this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionCasted;
                        return;
                    }
                }
                if ((this._parent.FailureType__ExternalFailureOccurrenceDescription == null))
                {
                    IFailureType failureType__ExternalFailureOccurrenceDescriptionCasted = item.As<IFailureType>();
                    if ((failureType__ExternalFailureOccurrenceDescriptionCasted != null))
                    {
                        this._parent.FailureType__ExternalFailureOccurrenceDescription = failureType__ExternalFailureOccurrenceDescriptionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = null;
                this._parent.FailureType__ExternalFailureOccurrenceDescription = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription))
                {
                    return true;
                }
                if ((item == this._parent.FailureType__ExternalFailureOccurrenceDescription))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription != null))
                {
                    array[arrayIndex] = this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FailureType__ExternalFailureOccurrenceDescription != null))
                {
                    array[arrayIndex] = this._parent.FailureType__ExternalFailureOccurrenceDescription;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription == item))
                {
                    this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = null;
                    return true;
                }
                if ((this._parent.FailureType__ExternalFailureOccurrenceDescription == item))
                {
                    this._parent.FailureType__ExternalFailureOccurrenceDescription = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription).Concat(this._parent.FailureType__ExternalFailureOccurrenceDescription).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription property
        /// </summary>
        private sealed class SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionProxy : ModelPropertyChange<IExternalFailureOccurrenceDescription, ISpecifiedReliabilityAnnotation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionProxy(IExternalFailureOccurrenceDescription modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISpecifiedReliabilityAnnotation Value
            {
                get
                {
                    return this.ModelElement.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription;
                }
                set
                {
                    this.ModelElement.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescription = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpecifiedReliabilityAnnotation__ExternalFailureOccurrenceDescriptionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the failureType__ExternalFailureOccurrenceDescription property
        /// </summary>
        private sealed class FailureType__ExternalFailureOccurrenceDescriptionProxy : ModelPropertyChange<IExternalFailureOccurrenceDescription, IFailureType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailureType__ExternalFailureOccurrenceDescriptionProxy(IExternalFailureOccurrenceDescription modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFailureType Value
            {
                get
                {
                    return this.ModelElement.FailureType__ExternalFailureOccurrenceDescription;
                }
                set
                {
                    this.ModelElement.FailureType__ExternalFailureOccurrenceDescription = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailureType__ExternalFailureOccurrenceDescriptionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FailureType__ExternalFailureOccurrenceDescriptionChanged -= handler;
            }
        }
    }
}

