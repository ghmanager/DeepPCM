//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Protocol;
using GeneratedCode.Pcm.Reliability;
using GeneratedCode.Pcm.Resourcetype;
using GeneratedCode.Pcm.Seff;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Repository
{
    
    
    /// <summary>
    /// The default implementation of the OperationRequiredRole class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Repository/5.0")]
    [XmlNamespacePrefixAttribute("repository")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository//OperationRequiredR" +
        "ole/")]
    [DebuggerDisplayAttribute("OperationRequiredRole {Id}")]
    public class OperationRequiredRole : RequiredRole, IOperationRequiredRole, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RequiredInterface__OperationRequiredRole property
        /// </summary>
        private IOperationInterface _requiredInterface__OperationRequiredRole;
        
        /// <summary>
        /// The requiredInterface__OperationRequiredRole property
        /// </summary>
        [XmlElementNameAttribute("requiredInterface__OperationRequiredRole")]
        [XmlAttributeAttribute(true)]
        public virtual IOperationInterface RequiredInterface__OperationRequiredRole
        {
            get
            {
                return this._requiredInterface__OperationRequiredRole;
            }
            set
            {
                if ((this._requiredInterface__OperationRequiredRole != value))
                {
                    IOperationInterface old = this._requiredInterface__OperationRequiredRole;
                    this._requiredInterface__OperationRequiredRole = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRequiredInterface__OperationRequiredRole;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRequiredInterface__OperationRequiredRole;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequiredInterface__OperationRequiredRoleChanged(e);
                    this.OnPropertyChanged("RequiredInterface__OperationRequiredRole", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationRequiredRoleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository//OperationRequiredR" +
                        "ole/");
            }
        }
        
        /// <summary>
        /// Gets fired when the RequiredInterface__OperationRequiredRole property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RequiredInterface__OperationRequiredRoleChanged;
        
        /// <summary>
        /// Raises the RequiredInterface__OperationRequiredRoleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredInterface__OperationRequiredRoleChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RequiredInterface__OperationRequiredRoleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RequiredInterface__OperationRequiredRole property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequiredInterface__OperationRequiredRole(object sender, EventArgs eventArgs)
        {
            this.RequiredInterface__OperationRequiredRole = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REQUIREDINTERFACE__OPERATIONREQUIREDROLE"))
            {
                this.RequiredInterface__OperationRequiredRole = ((IOperationInterface)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "REQUIREDINTERFACE__OPERATIONREQUIREDROLE"))
            {
                return new RequiredInterface__OperationRequiredRoleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "REQUIREDINTERFACE__OPERATIONREQUIREDROLE"))
            {
                return new RequiredInterface__OperationRequiredRoleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//repository//OperationRequiredR" +
                    "ole/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OperationRequiredRole class
        /// </summary>
        public class OperationRequiredRoleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OperationRequiredRole _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationRequiredRoleReferencedElementsCollection(OperationRequiredRole parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RequiredInterface__OperationRequiredRole != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RequiredInterface__OperationRequiredRoleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RequiredInterface__OperationRequiredRoleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RequiredInterface__OperationRequiredRole == null))
                {
                    IOperationInterface requiredInterface__OperationRequiredRoleCasted = item.As<IOperationInterface>();
                    if ((requiredInterface__OperationRequiredRoleCasted != null))
                    {
                        this._parent.RequiredInterface__OperationRequiredRole = requiredInterface__OperationRequiredRoleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RequiredInterface__OperationRequiredRole = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RequiredInterface__OperationRequiredRole))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RequiredInterface__OperationRequiredRole != null))
                {
                    array[arrayIndex] = this._parent.RequiredInterface__OperationRequiredRole;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RequiredInterface__OperationRequiredRole == item))
                {
                    this._parent.RequiredInterface__OperationRequiredRole = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RequiredInterface__OperationRequiredRole).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requiredInterface__OperationRequiredRole property
        /// </summary>
        private sealed class RequiredInterface__OperationRequiredRoleProxy : ModelPropertyChange<IOperationRequiredRole, IOperationInterface>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequiredInterface__OperationRequiredRoleProxy(IOperationRequiredRole modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperationInterface Value
            {
                get
                {
                    return this.ModelElement.RequiredInterface__OperationRequiredRole;
                }
                set
                {
                    this.ModelElement.RequiredInterface__OperationRequiredRole = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredInterface__OperationRequiredRoleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredInterface__OperationRequiredRoleChanged -= handler;
            }
        }
    }
}

