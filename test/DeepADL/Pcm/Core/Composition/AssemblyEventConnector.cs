//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the AssemblyEventConnector class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//AssemblyEve" +
        "ntConnector/")]
    [DebuggerDisplayAttribute("AssemblyEventConnector {Id}")]
    public class AssemblyEventConnector : Connector, IAssemblyEventConnector, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SinkRole__AssemblyEventConnector property
        /// </summary>
        private ISinkRole _sinkRole__AssemblyEventConnector;
        
        /// <summary>
        /// The backing field for the SourceRole__AssemblyEventConnector property
        /// </summary>
        private ISourceRole _sourceRole__AssemblyEventConnector;
        
        /// <summary>
        /// The backing field for the SinkAssemblyContext__AssemblyEventConnector property
        /// </summary>
        private IAssemblyContext _sinkAssemblyContext__AssemblyEventConnector;
        
        /// <summary>
        /// The backing field for the SourceAssemblyContext__AssemblyEventConnector property
        /// </summary>
        private IAssemblyContext _sourceAssemblyContext__AssemblyEventConnector;
        
        /// <summary>
        /// The backing field for the FilterCondition__AssemblyEventConnector property
        /// </summary>
        private IPCMRandomVariable _filterCondition__AssemblyEventConnector;
        
        /// <summary>
        /// The sinkRole__AssemblyEventConnector property
        /// </summary>
        [XmlElementNameAttribute("sinkRole__AssemblyEventConnector")]
        [XmlAttributeAttribute(true)]
        public virtual ISinkRole SinkRole__AssemblyEventConnector
        {
            get
            {
                return this._sinkRole__AssemblyEventConnector;
            }
            set
            {
                if ((this._sinkRole__AssemblyEventConnector != value))
                {
                    ISinkRole old = this._sinkRole__AssemblyEventConnector;
                    this._sinkRole__AssemblyEventConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSinkRole__AssemblyEventConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSinkRole__AssemblyEventConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSinkRole__AssemblyEventConnectorChanged(e);
                    this.OnPropertyChanged("SinkRole__AssemblyEventConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The sourceRole__AssemblyEventConnector property
        /// </summary>
        [XmlElementNameAttribute("sourceRole__AssemblyEventConnector")]
        [XmlAttributeAttribute(true)]
        public virtual ISourceRole SourceRole__AssemblyEventConnector
        {
            get
            {
                return this._sourceRole__AssemblyEventConnector;
            }
            set
            {
                if ((this._sourceRole__AssemblyEventConnector != value))
                {
                    ISourceRole old = this._sourceRole__AssemblyEventConnector;
                    this._sourceRole__AssemblyEventConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSourceRole__AssemblyEventConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSourceRole__AssemblyEventConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceRole__AssemblyEventConnectorChanged(e);
                    this.OnPropertyChanged("SourceRole__AssemblyEventConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The sinkAssemblyContext__AssemblyEventConnector property
        /// </summary>
        [XmlElementNameAttribute("sinkAssemblyContext__AssemblyEventConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext SinkAssemblyContext__AssemblyEventConnector
        {
            get
            {
                return this._sinkAssemblyContext__AssemblyEventConnector;
            }
            set
            {
                if ((this._sinkAssemblyContext__AssemblyEventConnector != value))
                {
                    IAssemblyContext old = this._sinkAssemblyContext__AssemblyEventConnector;
                    this._sinkAssemblyContext__AssemblyEventConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSinkAssemblyContext__AssemblyEventConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSinkAssemblyContext__AssemblyEventConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSinkAssemblyContext__AssemblyEventConnectorChanged(e);
                    this.OnPropertyChanged("SinkAssemblyContext__AssemblyEventConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The sourceAssemblyContext__AssemblyEventConnector property
        /// </summary>
        [XmlElementNameAttribute("sourceAssemblyContext__AssemblyEventConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext SourceAssemblyContext__AssemblyEventConnector
        {
            get
            {
                return this._sourceAssemblyContext__AssemblyEventConnector;
            }
            set
            {
                if ((this._sourceAssemblyContext__AssemblyEventConnector != value))
                {
                    IAssemblyContext old = this._sourceAssemblyContext__AssemblyEventConnector;
                    this._sourceAssemblyContext__AssemblyEventConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSourceAssemblyContext__AssemblyEventConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSourceAssemblyContext__AssemblyEventConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSourceAssemblyContext__AssemblyEventConnectorChanged(e);
                    this.OnPropertyChanged("SourceAssemblyContext__AssemblyEventConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The filterCondition__AssemblyEventConnector property
        /// </summary>
        [XmlElementNameAttribute("filterCondition__AssemblyEventConnector")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("assemblyEventConnector__FilterCondition")]
        public virtual IPCMRandomVariable FilterCondition__AssemblyEventConnector
        {
            get
            {
                return this._filterCondition__AssemblyEventConnector;
            }
            set
            {
                if ((this._filterCondition__AssemblyEventConnector != value))
                {
                    IPCMRandomVariable old = this._filterCondition__AssemblyEventConnector;
                    this._filterCondition__AssemblyEventConnector = value;
                    if ((old != null))
                    {
                        old.AssemblyEventConnector__FilterCondition = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetFilterCondition__AssemblyEventConnector;
                    }
                    if ((value != null))
                    {
                        value.AssemblyEventConnector__FilterCondition = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetFilterCondition__AssemblyEventConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFilterCondition__AssemblyEventConnectorChanged(e);
                    this.OnPropertyChanged("FilterCondition__AssemblyEventConnector", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new AssemblyEventConnectorChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssemblyEventConnectorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//AssemblyEve" +
                        "ntConnector/");
            }
        }
        
        /// <summary>
        /// Gets fired when the SinkRole__AssemblyEventConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SinkRole__AssemblyEventConnectorChanged;
        
        /// <summary>
        /// Gets fired when the SourceRole__AssemblyEventConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SourceRole__AssemblyEventConnectorChanged;
        
        /// <summary>
        /// Gets fired when the SinkAssemblyContext__AssemblyEventConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SinkAssemblyContext__AssemblyEventConnectorChanged;
        
        /// <summary>
        /// Gets fired when the SourceAssemblyContext__AssemblyEventConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SourceAssemblyContext__AssemblyEventConnectorChanged;
        
        /// <summary>
        /// Gets fired when the FilterCondition__AssemblyEventConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FilterCondition__AssemblyEventConnectorChanged;
        
        /// <summary>
        /// Raises the SinkRole__AssemblyEventConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSinkRole__AssemblyEventConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SinkRole__AssemblyEventConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SinkRole__AssemblyEventConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSinkRole__AssemblyEventConnector(object sender, EventArgs eventArgs)
        {
            this.SinkRole__AssemblyEventConnector = null;
        }
        
        /// <summary>
        /// Raises the SourceRole__AssemblyEventConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceRole__AssemblyEventConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SourceRole__AssemblyEventConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SourceRole__AssemblyEventConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSourceRole__AssemblyEventConnector(object sender, EventArgs eventArgs)
        {
            this.SourceRole__AssemblyEventConnector = null;
        }
        
        /// <summary>
        /// Raises the SinkAssemblyContext__AssemblyEventConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSinkAssemblyContext__AssemblyEventConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SinkAssemblyContext__AssemblyEventConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SinkAssemblyContext__AssemblyEventConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSinkAssemblyContext__AssemblyEventConnector(object sender, EventArgs eventArgs)
        {
            this.SinkAssemblyContext__AssemblyEventConnector = null;
        }
        
        /// <summary>
        /// Raises the SourceAssemblyContext__AssemblyEventConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSourceAssemblyContext__AssemblyEventConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SourceAssemblyContext__AssemblyEventConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SourceAssemblyContext__AssemblyEventConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSourceAssemblyContext__AssemblyEventConnector(object sender, EventArgs eventArgs)
        {
            this.SourceAssemblyContext__AssemblyEventConnector = null;
        }
        
        /// <summary>
        /// Raises the FilterCondition__AssemblyEventConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilterCondition__AssemblyEventConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FilterCondition__AssemblyEventConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FilterCondition__AssemblyEventConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFilterCondition__AssemblyEventConnector(object sender, EventArgs eventArgs)
        {
            this.FilterCondition__AssemblyEventConnector = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.FilterCondition__AssemblyEventConnector))
            {
                return ModelHelper.CreatePath("FilterCondition__AssemblyEventConnector");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FILTERCONDITION__ASSEMBLYEVENTCONNECTOR"))
            {
                return this.FilterCondition__AssemblyEventConnector;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SINKROLE__ASSEMBLYEVENTCONNECTOR"))
            {
                this.SinkRole__AssemblyEventConnector = ((ISinkRole)(value));
                return;
            }
            if ((feature == "SOURCEROLE__ASSEMBLYEVENTCONNECTOR"))
            {
                this.SourceRole__AssemblyEventConnector = ((ISourceRole)(value));
                return;
            }
            if ((feature == "SINKASSEMBLYCONTEXT__ASSEMBLYEVENTCONNECTOR"))
            {
                this.SinkAssemblyContext__AssemblyEventConnector = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "SOURCEASSEMBLYCONTEXT__ASSEMBLYEVENTCONNECTOR"))
            {
                this.SourceAssemblyContext__AssemblyEventConnector = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "FILTERCONDITION__ASSEMBLYEVENTCONNECTOR"))
            {
                this.FilterCondition__AssemblyEventConnector = ((IPCMRandomVariable)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SINKROLE__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SinkRole__AssemblyEventConnectorProxy(this);
            }
            if ((attribute == "SOURCEROLE__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SourceRole__AssemblyEventConnectorProxy(this);
            }
            if ((attribute == "SINKASSEMBLYCONTEXT__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SinkAssemblyContext__AssemblyEventConnectorProxy(this);
            }
            if ((attribute == "SOURCEASSEMBLYCONTEXT__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SourceAssemblyContext__AssemblyEventConnectorProxy(this);
            }
            if ((attribute == "FILTERCONDITION__ASSEMBLYEVENTCONNECTOR"))
            {
                return new FilterCondition__AssemblyEventConnectorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SINKROLE__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SinkRole__AssemblyEventConnectorProxy(this);
            }
            if ((reference == "SOURCEROLE__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SourceRole__AssemblyEventConnectorProxy(this);
            }
            if ((reference == "SINKASSEMBLYCONTEXT__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SinkAssemblyContext__AssemblyEventConnectorProxy(this);
            }
            if ((reference == "SOURCEASSEMBLYCONTEXT__ASSEMBLYEVENTCONNECTOR"))
            {
                return new SourceAssemblyContext__AssemblyEventConnectorProxy(this);
            }
            if ((reference == "FILTERCONDITION__ASSEMBLYEVENTCONNECTOR"))
            {
                return new FilterCondition__AssemblyEventConnectorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//AssemblyEve" +
                    "ntConnector/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssemblyEventConnector class
        /// </summary>
        public class AssemblyEventConnectorChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssemblyEventConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssemblyEventConnectorChildrenCollection(AssemblyEventConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FilterCondition__AssemblyEventConnector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FilterCondition__AssemblyEventConnectorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FilterCondition__AssemblyEventConnectorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FilterCondition__AssemblyEventConnector == null))
                {
                    IPCMRandomVariable filterCondition__AssemblyEventConnectorCasted = item.As<IPCMRandomVariable>();
                    if ((filterCondition__AssemblyEventConnectorCasted != null))
                    {
                        this._parent.FilterCondition__AssemblyEventConnector = filterCondition__AssemblyEventConnectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FilterCondition__AssemblyEventConnector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FilterCondition__AssemblyEventConnector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FilterCondition__AssemblyEventConnector != null))
                {
                    array[arrayIndex] = this._parent.FilterCondition__AssemblyEventConnector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FilterCondition__AssemblyEventConnector == item))
                {
                    this._parent.FilterCondition__AssemblyEventConnector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FilterCondition__AssemblyEventConnector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssemblyEventConnector class
        /// </summary>
        public class AssemblyEventConnectorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssemblyEventConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssemblyEventConnectorReferencedElementsCollection(AssemblyEventConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SinkRole__AssemblyEventConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SourceRole__AssemblyEventConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SinkAssemblyContext__AssemblyEventConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SourceAssemblyContext__AssemblyEventConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FilterCondition__AssemblyEventConnector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SinkRole__AssemblyEventConnectorChanged += this.PropagateValueChanges;
                this._parent.SourceRole__AssemblyEventConnectorChanged += this.PropagateValueChanges;
                this._parent.SinkAssemblyContext__AssemblyEventConnectorChanged += this.PropagateValueChanges;
                this._parent.SourceAssemblyContext__AssemblyEventConnectorChanged += this.PropagateValueChanges;
                this._parent.FilterCondition__AssemblyEventConnectorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SinkRole__AssemblyEventConnectorChanged -= this.PropagateValueChanges;
                this._parent.SourceRole__AssemblyEventConnectorChanged -= this.PropagateValueChanges;
                this._parent.SinkAssemblyContext__AssemblyEventConnectorChanged -= this.PropagateValueChanges;
                this._parent.SourceAssemblyContext__AssemblyEventConnectorChanged -= this.PropagateValueChanges;
                this._parent.FilterCondition__AssemblyEventConnectorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SinkRole__AssemblyEventConnector == null))
                {
                    ISinkRole sinkRole__AssemblyEventConnectorCasted = item.As<ISinkRole>();
                    if ((sinkRole__AssemblyEventConnectorCasted != null))
                    {
                        this._parent.SinkRole__AssemblyEventConnector = sinkRole__AssemblyEventConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.SourceRole__AssemblyEventConnector == null))
                {
                    ISourceRole sourceRole__AssemblyEventConnectorCasted = item.As<ISourceRole>();
                    if ((sourceRole__AssemblyEventConnectorCasted != null))
                    {
                        this._parent.SourceRole__AssemblyEventConnector = sourceRole__AssemblyEventConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.SinkAssemblyContext__AssemblyEventConnector == null))
                {
                    IAssemblyContext sinkAssemblyContext__AssemblyEventConnectorCasted = item.As<IAssemblyContext>();
                    if ((sinkAssemblyContext__AssemblyEventConnectorCasted != null))
                    {
                        this._parent.SinkAssemblyContext__AssemblyEventConnector = sinkAssemblyContext__AssemblyEventConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.SourceAssemblyContext__AssemblyEventConnector == null))
                {
                    IAssemblyContext sourceAssemblyContext__AssemblyEventConnectorCasted = item.As<IAssemblyContext>();
                    if ((sourceAssemblyContext__AssemblyEventConnectorCasted != null))
                    {
                        this._parent.SourceAssemblyContext__AssemblyEventConnector = sourceAssemblyContext__AssemblyEventConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.FilterCondition__AssemblyEventConnector == null))
                {
                    IPCMRandomVariable filterCondition__AssemblyEventConnectorCasted = item.As<IPCMRandomVariable>();
                    if ((filterCondition__AssemblyEventConnectorCasted != null))
                    {
                        this._parent.FilterCondition__AssemblyEventConnector = filterCondition__AssemblyEventConnectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SinkRole__AssemblyEventConnector = null;
                this._parent.SourceRole__AssemblyEventConnector = null;
                this._parent.SinkAssemblyContext__AssemblyEventConnector = null;
                this._parent.SourceAssemblyContext__AssemblyEventConnector = null;
                this._parent.FilterCondition__AssemblyEventConnector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SinkRole__AssemblyEventConnector))
                {
                    return true;
                }
                if ((item == this._parent.SourceRole__AssemblyEventConnector))
                {
                    return true;
                }
                if ((item == this._parent.SinkAssemblyContext__AssemblyEventConnector))
                {
                    return true;
                }
                if ((item == this._parent.SourceAssemblyContext__AssemblyEventConnector))
                {
                    return true;
                }
                if ((item == this._parent.FilterCondition__AssemblyEventConnector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SinkRole__AssemblyEventConnector != null))
                {
                    array[arrayIndex] = this._parent.SinkRole__AssemblyEventConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SourceRole__AssemblyEventConnector != null))
                {
                    array[arrayIndex] = this._parent.SourceRole__AssemblyEventConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SinkAssemblyContext__AssemblyEventConnector != null))
                {
                    array[arrayIndex] = this._parent.SinkAssemblyContext__AssemblyEventConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SourceAssemblyContext__AssemblyEventConnector != null))
                {
                    array[arrayIndex] = this._parent.SourceAssemblyContext__AssemblyEventConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FilterCondition__AssemblyEventConnector != null))
                {
                    array[arrayIndex] = this._parent.FilterCondition__AssemblyEventConnector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SinkRole__AssemblyEventConnector == item))
                {
                    this._parent.SinkRole__AssemblyEventConnector = null;
                    return true;
                }
                if ((this._parent.SourceRole__AssemblyEventConnector == item))
                {
                    this._parent.SourceRole__AssemblyEventConnector = null;
                    return true;
                }
                if ((this._parent.SinkAssemblyContext__AssemblyEventConnector == item))
                {
                    this._parent.SinkAssemblyContext__AssemblyEventConnector = null;
                    return true;
                }
                if ((this._parent.SourceAssemblyContext__AssemblyEventConnector == item))
                {
                    this._parent.SourceAssemblyContext__AssemblyEventConnector = null;
                    return true;
                }
                if ((this._parent.FilterCondition__AssemblyEventConnector == item))
                {
                    this._parent.FilterCondition__AssemblyEventConnector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SinkRole__AssemblyEventConnector).Concat(this._parent.SourceRole__AssemblyEventConnector).Concat(this._parent.SinkAssemblyContext__AssemblyEventConnector).Concat(this._parent.SourceAssemblyContext__AssemblyEventConnector).Concat(this._parent.FilterCondition__AssemblyEventConnector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sinkRole__AssemblyEventConnector property
        /// </summary>
        private sealed class SinkRole__AssemblyEventConnectorProxy : ModelPropertyChange<IAssemblyEventConnector, ISinkRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SinkRole__AssemblyEventConnectorProxy(IAssemblyEventConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISinkRole Value
            {
                get
                {
                    return this.ModelElement.SinkRole__AssemblyEventConnector;
                }
                set
                {
                    this.ModelElement.SinkRole__AssemblyEventConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SinkRole__AssemblyEventConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SinkRole__AssemblyEventConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sourceRole__AssemblyEventConnector property
        /// </summary>
        private sealed class SourceRole__AssemblyEventConnectorProxy : ModelPropertyChange<IAssemblyEventConnector, ISourceRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceRole__AssemblyEventConnectorProxy(IAssemblyEventConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISourceRole Value
            {
                get
                {
                    return this.ModelElement.SourceRole__AssemblyEventConnector;
                }
                set
                {
                    this.ModelElement.SourceRole__AssemblyEventConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourceRole__AssemblyEventConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourceRole__AssemblyEventConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sinkAssemblyContext__AssemblyEventConnector property
        /// </summary>
        private sealed class SinkAssemblyContext__AssemblyEventConnectorProxy : ModelPropertyChange<IAssemblyEventConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SinkAssemblyContext__AssemblyEventConnectorProxy(IAssemblyEventConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.SinkAssemblyContext__AssemblyEventConnector;
                }
                set
                {
                    this.ModelElement.SinkAssemblyContext__AssemblyEventConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SinkAssemblyContext__AssemblyEventConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SinkAssemblyContext__AssemblyEventConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sourceAssemblyContext__AssemblyEventConnector property
        /// </summary>
        private sealed class SourceAssemblyContext__AssemblyEventConnectorProxy : ModelPropertyChange<IAssemblyEventConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SourceAssemblyContext__AssemblyEventConnectorProxy(IAssemblyEventConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.SourceAssemblyContext__AssemblyEventConnector;
                }
                set
                {
                    this.ModelElement.SourceAssemblyContext__AssemblyEventConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourceAssemblyContext__AssemblyEventConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SourceAssemblyContext__AssemblyEventConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the filterCondition__AssemblyEventConnector property
        /// </summary>
        private sealed class FilterCondition__AssemblyEventConnectorProxy : ModelPropertyChange<IAssemblyEventConnector, IPCMRandomVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FilterCondition__AssemblyEventConnectorProxy(IAssemblyEventConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPCMRandomVariable Value
            {
                get
                {
                    return this.ModelElement.FilterCondition__AssemblyEventConnector;
                }
                set
                {
                    this.ModelElement.FilterCondition__AssemblyEventConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilterCondition__AssemblyEventConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilterCondition__AssemblyEventConnectorChanged -= handler;
            }
        }
    }
}

