//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the AssemblyInfrastructureConnector class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//AssemblyInf" +
        "rastructureConnector/")]
    [DebuggerDisplayAttribute("AssemblyInfrastructureConnector {Id}")]
    public class AssemblyInfrastructureConnector : Connector, IAssemblyInfrastructureConnector, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ProvidedRole__AssemblyInfrastructureConnector property
        /// </summary>
        private IInfrastructureProvidedRole _providedRole__AssemblyInfrastructureConnector;
        
        /// <summary>
        /// The backing field for the RequiredRole__AssemblyInfrastructureConnector property
        /// </summary>
        private IInfrastructureRequiredRole _requiredRole__AssemblyInfrastructureConnector;
        
        /// <summary>
        /// The backing field for the ProvidingAssemblyContext__AssemblyInfrastructureConnector property
        /// </summary>
        private IAssemblyContext _providingAssemblyContext__AssemblyInfrastructureConnector;
        
        /// <summary>
        /// The backing field for the RequiringAssemblyContext__AssemblyInfrastructureConnector property
        /// </summary>
        private IAssemblyContext _requiringAssemblyContext__AssemblyInfrastructureConnector;
        
        /// <summary>
        /// The providedRole__AssemblyInfrastructureConnector property
        /// </summary>
        [XmlElementNameAttribute("providedRole__AssemblyInfrastructureConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IInfrastructureProvidedRole ProvidedRole__AssemblyInfrastructureConnector
        {
            get
            {
                return this._providedRole__AssemblyInfrastructureConnector;
            }
            set
            {
                if ((this._providedRole__AssemblyInfrastructureConnector != value))
                {
                    IInfrastructureProvidedRole old = this._providedRole__AssemblyInfrastructureConnector;
                    this._providedRole__AssemblyInfrastructureConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetProvidedRole__AssemblyInfrastructureConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetProvidedRole__AssemblyInfrastructureConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProvidedRole__AssemblyInfrastructureConnectorChanged(e);
                    this.OnPropertyChanged("ProvidedRole__AssemblyInfrastructureConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The requiredRole__AssemblyInfrastructureConnector property
        /// </summary>
        [XmlElementNameAttribute("requiredRole__AssemblyInfrastructureConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IInfrastructureRequiredRole RequiredRole__AssemblyInfrastructureConnector
        {
            get
            {
                return this._requiredRole__AssemblyInfrastructureConnector;
            }
            set
            {
                if ((this._requiredRole__AssemblyInfrastructureConnector != value))
                {
                    IInfrastructureRequiredRole old = this._requiredRole__AssemblyInfrastructureConnector;
                    this._requiredRole__AssemblyInfrastructureConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRequiredRole__AssemblyInfrastructureConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRequiredRole__AssemblyInfrastructureConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequiredRole__AssemblyInfrastructureConnectorChanged(e);
                    this.OnPropertyChanged("RequiredRole__AssemblyInfrastructureConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The providingAssemblyContext__AssemblyInfrastructureConnector property
        /// </summary>
        [XmlElementNameAttribute("providingAssemblyContext__AssemblyInfrastructureConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext ProvidingAssemblyContext__AssemblyInfrastructureConnector
        {
            get
            {
                return this._providingAssemblyContext__AssemblyInfrastructureConnector;
            }
            set
            {
                if ((this._providingAssemblyContext__AssemblyInfrastructureConnector != value))
                {
                    IAssemblyContext old = this._providingAssemblyContext__AssemblyInfrastructureConnector;
                    this._providingAssemblyContext__AssemblyInfrastructureConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetProvidingAssemblyContext__AssemblyInfrastructureConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetProvidingAssemblyContext__AssemblyInfrastructureConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged(e);
                    this.OnPropertyChanged("ProvidingAssemblyContext__AssemblyInfrastructureConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The requiringAssemblyContext__AssemblyInfrastructureConnector property
        /// </summary>
        [XmlElementNameAttribute("requiringAssemblyContext__AssemblyInfrastructureConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext RequiringAssemblyContext__AssemblyInfrastructureConnector
        {
            get
            {
                return this._requiringAssemblyContext__AssemblyInfrastructureConnector;
            }
            set
            {
                if ((this._requiringAssemblyContext__AssemblyInfrastructureConnector != value))
                {
                    IAssemblyContext old = this._requiringAssemblyContext__AssemblyInfrastructureConnector;
                    this._requiringAssemblyContext__AssemblyInfrastructureConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRequiringAssemblyContext__AssemblyInfrastructureConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRequiringAssemblyContext__AssemblyInfrastructureConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequiringAssemblyContext__AssemblyInfrastructureConnectorChanged(e);
                    this.OnPropertyChanged("RequiringAssemblyContext__AssemblyInfrastructureConnector", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssemblyInfrastructureConnectorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//AssemblyInf" +
                        "rastructureConnector/");
            }
        }
        
        /// <summary>
        /// Gets fired when the ProvidedRole__AssemblyInfrastructureConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ProvidedRole__AssemblyInfrastructureConnectorChanged;
        
        /// <summary>
        /// Gets fired when the RequiredRole__AssemblyInfrastructureConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RequiredRole__AssemblyInfrastructureConnectorChanged;
        
        /// <summary>
        /// Gets fired when the ProvidingAssemblyContext__AssemblyInfrastructureConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged;
        
        /// <summary>
        /// Gets fired when the RequiringAssemblyContext__AssemblyInfrastructureConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged;
        
        /// <summary>
        /// Raises the ProvidedRole__AssemblyInfrastructureConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvidedRole__AssemblyInfrastructureConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ProvidedRole__AssemblyInfrastructureConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProvidedRole__AssemblyInfrastructureConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProvidedRole__AssemblyInfrastructureConnector(object sender, EventArgs eventArgs)
        {
            this.ProvidedRole__AssemblyInfrastructureConnector = null;
        }
        
        /// <summary>
        /// Raises the RequiredRole__AssemblyInfrastructureConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiredRole__AssemblyInfrastructureConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RequiredRole__AssemblyInfrastructureConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RequiredRole__AssemblyInfrastructureConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequiredRole__AssemblyInfrastructureConnector(object sender, EventArgs eventArgs)
        {
            this.RequiredRole__AssemblyInfrastructureConnector = null;
        }
        
        /// <summary>
        /// Raises the ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProvidingAssemblyContext__AssemblyInfrastructureConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProvidingAssemblyContext__AssemblyInfrastructureConnector(object sender, EventArgs eventArgs)
        {
            this.ProvidingAssemblyContext__AssemblyInfrastructureConnector = null;
        }
        
        /// <summary>
        /// Raises the RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequiringAssemblyContext__AssemblyInfrastructureConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RequiringAssemblyContext__AssemblyInfrastructureConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequiringAssemblyContext__AssemblyInfrastructureConnector(object sender, EventArgs eventArgs)
        {
            this.RequiringAssemblyContext__AssemblyInfrastructureConnector = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROVIDEDROLE__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                this.ProvidedRole__AssemblyInfrastructureConnector = ((IInfrastructureProvidedRole)(value));
                return;
            }
            if ((feature == "REQUIREDROLE__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                this.RequiredRole__AssemblyInfrastructureConnector = ((IInfrastructureRequiredRole)(value));
                return;
            }
            if ((feature == "PROVIDINGASSEMBLYCONTEXT__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                this.ProvidingAssemblyContext__AssemblyInfrastructureConnector = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "REQUIRINGASSEMBLYCONTEXT__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                this.RequiringAssemblyContext__AssemblyInfrastructureConnector = ((IAssemblyContext)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PROVIDEDROLE__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new ProvidedRole__AssemblyInfrastructureConnectorProxy(this);
            }
            if ((attribute == "REQUIREDROLE__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new RequiredRole__AssemblyInfrastructureConnectorProxy(this);
            }
            if ((attribute == "PROVIDINGASSEMBLYCONTEXT__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new ProvidingAssemblyContext__AssemblyInfrastructureConnectorProxy(this);
            }
            if ((attribute == "REQUIRINGASSEMBLYCONTEXT__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new RequiringAssemblyContext__AssemblyInfrastructureConnectorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PROVIDEDROLE__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new ProvidedRole__AssemblyInfrastructureConnectorProxy(this);
            }
            if ((reference == "REQUIREDROLE__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new RequiredRole__AssemblyInfrastructureConnectorProxy(this);
            }
            if ((reference == "PROVIDINGASSEMBLYCONTEXT__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new ProvidingAssemblyContext__AssemblyInfrastructureConnectorProxy(this);
            }
            if ((reference == "REQUIRINGASSEMBLYCONTEXT__ASSEMBLYINFRASTRUCTURECONNECTOR"))
            {
                return new RequiringAssemblyContext__AssemblyInfrastructureConnectorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//AssemblyInf" +
                    "rastructureConnector/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssemblyInfrastructureConnector class
        /// </summary>
        public class AssemblyInfrastructureConnectorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssemblyInfrastructureConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssemblyInfrastructureConnectorReferencedElementsCollection(AssemblyInfrastructureConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ProvidedRole__AssemblyInfrastructureConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RequiredRole__AssemblyInfrastructureConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ProvidedRole__AssemblyInfrastructureConnectorChanged += this.PropagateValueChanges;
                this._parent.RequiredRole__AssemblyInfrastructureConnectorChanged += this.PropagateValueChanges;
                this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged += this.PropagateValueChanges;
                this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ProvidedRole__AssemblyInfrastructureConnectorChanged -= this.PropagateValueChanges;
                this._parent.RequiredRole__AssemblyInfrastructureConnectorChanged -= this.PropagateValueChanges;
                this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged -= this.PropagateValueChanges;
                this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ProvidedRole__AssemblyInfrastructureConnector == null))
                {
                    IInfrastructureProvidedRole providedRole__AssemblyInfrastructureConnectorCasted = item.As<IInfrastructureProvidedRole>();
                    if ((providedRole__AssemblyInfrastructureConnectorCasted != null))
                    {
                        this._parent.ProvidedRole__AssemblyInfrastructureConnector = providedRole__AssemblyInfrastructureConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.RequiredRole__AssemblyInfrastructureConnector == null))
                {
                    IInfrastructureRequiredRole requiredRole__AssemblyInfrastructureConnectorCasted = item.As<IInfrastructureRequiredRole>();
                    if ((requiredRole__AssemblyInfrastructureConnectorCasted != null))
                    {
                        this._parent.RequiredRole__AssemblyInfrastructureConnector = requiredRole__AssemblyInfrastructureConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector == null))
                {
                    IAssemblyContext providingAssemblyContext__AssemblyInfrastructureConnectorCasted = item.As<IAssemblyContext>();
                    if ((providingAssemblyContext__AssemblyInfrastructureConnectorCasted != null))
                    {
                        this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector = providingAssemblyContext__AssemblyInfrastructureConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector == null))
                {
                    IAssemblyContext requiringAssemblyContext__AssemblyInfrastructureConnectorCasted = item.As<IAssemblyContext>();
                    if ((requiringAssemblyContext__AssemblyInfrastructureConnectorCasted != null))
                    {
                        this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector = requiringAssemblyContext__AssemblyInfrastructureConnectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ProvidedRole__AssemblyInfrastructureConnector = null;
                this._parent.RequiredRole__AssemblyInfrastructureConnector = null;
                this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector = null;
                this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ProvidedRole__AssemblyInfrastructureConnector))
                {
                    return true;
                }
                if ((item == this._parent.RequiredRole__AssemblyInfrastructureConnector))
                {
                    return true;
                }
                if ((item == this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector))
                {
                    return true;
                }
                if ((item == this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ProvidedRole__AssemblyInfrastructureConnector != null))
                {
                    array[arrayIndex] = this._parent.ProvidedRole__AssemblyInfrastructureConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RequiredRole__AssemblyInfrastructureConnector != null))
                {
                    array[arrayIndex] = this._parent.RequiredRole__AssemblyInfrastructureConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector != null))
                {
                    array[arrayIndex] = this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector != null))
                {
                    array[arrayIndex] = this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ProvidedRole__AssemblyInfrastructureConnector == item))
                {
                    this._parent.ProvidedRole__AssemblyInfrastructureConnector = null;
                    return true;
                }
                if ((this._parent.RequiredRole__AssemblyInfrastructureConnector == item))
                {
                    this._parent.RequiredRole__AssemblyInfrastructureConnector = null;
                    return true;
                }
                if ((this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector == item))
                {
                    this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector = null;
                    return true;
                }
                if ((this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector == item))
                {
                    this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ProvidedRole__AssemblyInfrastructureConnector).Concat(this._parent.RequiredRole__AssemblyInfrastructureConnector).Concat(this._parent.ProvidingAssemblyContext__AssemblyInfrastructureConnector).Concat(this._parent.RequiringAssemblyContext__AssemblyInfrastructureConnector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the providedRole__AssemblyInfrastructureConnector property
        /// </summary>
        private sealed class ProvidedRole__AssemblyInfrastructureConnectorProxy : ModelPropertyChange<IAssemblyInfrastructureConnector, IInfrastructureProvidedRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProvidedRole__AssemblyInfrastructureConnectorProxy(IAssemblyInfrastructureConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInfrastructureProvidedRole Value
            {
                get
                {
                    return this.ModelElement.ProvidedRole__AssemblyInfrastructureConnector;
                }
                set
                {
                    this.ModelElement.ProvidedRole__AssemblyInfrastructureConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ProvidedRole__AssemblyInfrastructureConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ProvidedRole__AssemblyInfrastructureConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requiredRole__AssemblyInfrastructureConnector property
        /// </summary>
        private sealed class RequiredRole__AssemblyInfrastructureConnectorProxy : ModelPropertyChange<IAssemblyInfrastructureConnector, IInfrastructureRequiredRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequiredRole__AssemblyInfrastructureConnectorProxy(IAssemblyInfrastructureConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInfrastructureRequiredRole Value
            {
                get
                {
                    return this.ModelElement.RequiredRole__AssemblyInfrastructureConnector;
                }
                set
                {
                    this.ModelElement.RequiredRole__AssemblyInfrastructureConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredRole__AssemblyInfrastructureConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiredRole__AssemblyInfrastructureConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the providingAssemblyContext__AssemblyInfrastructureConnector property
        /// </summary>
        private sealed class ProvidingAssemblyContext__AssemblyInfrastructureConnectorProxy : ModelPropertyChange<IAssemblyInfrastructureConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProvidingAssemblyContext__AssemblyInfrastructureConnectorProxy(IAssemblyInfrastructureConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.ProvidingAssemblyContext__AssemblyInfrastructureConnector;
                }
                set
                {
                    this.ModelElement.ProvidingAssemblyContext__AssemblyInfrastructureConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ProvidingAssemblyContext__AssemblyInfrastructureConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requiringAssemblyContext__AssemblyInfrastructureConnector property
        /// </summary>
        private sealed class RequiringAssemblyContext__AssemblyInfrastructureConnectorProxy : ModelPropertyChange<IAssemblyInfrastructureConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequiringAssemblyContext__AssemblyInfrastructureConnectorProxy(IAssemblyInfrastructureConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.RequiringAssemblyContext__AssemblyInfrastructureConnector;
                }
                set
                {
                    this.ModelElement.RequiringAssemblyContext__AssemblyInfrastructureConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RequiringAssemblyContext__AssemblyInfrastructureConnectorChanged -= handler;
            }
        }
    }
}

