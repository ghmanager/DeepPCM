//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the EventChannelSinkConnector class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//EventChanne" +
        "lSinkConnector/")]
    [DebuggerDisplayAttribute("EventChannelSinkConnector {Id}")]
    public class EventChannelSinkConnector : Connector, IEventChannelSinkConnector, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SinkRole__EventChannelSinkConnector property
        /// </summary>
        private ISinkRole _sinkRole__EventChannelSinkConnector;
        
        /// <summary>
        /// The backing field for the FilterCondition__EventChannelSinkConnector property
        /// </summary>
        private IPCMRandomVariable _filterCondition__EventChannelSinkConnector;
        
        /// <summary>
        /// The backing field for the AssemblyContext__EventChannelSinkConnector property
        /// </summary>
        private IAssemblyContext _assemblyContext__EventChannelSinkConnector;
        
        /// <summary>
        /// The backing field for the EventChannel__EventChannelSinkConnector property
        /// </summary>
        private IEventChannel _eventChannel__EventChannelSinkConnector;
        
        /// <summary>
        /// The sinkRole__EventChannelSinkConnector property
        /// </summary>
        [XmlElementNameAttribute("sinkRole__EventChannelSinkConnector")]
        [XmlAttributeAttribute(true)]
        public virtual ISinkRole SinkRole__EventChannelSinkConnector
        {
            get
            {
                return this._sinkRole__EventChannelSinkConnector;
            }
            set
            {
                if ((this._sinkRole__EventChannelSinkConnector != value))
                {
                    ISinkRole old = this._sinkRole__EventChannelSinkConnector;
                    this._sinkRole__EventChannelSinkConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSinkRole__EventChannelSinkConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSinkRole__EventChannelSinkConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSinkRole__EventChannelSinkConnectorChanged(e);
                    this.OnPropertyChanged("SinkRole__EventChannelSinkConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The filterCondition__EventChannelSinkConnector property
        /// </summary>
        [XmlElementNameAttribute("filterCondition__EventChannelSinkConnector")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("eventChannelSinkConnector__FilterCondition")]
        public virtual IPCMRandomVariable FilterCondition__EventChannelSinkConnector
        {
            get
            {
                return this._filterCondition__EventChannelSinkConnector;
            }
            set
            {
                if ((this._filterCondition__EventChannelSinkConnector != value))
                {
                    IPCMRandomVariable old = this._filterCondition__EventChannelSinkConnector;
                    this._filterCondition__EventChannelSinkConnector = value;
                    if ((old != null))
                    {
                        old.EventChannelSinkConnector__FilterCondition = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetFilterCondition__EventChannelSinkConnector;
                    }
                    if ((value != null))
                    {
                        value.EventChannelSinkConnector__FilterCondition = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetFilterCondition__EventChannelSinkConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFilterCondition__EventChannelSinkConnectorChanged(e);
                    this.OnPropertyChanged("FilterCondition__EventChannelSinkConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The assemblyContext__EventChannelSinkConnector property
        /// </summary>
        [XmlElementNameAttribute("assemblyContext__EventChannelSinkConnector")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext AssemblyContext__EventChannelSinkConnector
        {
            get
            {
                return this._assemblyContext__EventChannelSinkConnector;
            }
            set
            {
                if ((this._assemblyContext__EventChannelSinkConnector != value))
                {
                    IAssemblyContext old = this._assemblyContext__EventChannelSinkConnector;
                    this._assemblyContext__EventChannelSinkConnector = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAssemblyContext__EventChannelSinkConnector;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAssemblyContext__EventChannelSinkConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyContext__EventChannelSinkConnectorChanged(e);
                    this.OnPropertyChanged("AssemblyContext__EventChannelSinkConnector", e);
                }
            }
        }
        
        /// <summary>
        /// The eventChannel__EventChannelSinkConnector property
        /// </summary>
        [XmlElementNameAttribute("eventChannel__EventChannelSinkConnector")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("eventChannelSinkConnector__EventChannel")]
        public virtual IEventChannel EventChannel__EventChannelSinkConnector
        {
            get
            {
                return this._eventChannel__EventChannelSinkConnector;
            }
            set
            {
                if ((this._eventChannel__EventChannelSinkConnector != value))
                {
                    IEventChannel old = this._eventChannel__EventChannelSinkConnector;
                    this._eventChannel__EventChannelSinkConnector = value;
                    if ((old != null))
                    {
                        old.EventChannelSinkConnector__EventChannel.Remove(this);
                        old.Deleted -= this.OnResetEventChannel__EventChannelSinkConnector;
                    }
                    if ((value != null))
                    {
                        if ((value.EventChannelSinkConnector__EventChannel.Contains(this) != true))
                        {
                            value.EventChannelSinkConnector__EventChannel.Add(this);
                        }
                        value.Deleted += this.OnResetEventChannel__EventChannelSinkConnector;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEventChannel__EventChannelSinkConnectorChanged(e);
                    this.OnPropertyChanged("EventChannel__EventChannelSinkConnector", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new EventChannelSinkConnectorChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EventChannelSinkConnectorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//EventChanne" +
                        "lSinkConnector/");
            }
        }
        
        /// <summary>
        /// Gets fired when the SinkRole__EventChannelSinkConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SinkRole__EventChannelSinkConnectorChanged;
        
        /// <summary>
        /// Gets fired when the FilterCondition__EventChannelSinkConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> FilterCondition__EventChannelSinkConnectorChanged;
        
        /// <summary>
        /// Gets fired when the AssemblyContext__EventChannelSinkConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AssemblyContext__EventChannelSinkConnectorChanged;
        
        /// <summary>
        /// Gets fired when the EventChannel__EventChannelSinkConnector property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EventChannel__EventChannelSinkConnectorChanged;
        
        /// <summary>
        /// Raises the SinkRole__EventChannelSinkConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSinkRole__EventChannelSinkConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SinkRole__EventChannelSinkConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SinkRole__EventChannelSinkConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSinkRole__EventChannelSinkConnector(object sender, EventArgs eventArgs)
        {
            this.SinkRole__EventChannelSinkConnector = null;
        }
        
        /// <summary>
        /// Raises the FilterCondition__EventChannelSinkConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFilterCondition__EventChannelSinkConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.FilterCondition__EventChannelSinkConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FilterCondition__EventChannelSinkConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFilterCondition__EventChannelSinkConnector(object sender, EventArgs eventArgs)
        {
            this.FilterCondition__EventChannelSinkConnector = null;
        }
        
        /// <summary>
        /// Raises the AssemblyContext__EventChannelSinkConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext__EventChannelSinkConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext__EventChannelSinkConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssemblyContext__EventChannelSinkConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssemblyContext__EventChannelSinkConnector(object sender, EventArgs eventArgs)
        {
            this.AssemblyContext__EventChannelSinkConnector = null;
        }
        
        /// <summary>
        /// Raises the EventChannel__EventChannelSinkConnectorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventChannel__EventChannelSinkConnectorChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EventChannel__EventChannelSinkConnectorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EventChannel__EventChannelSinkConnector property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEventChannel__EventChannelSinkConnector(object sender, EventArgs eventArgs)
        {
            this.EventChannel__EventChannelSinkConnector = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.FilterCondition__EventChannelSinkConnector))
            {
                return ModelHelper.CreatePath("FilterCondition__EventChannelSinkConnector");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FILTERCONDITION__EVENTCHANNELSINKCONNECTOR"))
            {
                return this.FilterCondition__EventChannelSinkConnector;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SINKROLE__EVENTCHANNELSINKCONNECTOR"))
            {
                this.SinkRole__EventChannelSinkConnector = ((ISinkRole)(value));
                return;
            }
            if ((feature == "FILTERCONDITION__EVENTCHANNELSINKCONNECTOR"))
            {
                this.FilterCondition__EventChannelSinkConnector = ((IPCMRandomVariable)(value));
                return;
            }
            if ((feature == "ASSEMBLYCONTEXT__EVENTCHANNELSINKCONNECTOR"))
            {
                this.AssemblyContext__EventChannelSinkConnector = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "EVENTCHANNEL__EVENTCHANNELSINKCONNECTOR"))
            {
                this.EventChannel__EventChannelSinkConnector = ((IEventChannel)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SINKROLE__EVENTCHANNELSINKCONNECTOR"))
            {
                return new SinkRole__EventChannelSinkConnectorProxy(this);
            }
            if ((attribute == "FILTERCONDITION__EVENTCHANNELSINKCONNECTOR"))
            {
                return new FilterCondition__EventChannelSinkConnectorProxy(this);
            }
            if ((attribute == "ASSEMBLYCONTEXT__EVENTCHANNELSINKCONNECTOR"))
            {
                return new AssemblyContext__EventChannelSinkConnectorProxy(this);
            }
            if ((attribute == "EVENTCHANNEL__EVENTCHANNELSINKCONNECTOR"))
            {
                return new EventChannel__EventChannelSinkConnectorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SINKROLE__EVENTCHANNELSINKCONNECTOR"))
            {
                return new SinkRole__EventChannelSinkConnectorProxy(this);
            }
            if ((reference == "FILTERCONDITION__EVENTCHANNELSINKCONNECTOR"))
            {
                return new FilterCondition__EventChannelSinkConnectorProxy(this);
            }
            if ((reference == "ASSEMBLYCONTEXT__EVENTCHANNELSINKCONNECTOR"))
            {
                return new AssemblyContext__EventChannelSinkConnectorProxy(this);
            }
            if ((reference == "EVENTCHANNEL__EVENTCHANNELSINKCONNECTOR"))
            {
                return new EventChannel__EventChannelSinkConnectorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//EventChanne" +
                    "lSinkConnector/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventChannelSinkConnector class
        /// </summary>
        public class EventChannelSinkConnectorChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventChannelSinkConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventChannelSinkConnectorChildrenCollection(EventChannelSinkConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FilterCondition__EventChannelSinkConnector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FilterCondition__EventChannelSinkConnectorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FilterCondition__EventChannelSinkConnectorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FilterCondition__EventChannelSinkConnector == null))
                {
                    IPCMRandomVariable filterCondition__EventChannelSinkConnectorCasted = item.As<IPCMRandomVariable>();
                    if ((filterCondition__EventChannelSinkConnectorCasted != null))
                    {
                        this._parent.FilterCondition__EventChannelSinkConnector = filterCondition__EventChannelSinkConnectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FilterCondition__EventChannelSinkConnector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FilterCondition__EventChannelSinkConnector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FilterCondition__EventChannelSinkConnector != null))
                {
                    array[arrayIndex] = this._parent.FilterCondition__EventChannelSinkConnector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FilterCondition__EventChannelSinkConnector == item))
                {
                    this._parent.FilterCondition__EventChannelSinkConnector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FilterCondition__EventChannelSinkConnector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventChannelSinkConnector class
        /// </summary>
        public class EventChannelSinkConnectorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventChannelSinkConnector _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventChannelSinkConnectorReferencedElementsCollection(EventChannelSinkConnector parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SinkRole__EventChannelSinkConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FilterCondition__EventChannelSinkConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssemblyContext__EventChannelSinkConnector != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.EventChannel__EventChannelSinkConnector != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SinkRole__EventChannelSinkConnectorChanged += this.PropagateValueChanges;
                this._parent.FilterCondition__EventChannelSinkConnectorChanged += this.PropagateValueChanges;
                this._parent.AssemblyContext__EventChannelSinkConnectorChanged += this.PropagateValueChanges;
                this._parent.EventChannel__EventChannelSinkConnectorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SinkRole__EventChannelSinkConnectorChanged -= this.PropagateValueChanges;
                this._parent.FilterCondition__EventChannelSinkConnectorChanged -= this.PropagateValueChanges;
                this._parent.AssemblyContext__EventChannelSinkConnectorChanged -= this.PropagateValueChanges;
                this._parent.EventChannel__EventChannelSinkConnectorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SinkRole__EventChannelSinkConnector == null))
                {
                    ISinkRole sinkRole__EventChannelSinkConnectorCasted = item.As<ISinkRole>();
                    if ((sinkRole__EventChannelSinkConnectorCasted != null))
                    {
                        this._parent.SinkRole__EventChannelSinkConnector = sinkRole__EventChannelSinkConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.FilterCondition__EventChannelSinkConnector == null))
                {
                    IPCMRandomVariable filterCondition__EventChannelSinkConnectorCasted = item.As<IPCMRandomVariable>();
                    if ((filterCondition__EventChannelSinkConnectorCasted != null))
                    {
                        this._parent.FilterCondition__EventChannelSinkConnector = filterCondition__EventChannelSinkConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.AssemblyContext__EventChannelSinkConnector == null))
                {
                    IAssemblyContext assemblyContext__EventChannelSinkConnectorCasted = item.As<IAssemblyContext>();
                    if ((assemblyContext__EventChannelSinkConnectorCasted != null))
                    {
                        this._parent.AssemblyContext__EventChannelSinkConnector = assemblyContext__EventChannelSinkConnectorCasted;
                        return;
                    }
                }
                if ((this._parent.EventChannel__EventChannelSinkConnector == null))
                {
                    IEventChannel eventChannel__EventChannelSinkConnectorCasted = item.As<IEventChannel>();
                    if ((eventChannel__EventChannelSinkConnectorCasted != null))
                    {
                        this._parent.EventChannel__EventChannelSinkConnector = eventChannel__EventChannelSinkConnectorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SinkRole__EventChannelSinkConnector = null;
                this._parent.FilterCondition__EventChannelSinkConnector = null;
                this._parent.AssemblyContext__EventChannelSinkConnector = null;
                this._parent.EventChannel__EventChannelSinkConnector = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SinkRole__EventChannelSinkConnector))
                {
                    return true;
                }
                if ((item == this._parent.FilterCondition__EventChannelSinkConnector))
                {
                    return true;
                }
                if ((item == this._parent.AssemblyContext__EventChannelSinkConnector))
                {
                    return true;
                }
                if ((item == this._parent.EventChannel__EventChannelSinkConnector))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SinkRole__EventChannelSinkConnector != null))
                {
                    array[arrayIndex] = this._parent.SinkRole__EventChannelSinkConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FilterCondition__EventChannelSinkConnector != null))
                {
                    array[arrayIndex] = this._parent.FilterCondition__EventChannelSinkConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssemblyContext__EventChannelSinkConnector != null))
                {
                    array[arrayIndex] = this._parent.AssemblyContext__EventChannelSinkConnector;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.EventChannel__EventChannelSinkConnector != null))
                {
                    array[arrayIndex] = this._parent.EventChannel__EventChannelSinkConnector;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SinkRole__EventChannelSinkConnector == item))
                {
                    this._parent.SinkRole__EventChannelSinkConnector = null;
                    return true;
                }
                if ((this._parent.FilterCondition__EventChannelSinkConnector == item))
                {
                    this._parent.FilterCondition__EventChannelSinkConnector = null;
                    return true;
                }
                if ((this._parent.AssemblyContext__EventChannelSinkConnector == item))
                {
                    this._parent.AssemblyContext__EventChannelSinkConnector = null;
                    return true;
                }
                if ((this._parent.EventChannel__EventChannelSinkConnector == item))
                {
                    this._parent.EventChannel__EventChannelSinkConnector = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SinkRole__EventChannelSinkConnector).Concat(this._parent.FilterCondition__EventChannelSinkConnector).Concat(this._parent.AssemblyContext__EventChannelSinkConnector).Concat(this._parent.EventChannel__EventChannelSinkConnector).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sinkRole__EventChannelSinkConnector property
        /// </summary>
        private sealed class SinkRole__EventChannelSinkConnectorProxy : ModelPropertyChange<IEventChannelSinkConnector, ISinkRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SinkRole__EventChannelSinkConnectorProxy(IEventChannelSinkConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISinkRole Value
            {
                get
                {
                    return this.ModelElement.SinkRole__EventChannelSinkConnector;
                }
                set
                {
                    this.ModelElement.SinkRole__EventChannelSinkConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SinkRole__EventChannelSinkConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SinkRole__EventChannelSinkConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the filterCondition__EventChannelSinkConnector property
        /// </summary>
        private sealed class FilterCondition__EventChannelSinkConnectorProxy : ModelPropertyChange<IEventChannelSinkConnector, IPCMRandomVariable>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FilterCondition__EventChannelSinkConnectorProxy(IEventChannelSinkConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPCMRandomVariable Value
            {
                get
                {
                    return this.ModelElement.FilterCondition__EventChannelSinkConnector;
                }
                set
                {
                    this.ModelElement.FilterCondition__EventChannelSinkConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilterCondition__EventChannelSinkConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FilterCondition__EventChannelSinkConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the assemblyContext__EventChannelSinkConnector property
        /// </summary>
        private sealed class AssemblyContext__EventChannelSinkConnectorProxy : ModelPropertyChange<IEventChannelSinkConnector, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyContext__EventChannelSinkConnectorProxy(IEventChannelSinkConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.AssemblyContext__EventChannelSinkConnector;
                }
                set
                {
                    this.ModelElement.AssemblyContext__EventChannelSinkConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext__EventChannelSinkConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext__EventChannelSinkConnectorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eventChannel__EventChannelSinkConnector property
        /// </summary>
        private sealed class EventChannel__EventChannelSinkConnectorProxy : ModelPropertyChange<IEventChannelSinkConnector, IEventChannel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EventChannel__EventChannelSinkConnectorProxy(IEventChannelSinkConnector modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEventChannel Value
            {
                get
                {
                    return this.ModelElement.EventChannel__EventChannelSinkConnector;
                }
                set
                {
                    this.ModelElement.EventChannel__EventChannelSinkConnector = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EventChannel__EventChannelSinkConnectorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EventChannel__EventChannelSinkConnectorChanged -= handler;
            }
        }
    }
}

