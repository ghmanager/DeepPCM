//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the EventChannel class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//EventChanne" +
        "l/")]
    [DebuggerDisplayAttribute("EventChannel {Id}")]
    public class EventChannel : GeneratedCode.Pcm.Core.Entity.Entity, IEventChannel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EventGroup__EventChannel property
        /// </summary>
        private IEventGroup _eventGroup__EventChannel;
        
        /// <summary>
        /// The backing field for the EventChannelSourceConnector__EventChannel property
        /// </summary>
        private EventChannelEventChannelSourceConnector__EventChannelCollection _eventChannelSourceConnector__EventChannel;
        
        /// <summary>
        /// The backing field for the EventChannelSinkConnector__EventChannel property
        /// </summary>
        private EventChannelEventChannelSinkConnector__EventChannelCollection _eventChannelSinkConnector__EventChannel;
        
        public EventChannel()
        {
            this._eventChannelSourceConnector__EventChannel = new EventChannelEventChannelSourceConnector__EventChannelCollection(this);
            this._eventChannelSourceConnector__EventChannel.CollectionChanged += this.EventChannelSourceConnector__EventChannelCollectionChanged;
            this._eventChannelSinkConnector__EventChannel = new EventChannelEventChannelSinkConnector__EventChannelCollection(this);
            this._eventChannelSinkConnector__EventChannel.CollectionChanged += this.EventChannelSinkConnector__EventChannelCollectionChanged;
        }
        
        /// <summary>
        /// The eventGroup__EventChannel property
        /// </summary>
        [XmlElementNameAttribute("eventGroup__EventChannel")]
        [XmlAttributeAttribute(true)]
        public virtual IEventGroup EventGroup__EventChannel
        {
            get
            {
                return this._eventGroup__EventChannel;
            }
            set
            {
                if ((this._eventGroup__EventChannel != value))
                {
                    IEventGroup old = this._eventGroup__EventChannel;
                    this._eventGroup__EventChannel = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetEventGroup__EventChannel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetEventGroup__EventChannel;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEventGroup__EventChannelChanged(e);
                    this.OnPropertyChanged("EventGroup__EventChannel", e);
                }
            }
        }
        
        /// <summary>
        /// The eventChannelSourceConnector__EventChannel property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eventChannelSourceConnector__EventChannel")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("eventChannel__EventChannelSourceConnector")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IEventChannelSourceConnector> EventChannelSourceConnector__EventChannel
        {
            get
            {
                return this._eventChannelSourceConnector__EventChannel;
            }
        }
        
        /// <summary>
        /// The eventChannelSinkConnector__EventChannel property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eventChannelSinkConnector__EventChannel")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("eventChannel__EventChannelSinkConnector")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IEventChannelSinkConnector> EventChannelSinkConnector__EventChannel
        {
            get
            {
                return this._eventChannelSinkConnector__EventChannel;
            }
        }
        
        /// <summary>
        /// The parentStructure__EventChannel property
        /// </summary>
        [XmlElementNameAttribute("parentStructure__EventChannel")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("eventChannel__ComposedStructure")]
        public virtual IComposedStructure ParentStructure__EventChannel
        {
            get
            {
                return ModelHelper.CastAs<IComposedStructure>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EventChannelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//EventChanne" +
                        "l/");
            }
        }
        
        /// <summary>
        /// Gets fired when the EventGroup__EventChannel property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> EventGroup__EventChannelChanged;
        
        /// <summary>
        /// Gets fired when the ParentStructure__EventChannel property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ParentStructure__EventChannelChanged;
        
        /// <summary>
        /// Raises the EventGroup__EventChannelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEventGroup__EventChannelChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.EventGroup__EventChannelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EventGroup__EventChannel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEventGroup__EventChannel(object sender, EventArgs eventArgs)
        {
            this.EventGroup__EventChannel = null;
        }
        
        /// <summary>
        /// Forwards change notifications for the EventChannelSourceConnector__EventChannel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventChannelSourceConnector__EventChannelCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EventChannelSourceConnector__EventChannel", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the EventChannelSinkConnector__EventChannel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventChannelSinkConnector__EventChannelCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EventChannelSinkConnector__EventChannel", e);
        }
        
        /// <summary>
        /// Raises the ParentStructure__EventChannelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentStructure__EventChannelChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ParentStructure__EventChannelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IComposedStructure oldParentStructure__EventChannel = ModelHelper.CastAs<IComposedStructure>(oldParent);
            IComposedStructure newParentStructure__EventChannel = ModelHelper.CastAs<IComposedStructure>(newParent);
            if ((oldParentStructure__EventChannel != null))
            {
                oldParentStructure__EventChannel.EventChannel__ComposedStructure.Remove(this);
            }
            if ((newParentStructure__EventChannel != null))
            {
                newParentStructure__EventChannel.EventChannel__ComposedStructure.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldParentStructure__EventChannel, newParentStructure__EventChannel);
            this.OnParentStructure__EventChannelChanged(e);
            this.OnPropertyChanged("ParentStructure__EventChannel", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EVENTCHANNELSOURCECONNECTOR__EVENTCHANNEL"))
            {
                return this._eventChannelSourceConnector__EventChannel;
            }
            if ((feature == "EVENTCHANNELSINKCONNECTOR__EVENTCHANNEL"))
            {
                return this._eventChannelSinkConnector__EventChannel;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EVENTGROUP__EVENTCHANNEL"))
            {
                this.EventGroup__EventChannel = ((IEventGroup)(value));
                return;
            }
            if ((feature == "PARENTSTRUCTURE__EVENTCHANNEL"))
            {
                this.ParentStructure__EventChannel = ((IComposedStructure)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EVENTGROUP__EVENTCHANNEL"))
            {
                return new EventGroup__EventChannelProxy(this);
            }
            if ((attribute == "PARENTSTRUCTURE__EVENTCHANNEL"))
            {
                return new ParentStructure__EventChannelProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EVENTGROUP__EVENTCHANNEL"))
            {
                return new EventGroup__EventChannelProxy(this);
            }
            if ((reference == "PARENTSTRUCTURE__EVENTCHANNEL"))
            {
                return new ParentStructure__EventChannelProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//EventChanne" +
                    "l/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EventChannel class
        /// </summary>
        public class EventChannelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EventChannel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EventChannelReferencedElementsCollection(EventChannel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EventGroup__EventChannel != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EventChannelSourceConnector__EventChannel.Count);
                    count = (count + this._parent.EventChannelSinkConnector__EventChannel.Count);
                    if ((this._parent.ParentStructure__EventChannel != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EventGroup__EventChannelChanged += this.PropagateValueChanges;
                this._parent.EventChannelSourceConnector__EventChannel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannelSinkConnector__EventChannel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentStructure__EventChannelChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EventGroup__EventChannelChanged -= this.PropagateValueChanges;
                this._parent.EventChannelSourceConnector__EventChannel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannelSinkConnector__EventChannel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentStructure__EventChannelChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EventGroup__EventChannel == null))
                {
                    IEventGroup eventGroup__EventChannelCasted = item.As<IEventGroup>();
                    if ((eventGroup__EventChannelCasted != null))
                    {
                        this._parent.EventGroup__EventChannel = eventGroup__EventChannelCasted;
                        return;
                    }
                }
                IEventChannelSourceConnector eventChannelSourceConnector__EventChannelCasted = item.As<IEventChannelSourceConnector>();
                if ((eventChannelSourceConnector__EventChannelCasted != null))
                {
                    this._parent.EventChannelSourceConnector__EventChannel.Add(eventChannelSourceConnector__EventChannelCasted);
                }
                IEventChannelSinkConnector eventChannelSinkConnector__EventChannelCasted = item.As<IEventChannelSinkConnector>();
                if ((eventChannelSinkConnector__EventChannelCasted != null))
                {
                    this._parent.EventChannelSinkConnector__EventChannel.Add(eventChannelSinkConnector__EventChannelCasted);
                }
                if ((this._parent.ParentStructure__EventChannel == null))
                {
                    IComposedStructure parentStructure__EventChannelCasted = item.As<IComposedStructure>();
                    if ((parentStructure__EventChannelCasted != null))
                    {
                        this._parent.ParentStructure__EventChannel = parentStructure__EventChannelCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EventGroup__EventChannel = null;
                this._parent.EventChannelSourceConnector__EventChannel.Clear();
                this._parent.EventChannelSinkConnector__EventChannel.Clear();
                this._parent.ParentStructure__EventChannel = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EventGroup__EventChannel))
                {
                    return true;
                }
                if (this._parent.EventChannelSourceConnector__EventChannel.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannelSinkConnector__EventChannel.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ParentStructure__EventChannel))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EventGroup__EventChannel != null))
                {
                    array[arrayIndex] = this._parent.EventGroup__EventChannel;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> eventChannelSourceConnector__EventChannelEnumerator = this._parent.EventChannelSourceConnector__EventChannel.GetEnumerator();
                try
                {
                    for (
                    ; eventChannelSourceConnector__EventChannelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannelSourceConnector__EventChannelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannelSourceConnector__EventChannelEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannelSinkConnector__EventChannelEnumerator = this._parent.EventChannelSinkConnector__EventChannel.GetEnumerator();
                try
                {
                    for (
                    ; eventChannelSinkConnector__EventChannelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannelSinkConnector__EventChannelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannelSinkConnector__EventChannelEnumerator.Dispose();
                }
                if ((this._parent.ParentStructure__EventChannel != null))
                {
                    array[arrayIndex] = this._parent.ParentStructure__EventChannel;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EventGroup__EventChannel == item))
                {
                    this._parent.EventGroup__EventChannel = null;
                    return true;
                }
                IEventChannelSourceConnector eventChannelSourceConnectorItem = item.As<IEventChannelSourceConnector>();
                if (((eventChannelSourceConnectorItem != null) 
                            && this._parent.EventChannelSourceConnector__EventChannel.Remove(eventChannelSourceConnectorItem)))
                {
                    return true;
                }
                IEventChannelSinkConnector eventChannelSinkConnectorItem = item.As<IEventChannelSinkConnector>();
                if (((eventChannelSinkConnectorItem != null) 
                            && this._parent.EventChannelSinkConnector__EventChannel.Remove(eventChannelSinkConnectorItem)))
                {
                    return true;
                }
                if ((this._parent.ParentStructure__EventChannel == item))
                {
                    this._parent.ParentStructure__EventChannel = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EventGroup__EventChannel).Concat(this._parent.EventChannelSourceConnector__EventChannel).Concat(this._parent.EventChannelSinkConnector__EventChannel).Concat(this._parent.ParentStructure__EventChannel).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the eventGroup__EventChannel property
        /// </summary>
        private sealed class EventGroup__EventChannelProxy : ModelPropertyChange<IEventChannel, IEventGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EventGroup__EventChannelProxy(IEventChannel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEventGroup Value
            {
                get
                {
                    return this.ModelElement.EventGroup__EventChannel;
                }
                set
                {
                    this.ModelElement.EventGroup__EventChannel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EventGroup__EventChannelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EventGroup__EventChannelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the parentStructure__EventChannel property
        /// </summary>
        private sealed class ParentStructure__EventChannelProxy : ModelPropertyChange<IEventChannel, IComposedStructure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentStructure__EventChannelProxy(IEventChannel modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IComposedStructure Value
            {
                get
                {
                    return this.ModelElement.ParentStructure__EventChannel;
                }
                set
                {
                    this.ModelElement.ParentStructure__EventChannel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParentStructure__EventChannelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ParentStructure__EventChannelChanged -= handler;
            }
        }
    }
}

