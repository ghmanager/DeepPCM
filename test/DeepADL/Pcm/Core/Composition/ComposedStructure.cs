//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Core.Composition
{
    
    
    /// <summary>
    /// The default implementation of the ComposedStructure class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/Core/Composition/5.0")]
    [XmlNamespacePrefixAttribute("composition")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//ComposedStr" +
        "ucture/")]
    [DebuggerDisplayAttribute("ComposedStructure {Id}")]
    public abstract class ComposedStructure : GeneratedCode.Pcm.Core.Entity.Entity, IComposedStructure, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AssemblyContexts__ComposedStructure property
        /// </summary>
        private ComposedStructureAssemblyContexts__ComposedStructureCollection _assemblyContexts__ComposedStructure;
        
        /// <summary>
        /// The backing field for the ResourceRequiredDelegationConnectors_ComposedStructure property
        /// </summary>
        private ComposedStructureResourceRequiredDelegationConnectors_ComposedStructureCollection _resourceRequiredDelegationConnectors_ComposedStructure;
        
        /// <summary>
        /// The backing field for the EventChannel__ComposedStructure property
        /// </summary>
        private ComposedStructureEventChannel__ComposedStructureCollection _eventChannel__ComposedStructure;
        
        /// <summary>
        /// The backing field for the Connectors__ComposedStructure property
        /// </summary>
        private ComposedStructureConnectors__ComposedStructureCollection _connectors__ComposedStructure;
        
        public ComposedStructure()
        {
            this._assemblyContexts__ComposedStructure = new ComposedStructureAssemblyContexts__ComposedStructureCollection(this);
            this._assemblyContexts__ComposedStructure.CollectionChanged += this.AssemblyContexts__ComposedStructureCollectionChanged;
            this._resourceRequiredDelegationConnectors_ComposedStructure = new ComposedStructureResourceRequiredDelegationConnectors_ComposedStructureCollection(this);
            this._resourceRequiredDelegationConnectors_ComposedStructure.CollectionChanged += this.ResourceRequiredDelegationConnectors_ComposedStructureCollectionChanged;
            this._eventChannel__ComposedStructure = new ComposedStructureEventChannel__ComposedStructureCollection(this);
            this._eventChannel__ComposedStructure.CollectionChanged += this.EventChannel__ComposedStructureCollectionChanged;
            this._connectors__ComposedStructure = new ComposedStructureConnectors__ComposedStructureCollection(this);
            this._connectors__ComposedStructure.CollectionChanged += this.Connectors__ComposedStructureCollectionChanged;
        }
        
        /// <summary>
        /// The assemblyContexts__ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("assemblyContexts__ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentStructure__AssemblyContext")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IAssemblyContext> AssemblyContexts__ComposedStructure
        {
            get
            {
                return this._assemblyContexts__ComposedStructure;
            }
        }
        
        /// <summary>
        /// The resourceRequiredDelegationConnectors_ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("resourceRequiredDelegationConnectors_ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentStructure_ResourceRequiredDelegationConnector")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IResourceRequiredDelegationConnector> ResourceRequiredDelegationConnectors_ComposedStructure
        {
            get
            {
                return this._resourceRequiredDelegationConnectors_ComposedStructure;
            }
        }
        
        /// <summary>
        /// The eventChannel__ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("eventChannel__ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentStructure__EventChannel")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IEventChannel> EventChannel__ComposedStructure
        {
            get
            {
                return this._eventChannel__ComposedStructure;
            }
        }
        
        /// <summary>
        /// The connectors__ComposedStructure property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("connectors__ComposedStructure")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("parentStructure__Connector")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IConnector> Connectors__ComposedStructure
        {
            get
            {
                return this._connectors__ComposedStructure;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ComposedStructureChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ComposedStructureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//ComposedStr" +
                        "ucture/");
            }
        }
        
        /// <summary>
        /// Forwards change notifications for the AssemblyContexts__ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssemblyContexts__ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssemblyContexts__ComposedStructure", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the ResourceRequiredDelegationConnectors_ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceRequiredDelegationConnectors_ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceRequiredDelegationConnectors_ComposedStructure", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the EventChannel__ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EventChannel__ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EventChannel__ComposedStructure", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the Connectors__ComposedStructure property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Connectors__ComposedStructureCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Connectors__ComposedStructure", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ASSEMBLYCONTEXTS__COMPOSEDSTRUCTURE"))
            {
                return this._assemblyContexts__ComposedStructure;
            }
            if ((feature == "RESOURCEREQUIREDDELEGATIONCONNECTORS_COMPOSEDSTRUCTURE"))
            {
                return this._resourceRequiredDelegationConnectors_ComposedStructure;
            }
            if ((feature == "EVENTCHANNEL__COMPOSEDSTRUCTURE"))
            {
                return this._eventChannel__ComposedStructure;
            }
            if ((feature == "CONNECTORS__COMPOSEDSTRUCTURE"))
            {
                return this._connectors__ComposedStructure;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//core//composition//ComposedStr" +
                    "ucture/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ComposedStructure class
        /// </summary>
        public class ComposedStructureChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ComposedStructure _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ComposedStructureChildrenCollection(ComposedStructure parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AssemblyContexts__ComposedStructure.Count);
                    count = (count + this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Count);
                    count = (count + this._parent.EventChannel__ComposedStructure.Count);
                    count = (count + this._parent.Connectors__ComposedStructure.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAssemblyContext assemblyContexts__ComposedStructureCasted = item.As<IAssemblyContext>();
                if ((assemblyContexts__ComposedStructureCasted != null))
                {
                    this._parent.AssemblyContexts__ComposedStructure.Add(assemblyContexts__ComposedStructureCasted);
                }
                IResourceRequiredDelegationConnector resourceRequiredDelegationConnectors_ComposedStructureCasted = item.As<IResourceRequiredDelegationConnector>();
                if ((resourceRequiredDelegationConnectors_ComposedStructureCasted != null))
                {
                    this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Add(resourceRequiredDelegationConnectors_ComposedStructureCasted);
                }
                IEventChannel eventChannel__ComposedStructureCasted = item.As<IEventChannel>();
                if ((eventChannel__ComposedStructureCasted != null))
                {
                    this._parent.EventChannel__ComposedStructure.Add(eventChannel__ComposedStructureCasted);
                }
                IConnector connectors__ComposedStructureCasted = item.As<IConnector>();
                if ((connectors__ComposedStructureCasted != null))
                {
                    this._parent.Connectors__ComposedStructure.Add(connectors__ComposedStructureCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AssemblyContexts__ComposedStructure.Clear();
                this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Clear();
                this._parent.EventChannel__ComposedStructure.Clear();
                this._parent.Connectors__ComposedStructure.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AssemblyContexts__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannel__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.Connectors__ComposedStructure.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> assemblyContexts__ComposedStructureEnumerator = this._parent.AssemblyContexts__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; assemblyContexts__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assemblyContexts__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assemblyContexts__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resourceRequiredDelegationConnectors_ComposedStructureEnumerator = this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; resourceRequiredDelegationConnectors_ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceRequiredDelegationConnectors_ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceRequiredDelegationConnectors_ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannel__ComposedStructureEnumerator = this._parent.EventChannel__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; eventChannel__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannel__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannel__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> connectors__ComposedStructureEnumerator = this._parent.Connectors__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; connectors__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectors__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectors__ComposedStructureEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAssemblyContext assemblyContextItem = item.As<IAssemblyContext>();
                if (((assemblyContextItem != null) 
                            && this._parent.AssemblyContexts__ComposedStructure.Remove(assemblyContextItem)))
                {
                    return true;
                }
                IResourceRequiredDelegationConnector resourceRequiredDelegationConnectorItem = item.As<IResourceRequiredDelegationConnector>();
                if (((resourceRequiredDelegationConnectorItem != null) 
                            && this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Remove(resourceRequiredDelegationConnectorItem)))
                {
                    return true;
                }
                IEventChannel eventChannelItem = item.As<IEventChannel>();
                if (((eventChannelItem != null) 
                            && this._parent.EventChannel__ComposedStructure.Remove(eventChannelItem)))
                {
                    return true;
                }
                IConnector connectorItem = item.As<IConnector>();
                if (((connectorItem != null) 
                            && this._parent.Connectors__ComposedStructure.Remove(connectorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AssemblyContexts__ComposedStructure).Concat(this._parent.ResourceRequiredDelegationConnectors_ComposedStructure).Concat(this._parent.EventChannel__ComposedStructure).Concat(this._parent.Connectors__ComposedStructure).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ComposedStructure class
        /// </summary>
        public class ComposedStructureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ComposedStructure _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ComposedStructureReferencedElementsCollection(ComposedStructure parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AssemblyContexts__ComposedStructure.Count);
                    count = (count + this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Count);
                    count = (count + this._parent.EventChannel__ComposedStructure.Count);
                    count = (count + this._parent.Connectors__ComposedStructure.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssemblyContexts__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EventChannel__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Connectors__ComposedStructure.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAssemblyContext assemblyContexts__ComposedStructureCasted = item.As<IAssemblyContext>();
                if ((assemblyContexts__ComposedStructureCasted != null))
                {
                    this._parent.AssemblyContexts__ComposedStructure.Add(assemblyContexts__ComposedStructureCasted);
                }
                IResourceRequiredDelegationConnector resourceRequiredDelegationConnectors_ComposedStructureCasted = item.As<IResourceRequiredDelegationConnector>();
                if ((resourceRequiredDelegationConnectors_ComposedStructureCasted != null))
                {
                    this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Add(resourceRequiredDelegationConnectors_ComposedStructureCasted);
                }
                IEventChannel eventChannel__ComposedStructureCasted = item.As<IEventChannel>();
                if ((eventChannel__ComposedStructureCasted != null))
                {
                    this._parent.EventChannel__ComposedStructure.Add(eventChannel__ComposedStructureCasted);
                }
                IConnector connectors__ComposedStructureCasted = item.As<IConnector>();
                if ((connectors__ComposedStructureCasted != null))
                {
                    this._parent.Connectors__ComposedStructure.Add(connectors__ComposedStructureCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AssemblyContexts__ComposedStructure.Clear();
                this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Clear();
                this._parent.EventChannel__ComposedStructure.Clear();
                this._parent.Connectors__ComposedStructure.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AssemblyContexts__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.EventChannel__ComposedStructure.Contains(item))
                {
                    return true;
                }
                if (this._parent.Connectors__ComposedStructure.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> assemblyContexts__ComposedStructureEnumerator = this._parent.AssemblyContexts__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; assemblyContexts__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assemblyContexts__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assemblyContexts__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resourceRequiredDelegationConnectors_ComposedStructureEnumerator = this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; resourceRequiredDelegationConnectors_ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceRequiredDelegationConnectors_ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceRequiredDelegationConnectors_ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> eventChannel__ComposedStructureEnumerator = this._parent.EventChannel__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; eventChannel__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = eventChannel__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    eventChannel__ComposedStructureEnumerator.Dispose();
                }
                IEnumerator<IModelElement> connectors__ComposedStructureEnumerator = this._parent.Connectors__ComposedStructure.GetEnumerator();
                try
                {
                    for (
                    ; connectors__ComposedStructureEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectors__ComposedStructureEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectors__ComposedStructureEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAssemblyContext assemblyContextItem = item.As<IAssemblyContext>();
                if (((assemblyContextItem != null) 
                            && this._parent.AssemblyContexts__ComposedStructure.Remove(assemblyContextItem)))
                {
                    return true;
                }
                IResourceRequiredDelegationConnector resourceRequiredDelegationConnectorItem = item.As<IResourceRequiredDelegationConnector>();
                if (((resourceRequiredDelegationConnectorItem != null) 
                            && this._parent.ResourceRequiredDelegationConnectors_ComposedStructure.Remove(resourceRequiredDelegationConnectorItem)))
                {
                    return true;
                }
                IEventChannel eventChannelItem = item.As<IEventChannel>();
                if (((eventChannelItem != null) 
                            && this._parent.EventChannel__ComposedStructure.Remove(eventChannelItem)))
                {
                    return true;
                }
                IConnector connectorItem = item.As<IConnector>();
                if (((connectorItem != null) 
                            && this._parent.Connectors__ComposedStructure.Remove(connectorItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AssemblyContexts__ComposedStructure).Concat(this._parent.ResourceRequiredDelegationConnectors_ComposedStructure).Concat(this._parent.EventChannel__ComposedStructure).Concat(this._parent.Connectors__ComposedStructure).GetEnumerator();
            }
        }
    }
}

