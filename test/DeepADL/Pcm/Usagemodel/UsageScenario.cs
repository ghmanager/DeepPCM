//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Composition;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Usagemodel
{
    
    
    /// <summary>
    /// The default implementation of the UsageScenario class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0")]
    [XmlNamespacePrefixAttribute("usagemodel")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//UsageScenario/")]
    [DebuggerDisplayAttribute("UsageScenario {Id}")]
    public class UsageScenario : GeneratedCode.Pcm.Core.Entity.Entity, IUsageScenario, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ScenarioBehaviour_UsageScenario property
        /// </summary>
        private IScenarioBehaviour _scenarioBehaviour_UsageScenario;
        
        /// <summary>
        /// The backing field for the Workload_UsageScenario property
        /// </summary>
        private IWorkload _workload_UsageScenario;
        
        /// <summary>
        /// The usageModel_UsageScenario property
        /// </summary>
        [XmlElementNameAttribute("usageModel_UsageScenario")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("usageScenario_UsageModel")]
        public virtual IUsageModel UsageModel_UsageScenario
        {
            get
            {
                return ModelHelper.CastAs<IUsageModel>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The scenarioBehaviour_UsageScenario property
        /// </summary>
        [XmlElementNameAttribute("scenarioBehaviour_UsageScenario")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("usageScenario_SenarioBehaviour")]
        public virtual IScenarioBehaviour ScenarioBehaviour_UsageScenario
        {
            get
            {
                return this._scenarioBehaviour_UsageScenario;
            }
            set
            {
                if ((this._scenarioBehaviour_UsageScenario != value))
                {
                    IScenarioBehaviour old = this._scenarioBehaviour_UsageScenario;
                    this._scenarioBehaviour_UsageScenario = value;
                    if ((old != null))
                    {
                        old.UsageScenario_SenarioBehaviour = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetScenarioBehaviour_UsageScenario;
                    }
                    if ((value != null))
                    {
                        value.UsageScenario_SenarioBehaviour = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetScenarioBehaviour_UsageScenario;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScenarioBehaviour_UsageScenarioChanged(e);
                    this.OnPropertyChanged("ScenarioBehaviour_UsageScenario", e);
                }
            }
        }
        
        /// <summary>
        /// The workload_UsageScenario property
        /// </summary>
        [XmlElementNameAttribute("workload_UsageScenario")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("usageScenario_Workload")]
        public virtual IWorkload Workload_UsageScenario
        {
            get
            {
                return this._workload_UsageScenario;
            }
            set
            {
                if ((this._workload_UsageScenario != value))
                {
                    IWorkload old = this._workload_UsageScenario;
                    this._workload_UsageScenario = value;
                    if ((old != null))
                    {
                        old.UsageScenario_Workload = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetWorkload_UsageScenario;
                    }
                    if ((value != null))
                    {
                        value.UsageScenario_Workload = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetWorkload_UsageScenario;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkload_UsageScenarioChanged(e);
                    this.OnPropertyChanged("Workload_UsageScenario", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new UsageScenarioChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UsageScenarioReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//UsageScenario/");
            }
        }
        
        /// <summary>
        /// Gets fired when the UsageModel_UsageScenario property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UsageModel_UsageScenarioChanged;
        
        /// <summary>
        /// Gets fired when the ScenarioBehaviour_UsageScenario property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> ScenarioBehaviour_UsageScenarioChanged;
        
        /// <summary>
        /// Gets fired when the Workload_UsageScenario property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Workload_UsageScenarioChanged;
        
        /// <summary>
        /// Raises the UsageModel_UsageScenarioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageModel_UsageScenarioChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UsageModel_UsageScenarioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IUsageModel oldUsageModel_UsageScenario = ModelHelper.CastAs<IUsageModel>(oldParent);
            IUsageModel newUsageModel_UsageScenario = ModelHelper.CastAs<IUsageModel>(newParent);
            if ((oldUsageModel_UsageScenario != null))
            {
                oldUsageModel_UsageScenario.UsageScenario_UsageModel.Remove(this);
            }
            if ((newUsageModel_UsageScenario != null))
            {
                newUsageModel_UsageScenario.UsageScenario_UsageModel.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldUsageModel_UsageScenario, newUsageModel_UsageScenario);
            this.OnUsageModel_UsageScenarioChanged(e);
            this.OnPropertyChanged("UsageModel_UsageScenario", e);
        }
        
        /// <summary>
        /// Raises the ScenarioBehaviour_UsageScenarioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScenarioBehaviour_UsageScenarioChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.ScenarioBehaviour_UsageScenarioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ScenarioBehaviour_UsageScenario property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetScenarioBehaviour_UsageScenario(object sender, EventArgs eventArgs)
        {
            this.ScenarioBehaviour_UsageScenario = null;
        }
        
        /// <summary>
        /// Raises the Workload_UsageScenarioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkload_UsageScenarioChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Workload_UsageScenarioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Workload_UsageScenario property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkload_UsageScenario(object sender, EventArgs eventArgs)
        {
            this.Workload_UsageScenario = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.ScenarioBehaviour_UsageScenario))
            {
                return ModelHelper.CreatePath("ScenarioBehaviour_UsageScenario");
            }
            if ((element == this.Workload_UsageScenario))
            {
                return ModelHelper.CreatePath("Workload_UsageScenario");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SCENARIOBEHAVIOUR_USAGESCENARIO"))
            {
                return this.ScenarioBehaviour_UsageScenario;
            }
            if ((reference == "WORKLOAD_USAGESCENARIO"))
            {
                return this.Workload_UsageScenario;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "USAGEMODEL_USAGESCENARIO"))
            {
                this.UsageModel_UsageScenario = ((IUsageModel)(value));
                return;
            }
            if ((feature == "SCENARIOBEHAVIOUR_USAGESCENARIO"))
            {
                this.ScenarioBehaviour_UsageScenario = ((IScenarioBehaviour)(value));
                return;
            }
            if ((feature == "WORKLOAD_USAGESCENARIO"))
            {
                this.Workload_UsageScenario = ((IWorkload)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "USAGEMODEL_USAGESCENARIO"))
            {
                return new UsageModel_UsageScenarioProxy(this);
            }
            if ((attribute == "SCENARIOBEHAVIOUR_USAGESCENARIO"))
            {
                return new ScenarioBehaviour_UsageScenarioProxy(this);
            }
            if ((attribute == "WORKLOAD_USAGESCENARIO"))
            {
                return new Workload_UsageScenarioProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "USAGEMODEL_USAGESCENARIO"))
            {
                return new UsageModel_UsageScenarioProxy(this);
            }
            if ((reference == "SCENARIOBEHAVIOUR_USAGESCENARIO"))
            {
                return new ScenarioBehaviour_UsageScenarioProxy(this);
            }
            if ((reference == "WORKLOAD_USAGESCENARIO"))
            {
                return new Workload_UsageScenarioProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//UsageScenario/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UsageScenario class
        /// </summary>
        public class UsageScenarioChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UsageScenario _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UsageScenarioChildrenCollection(UsageScenario parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ScenarioBehaviour_UsageScenario != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Workload_UsageScenario != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ScenarioBehaviour_UsageScenarioChanged += this.PropagateValueChanges;
                this._parent.Workload_UsageScenarioChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ScenarioBehaviour_UsageScenarioChanged -= this.PropagateValueChanges;
                this._parent.Workload_UsageScenarioChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ScenarioBehaviour_UsageScenario == null))
                {
                    IScenarioBehaviour scenarioBehaviour_UsageScenarioCasted = item.As<IScenarioBehaviour>();
                    if ((scenarioBehaviour_UsageScenarioCasted != null))
                    {
                        this._parent.ScenarioBehaviour_UsageScenario = scenarioBehaviour_UsageScenarioCasted;
                        return;
                    }
                }
                if ((this._parent.Workload_UsageScenario == null))
                {
                    IWorkload workload_UsageScenarioCasted = item.As<IWorkload>();
                    if ((workload_UsageScenarioCasted != null))
                    {
                        this._parent.Workload_UsageScenario = workload_UsageScenarioCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ScenarioBehaviour_UsageScenario = null;
                this._parent.Workload_UsageScenario = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ScenarioBehaviour_UsageScenario))
                {
                    return true;
                }
                if ((item == this._parent.Workload_UsageScenario))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ScenarioBehaviour_UsageScenario != null))
                {
                    array[arrayIndex] = this._parent.ScenarioBehaviour_UsageScenario;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Workload_UsageScenario != null))
                {
                    array[arrayIndex] = this._parent.Workload_UsageScenario;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ScenarioBehaviour_UsageScenario == item))
                {
                    this._parent.ScenarioBehaviour_UsageScenario = null;
                    return true;
                }
                if ((this._parent.Workload_UsageScenario == item))
                {
                    this._parent.Workload_UsageScenario = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ScenarioBehaviour_UsageScenario).Concat(this._parent.Workload_UsageScenario).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UsageScenario class
        /// </summary>
        public class UsageScenarioReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UsageScenario _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UsageScenarioReferencedElementsCollection(UsageScenario parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.UsageModel_UsageScenario != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ScenarioBehaviour_UsageScenario != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Workload_UsageScenario != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UsageModel_UsageScenarioChanged += this.PropagateValueChanges;
                this._parent.ScenarioBehaviour_UsageScenarioChanged += this.PropagateValueChanges;
                this._parent.Workload_UsageScenarioChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UsageModel_UsageScenarioChanged -= this.PropagateValueChanges;
                this._parent.ScenarioBehaviour_UsageScenarioChanged -= this.PropagateValueChanges;
                this._parent.Workload_UsageScenarioChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.UsageModel_UsageScenario == null))
                {
                    IUsageModel usageModel_UsageScenarioCasted = item.As<IUsageModel>();
                    if ((usageModel_UsageScenarioCasted != null))
                    {
                        this._parent.UsageModel_UsageScenario = usageModel_UsageScenarioCasted;
                        return;
                    }
                }
                if ((this._parent.ScenarioBehaviour_UsageScenario == null))
                {
                    IScenarioBehaviour scenarioBehaviour_UsageScenarioCasted = item.As<IScenarioBehaviour>();
                    if ((scenarioBehaviour_UsageScenarioCasted != null))
                    {
                        this._parent.ScenarioBehaviour_UsageScenario = scenarioBehaviour_UsageScenarioCasted;
                        return;
                    }
                }
                if ((this._parent.Workload_UsageScenario == null))
                {
                    IWorkload workload_UsageScenarioCasted = item.As<IWorkload>();
                    if ((workload_UsageScenarioCasted != null))
                    {
                        this._parent.Workload_UsageScenario = workload_UsageScenarioCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UsageModel_UsageScenario = null;
                this._parent.ScenarioBehaviour_UsageScenario = null;
                this._parent.Workload_UsageScenario = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.UsageModel_UsageScenario))
                {
                    return true;
                }
                if ((item == this._parent.ScenarioBehaviour_UsageScenario))
                {
                    return true;
                }
                if ((item == this._parent.Workload_UsageScenario))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.UsageModel_UsageScenario != null))
                {
                    array[arrayIndex] = this._parent.UsageModel_UsageScenario;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ScenarioBehaviour_UsageScenario != null))
                {
                    array[arrayIndex] = this._parent.ScenarioBehaviour_UsageScenario;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Workload_UsageScenario != null))
                {
                    array[arrayIndex] = this._parent.Workload_UsageScenario;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.UsageModel_UsageScenario == item))
                {
                    this._parent.UsageModel_UsageScenario = null;
                    return true;
                }
                if ((this._parent.ScenarioBehaviour_UsageScenario == item))
                {
                    this._parent.ScenarioBehaviour_UsageScenario = null;
                    return true;
                }
                if ((this._parent.Workload_UsageScenario == item))
                {
                    this._parent.Workload_UsageScenario = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UsageModel_UsageScenario).Concat(this._parent.ScenarioBehaviour_UsageScenario).Concat(this._parent.Workload_UsageScenario).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usageModel_UsageScenario property
        /// </summary>
        private sealed class UsageModel_UsageScenarioProxy : ModelPropertyChange<IUsageScenario, IUsageModel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsageModel_UsageScenarioProxy(IUsageScenario modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUsageModel Value
            {
                get
                {
                    return this.ModelElement.UsageModel_UsageScenario;
                }
                set
                {
                    this.ModelElement.UsageModel_UsageScenario = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UsageModel_UsageScenarioChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UsageModel_UsageScenarioChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scenarioBehaviour_UsageScenario property
        /// </summary>
        private sealed class ScenarioBehaviour_UsageScenarioProxy : ModelPropertyChange<IUsageScenario, IScenarioBehaviour>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScenarioBehaviour_UsageScenarioProxy(IUsageScenario modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScenarioBehaviour Value
            {
                get
                {
                    return this.ModelElement.ScenarioBehaviour_UsageScenario;
                }
                set
                {
                    this.ModelElement.ScenarioBehaviour_UsageScenario = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScenarioBehaviour_UsageScenarioChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ScenarioBehaviour_UsageScenarioChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the workload_UsageScenario property
        /// </summary>
        private sealed class Workload_UsageScenarioProxy : ModelPropertyChange<IUsageScenario, IWorkload>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Workload_UsageScenarioProxy(IUsageScenario modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkload Value
            {
                get
                {
                    return this.ModelElement.Workload_UsageScenario;
                }
                set
                {
                    this.ModelElement.Workload_UsageScenario = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Workload_UsageScenarioChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Workload_UsageScenarioChanged -= handler;
            }
        }
    }
}

