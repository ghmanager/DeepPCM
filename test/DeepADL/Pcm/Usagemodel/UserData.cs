//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Composition;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Repository;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Usagemodel
{
    
    
    /// <summary>
    /// The default implementation of the UserData class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/UsageModel/5.0")]
    [XmlNamespacePrefixAttribute("usagemodel")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//UserData/")]
    public class UserData : ModelElement, IUserData, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AssemblyContext_userData property
        /// </summary>
        private IAssemblyContext _assemblyContext_userData;
        
        /// <summary>
        /// The backing field for the UserDataParameterUsages_UserData property
        /// </summary>
        private UserDataUserDataParameterUsages_UserDataCollection _userDataParameterUsages_UserData;
        
        public UserData()
        {
            this._userDataParameterUsages_UserData = new UserDataUserDataParameterUsages_UserDataCollection(this);
            this._userDataParameterUsages_UserData.CollectionChanged += this.UserDataParameterUsages_UserDataCollectionChanged;
        }
        
        /// <summary>
        /// The assemblyContext_userData property
        /// </summary>
        [XmlElementNameAttribute("assemblyContext_userData")]
        [XmlAttributeAttribute(true)]
        public virtual IAssemblyContext AssemblyContext_userData
        {
            get
            {
                return this._assemblyContext_userData;
            }
            set
            {
                if ((this._assemblyContext_userData != value))
                {
                    IAssemblyContext old = this._assemblyContext_userData;
                    this._assemblyContext_userData = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAssemblyContext_userData;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAssemblyContext_userData;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssemblyContext_userDataChanged(e);
                    this.OnPropertyChanged("AssemblyContext_userData", e);
                }
            }
        }
        
        /// <summary>
        /// The usageModel_UserData property
        /// </summary>
        [XmlElementNameAttribute("usageModel_UserData")]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Hidden)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("userData_UsageModel")]
        public virtual IUsageModel UsageModel_UserData
        {
            get
            {
                return ModelHelper.CastAs<IUsageModel>(this.Parent);
            }
            set
            {
                this.Parent = value;
            }
        }
        
        /// <summary>
        /// The userDataParameterUsages_UserData property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("userDataParameterUsages_UserData")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("userData_VariableUsage")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IVariableUsage> UserDataParameterUsages_UserData
        {
            get
            {
                return this._userDataParameterUsages_UserData;
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new UserDataChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UserDataReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//UserData/");
            }
        }
        
        /// <summary>
        /// Gets fired when the AssemblyContext_userData property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> AssemblyContext_userDataChanged;
        
        /// <summary>
        /// Gets fired when the UsageModel_UserData property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> UsageModel_UserDataChanged;
        
        /// <summary>
        /// Raises the AssemblyContext_userDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssemblyContext_userDataChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.AssemblyContext_userDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssemblyContext_userData property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssemblyContext_userData(object sender, EventArgs eventArgs)
        {
            this.AssemblyContext_userData = null;
        }
        
        /// <summary>
        /// Raises the UsageModel_UserDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageModel_UserDataChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.UsageModel_UserDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets called when the parent model element of the current model element changes
        /// </summary>
        /// <param name="oldParent">The old parent model element</param>
        /// <param name="newParent">The new parent model element</param>
        protected override void OnParentChanged(IModelElement newParent, IModelElement oldParent)
        {
            IUsageModel oldUsageModel_UserData = ModelHelper.CastAs<IUsageModel>(oldParent);
            IUsageModel newUsageModel_UserData = ModelHelper.CastAs<IUsageModel>(newParent);
            if ((oldUsageModel_UserData != null))
            {
                oldUsageModel_UserData.UserData_UsageModel.Remove(this);
            }
            if ((newUsageModel_UserData != null))
            {
                newUsageModel_UserData.UserData_UsageModel.Add(this);
            }
            ValueChangedEventArgs e = new ValueChangedEventArgs(oldUsageModel_UserData, newUsageModel_UserData);
            this.OnUsageModel_UserDataChanged(e);
            this.OnPropertyChanged("UsageModel_UserData", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the UserDataParameterUsages_UserData property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserDataParameterUsages_UserDataCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserDataParameterUsages_UserData", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USERDATAPARAMETERUSAGES_USERDATA"))
            {
                return this._userDataParameterUsages_UserData;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSEMBLYCONTEXT_USERDATA"))
            {
                this.AssemblyContext_userData = ((IAssemblyContext)(value));
                return;
            }
            if ((feature == "USAGEMODEL_USERDATA"))
            {
                this.UsageModel_UserData = ((IUsageModel)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ASSEMBLYCONTEXT_USERDATA"))
            {
                return new AssemblyContext_userDataProxy(this);
            }
            if ((attribute == "USAGEMODEL_USERDATA"))
            {
                return new UsageModel_UserDataProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ASSEMBLYCONTEXT_USERDATA"))
            {
                return new AssemblyContext_userDataProxy(this);
            }
            if ((reference == "USAGEMODEL_USERDATA"))
            {
                return new UsageModel_UserDataProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//usagemodel//UserData/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UserData class
        /// </summary>
        public class UserDataChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UserData _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UserDataChildrenCollection(UserData parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UserDataParameterUsages_UserData.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UserDataParameterUsages_UserData.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UserDataParameterUsages_UserData.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IVariableUsage userDataParameterUsages_UserDataCasted = item.As<IVariableUsage>();
                if ((userDataParameterUsages_UserDataCasted != null))
                {
                    this._parent.UserDataParameterUsages_UserData.Add(userDataParameterUsages_UserDataCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UserDataParameterUsages_UserData.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UserDataParameterUsages_UserData.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> userDataParameterUsages_UserDataEnumerator = this._parent.UserDataParameterUsages_UserData.GetEnumerator();
                try
                {
                    for (
                    ; userDataParameterUsages_UserDataEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userDataParameterUsages_UserDataEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userDataParameterUsages_UserDataEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.UserDataParameterUsages_UserData.Remove(variableUsageItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UserDataParameterUsages_UserData).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UserData class
        /// </summary>
        public class UserDataReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UserData _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UserDataReferencedElementsCollection(UserData parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AssemblyContext_userData != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.UsageModel_UserData != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.UserDataParameterUsages_UserData.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssemblyContext_userDataChanged += this.PropagateValueChanges;
                this._parent.UsageModel_UserDataChanged += this.PropagateValueChanges;
                this._parent.UserDataParameterUsages_UserData.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssemblyContext_userDataChanged -= this.PropagateValueChanges;
                this._parent.UsageModel_UserDataChanged -= this.PropagateValueChanges;
                this._parent.UserDataParameterUsages_UserData.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AssemblyContext_userData == null))
                {
                    IAssemblyContext assemblyContext_userDataCasted = item.As<IAssemblyContext>();
                    if ((assemblyContext_userDataCasted != null))
                    {
                        this._parent.AssemblyContext_userData = assemblyContext_userDataCasted;
                        return;
                    }
                }
                if ((this._parent.UsageModel_UserData == null))
                {
                    IUsageModel usageModel_UserDataCasted = item.As<IUsageModel>();
                    if ((usageModel_UserDataCasted != null))
                    {
                        this._parent.UsageModel_UserData = usageModel_UserDataCasted;
                        return;
                    }
                }
                IVariableUsage userDataParameterUsages_UserDataCasted = item.As<IVariableUsage>();
                if ((userDataParameterUsages_UserDataCasted != null))
                {
                    this._parent.UserDataParameterUsages_UserData.Add(userDataParameterUsages_UserDataCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AssemblyContext_userData = null;
                this._parent.UsageModel_UserData = null;
                this._parent.UserDataParameterUsages_UserData.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AssemblyContext_userData))
                {
                    return true;
                }
                if ((item == this._parent.UsageModel_UserData))
                {
                    return true;
                }
                if (this._parent.UserDataParameterUsages_UserData.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AssemblyContext_userData != null))
                {
                    array[arrayIndex] = this._parent.AssemblyContext_userData;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.UsageModel_UserData != null))
                {
                    array[arrayIndex] = this._parent.UsageModel_UserData;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> userDataParameterUsages_UserDataEnumerator = this._parent.UserDataParameterUsages_UserData.GetEnumerator();
                try
                {
                    for (
                    ; userDataParameterUsages_UserDataEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userDataParameterUsages_UserDataEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userDataParameterUsages_UserDataEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AssemblyContext_userData == item))
                {
                    this._parent.AssemblyContext_userData = null;
                    return true;
                }
                if ((this._parent.UsageModel_UserData == item))
                {
                    this._parent.UsageModel_UserData = null;
                    return true;
                }
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.UserDataParameterUsages_UserData.Remove(variableUsageItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AssemblyContext_userData).Concat(this._parent.UsageModel_UserData).Concat(this._parent.UserDataParameterUsages_UserData).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the assemblyContext_userData property
        /// </summary>
        private sealed class AssemblyContext_userDataProxy : ModelPropertyChange<IUserData, IAssemblyContext>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssemblyContext_userDataProxy(IUserData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssemblyContext Value
            {
                get
                {
                    return this.ModelElement.AssemblyContext_userData;
                }
                set
                {
                    this.ModelElement.AssemblyContext_userData = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext_userDataChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AssemblyContext_userDataChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usageModel_UserData property
        /// </summary>
        private sealed class UsageModel_UserDataProxy : ModelPropertyChange<IUserData, IUsageModel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsageModel_UserDataProxy(IUserData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUsageModel Value
            {
                get
                {
                    return this.ModelElement.UsageModel_UserData;
                }
                set
                {
                    this.ModelElement.UsageModel_UserData = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UsageModel_UserDataChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UsageModel_UserDataChanged -= handler;
            }
        }
    }
}

