//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Identifier;
using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Reliability;
using GeneratedCode.Pcm.Repository;
using GeneratedCode.Pcm.Seff.Seff_performance;
using GeneratedCode.Pcm.Seff.Seff_reliability;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Seff
{
    
    
    /// <summary>
    /// The default implementation of the ForkAction class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0")]
    [XmlNamespacePrefixAttribute("seff")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//ForkAction/")]
    [DebuggerDisplayAttribute("ForkAction {Id}")]
    public class ForkAction : AbstractInternalControlFlowAction, IForkAction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AsynchronousForkedBehaviours_ForkAction property
        /// </summary>
        private ForkActionAsynchronousForkedBehaviours_ForkActionCollection _asynchronousForkedBehaviours_ForkAction;
        
        /// <summary>
        /// The backing field for the SynchronisingBehaviours_ForkAction property
        /// </summary>
        private ISynchronisationPoint _synchronisingBehaviours_ForkAction;
        
        public ForkAction()
        {
            this._asynchronousForkedBehaviours_ForkAction = new ForkActionAsynchronousForkedBehaviours_ForkActionCollection(this);
            this._asynchronousForkedBehaviours_ForkAction.CollectionChanged += this.AsynchronousForkedBehaviours_ForkActionCollectionChanged;
        }
        
        /// <summary>
        /// The asynchronousForkedBehaviours_ForkAction property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("asynchronousForkedBehaviours_ForkAction")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("forkAction_ForkedBehaivour")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IForkedBehaviour> AsynchronousForkedBehaviours_ForkAction
        {
            get
            {
                return this._asynchronousForkedBehaviours_ForkAction;
            }
        }
        
        /// <summary>
        /// The synchronisingBehaviours_ForkAction property
        /// </summary>
        [XmlElementNameAttribute("synchronisingBehaviours_ForkAction")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("forkAction_SynchronisationPoint")]
        public virtual ISynchronisationPoint SynchronisingBehaviours_ForkAction
        {
            get
            {
                return this._synchronisingBehaviours_ForkAction;
            }
            set
            {
                if ((this._synchronisingBehaviours_ForkAction != value))
                {
                    ISynchronisationPoint old = this._synchronisingBehaviours_ForkAction;
                    this._synchronisingBehaviours_ForkAction = value;
                    if ((old != null))
                    {
                        old.ForkAction_SynchronisationPoint = null;
                        old.Parent = null;
                        old.Deleted -= this.OnResetSynchronisingBehaviours_ForkAction;
                    }
                    if ((value != null))
                    {
                        value.ForkAction_SynchronisationPoint = this;
                        value.Parent = this;
                        value.Deleted += this.OnResetSynchronisingBehaviours_ForkAction;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSynchronisingBehaviours_ForkActionChanged(e);
                    this.OnPropertyChanged("SynchronisingBehaviours_ForkAction", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new ForkActionChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ForkActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//ForkAction/");
            }
        }
        
        /// <summary>
        /// Gets fired when the SynchronisingBehaviours_ForkAction property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> SynchronisingBehaviours_ForkActionChanged;
        
        /// <summary>
        /// Forwards change notifications for the AsynchronousForkedBehaviours_ForkAction property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AsynchronousForkedBehaviours_ForkActionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AsynchronousForkedBehaviours_ForkAction", e);
        }
        
        /// <summary>
        /// Raises the SynchronisingBehaviours_ForkActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSynchronisingBehaviours_ForkActionChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.SynchronisingBehaviours_ForkActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SynchronisingBehaviours_ForkAction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSynchronisingBehaviours_ForkAction(object sender, EventArgs eventArgs)
        {
            this.SynchronisingBehaviours_ForkAction = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.SynchronisingBehaviours_ForkAction))
            {
                return ModelHelper.CreatePath("SynchronisingBehaviours_ForkAction");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "SYNCHRONISINGBEHAVIOURS_FORKACTION"))
            {
                return this.SynchronisingBehaviours_ForkAction;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ASYNCHRONOUSFORKEDBEHAVIOURS_FORKACTION"))
            {
                return this._asynchronousForkedBehaviours_ForkAction;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SYNCHRONISINGBEHAVIOURS_FORKACTION"))
            {
                this.SynchronisingBehaviours_ForkAction = ((ISynchronisationPoint)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SYNCHRONISINGBEHAVIOURS_FORKACTION"))
            {
                return new SynchronisingBehaviours_ForkActionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SYNCHRONISINGBEHAVIOURS_FORKACTION"))
            {
                return new SynchronisingBehaviours_ForkActionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//ForkAction/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ForkAction class
        /// </summary>
        public class ForkActionChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ForkAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ForkActionChildrenCollection(ForkAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AsynchronousForkedBehaviours_ForkAction.Count);
                    if ((this._parent.SynchronisingBehaviours_ForkAction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AsynchronousForkedBehaviours_ForkAction.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SynchronisingBehaviours_ForkActionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AsynchronousForkedBehaviours_ForkAction.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SynchronisingBehaviours_ForkActionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IForkedBehaviour asynchronousForkedBehaviours_ForkActionCasted = item.As<IForkedBehaviour>();
                if ((asynchronousForkedBehaviours_ForkActionCasted != null))
                {
                    this._parent.AsynchronousForkedBehaviours_ForkAction.Add(asynchronousForkedBehaviours_ForkActionCasted);
                }
                if ((this._parent.SynchronisingBehaviours_ForkAction == null))
                {
                    ISynchronisationPoint synchronisingBehaviours_ForkActionCasted = item.As<ISynchronisationPoint>();
                    if ((synchronisingBehaviours_ForkActionCasted != null))
                    {
                        this._parent.SynchronisingBehaviours_ForkAction = synchronisingBehaviours_ForkActionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AsynchronousForkedBehaviours_ForkAction.Clear();
                this._parent.SynchronisingBehaviours_ForkAction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AsynchronousForkedBehaviours_ForkAction.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SynchronisingBehaviours_ForkAction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> asynchronousForkedBehaviours_ForkActionEnumerator = this._parent.AsynchronousForkedBehaviours_ForkAction.GetEnumerator();
                try
                {
                    for (
                    ; asynchronousForkedBehaviours_ForkActionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = asynchronousForkedBehaviours_ForkActionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    asynchronousForkedBehaviours_ForkActionEnumerator.Dispose();
                }
                if ((this._parent.SynchronisingBehaviours_ForkAction != null))
                {
                    array[arrayIndex] = this._parent.SynchronisingBehaviours_ForkAction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IForkedBehaviour forkedBehaviourItem = item.As<IForkedBehaviour>();
                if (((forkedBehaviourItem != null) 
                            && this._parent.AsynchronousForkedBehaviours_ForkAction.Remove(forkedBehaviourItem)))
                {
                    return true;
                }
                if ((this._parent.SynchronisingBehaviours_ForkAction == item))
                {
                    this._parent.SynchronisingBehaviours_ForkAction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AsynchronousForkedBehaviours_ForkAction).Concat(this._parent.SynchronisingBehaviours_ForkAction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ForkAction class
        /// </summary>
        public class ForkActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ForkAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ForkActionReferencedElementsCollection(ForkAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AsynchronousForkedBehaviours_ForkAction.Count);
                    if ((this._parent.SynchronisingBehaviours_ForkAction != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AsynchronousForkedBehaviours_ForkAction.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SynchronisingBehaviours_ForkActionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AsynchronousForkedBehaviours_ForkAction.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SynchronisingBehaviours_ForkActionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IForkedBehaviour asynchronousForkedBehaviours_ForkActionCasted = item.As<IForkedBehaviour>();
                if ((asynchronousForkedBehaviours_ForkActionCasted != null))
                {
                    this._parent.AsynchronousForkedBehaviours_ForkAction.Add(asynchronousForkedBehaviours_ForkActionCasted);
                }
                if ((this._parent.SynchronisingBehaviours_ForkAction == null))
                {
                    ISynchronisationPoint synchronisingBehaviours_ForkActionCasted = item.As<ISynchronisationPoint>();
                    if ((synchronisingBehaviours_ForkActionCasted != null))
                    {
                        this._parent.SynchronisingBehaviours_ForkAction = synchronisingBehaviours_ForkActionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AsynchronousForkedBehaviours_ForkAction.Clear();
                this._parent.SynchronisingBehaviours_ForkAction = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AsynchronousForkedBehaviours_ForkAction.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SynchronisingBehaviours_ForkAction))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> asynchronousForkedBehaviours_ForkActionEnumerator = this._parent.AsynchronousForkedBehaviours_ForkAction.GetEnumerator();
                try
                {
                    for (
                    ; asynchronousForkedBehaviours_ForkActionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = asynchronousForkedBehaviours_ForkActionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    asynchronousForkedBehaviours_ForkActionEnumerator.Dispose();
                }
                if ((this._parent.SynchronisingBehaviours_ForkAction != null))
                {
                    array[arrayIndex] = this._parent.SynchronisingBehaviours_ForkAction;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IForkedBehaviour forkedBehaviourItem = item.As<IForkedBehaviour>();
                if (((forkedBehaviourItem != null) 
                            && this._parent.AsynchronousForkedBehaviours_ForkAction.Remove(forkedBehaviourItem)))
                {
                    return true;
                }
                if ((this._parent.SynchronisingBehaviours_ForkAction == item))
                {
                    this._parent.SynchronisingBehaviours_ForkAction = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AsynchronousForkedBehaviours_ForkAction).Concat(this._parent.SynchronisingBehaviours_ForkAction).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the synchronisingBehaviours_ForkAction property
        /// </summary>
        private sealed class SynchronisingBehaviours_ForkActionProxy : ModelPropertyChange<IForkAction, ISynchronisationPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SynchronisingBehaviours_ForkActionProxy(IForkAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISynchronisationPoint Value
            {
                get
                {
                    return this.ModelElement.SynchronisingBehaviours_ForkAction;
                }
                set
                {
                    this.ModelElement.SynchronisingBehaviours_ForkAction = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SynchronisingBehaviours_ForkActionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SynchronisingBehaviours_ForkActionChanged -= handler;
            }
        }
    }
}

