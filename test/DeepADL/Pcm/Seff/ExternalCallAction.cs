//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using GeneratedCode.Identifier;
using GeneratedCode.Pcm.Core;
using GeneratedCode.Pcm.Core.Entity;
using GeneratedCode.Pcm.Parameter;
using GeneratedCode.Pcm.Reliability;
using GeneratedCode.Pcm.Repository;
using GeneratedCode.Pcm.Seff.Seff_performance;
using GeneratedCode.Pcm.Seff.Seff_reliability;
using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace GeneratedCode.Pcm.Seff
{
    
    
    /// <summary>
    /// The default implementation of the ExternalCallAction class
    /// </summary>
    [XmlNamespaceAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/SEFF/5.0")]
    [XmlNamespacePrefixAttribute("seff")]
    [ModelRepresentationClassAttribute("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//ExternalCallAction/")]
    [DebuggerDisplayAttribute("ExternalCallAction {Id}")]
    public class ExternalCallAction : AbstractAction, IExternalCallAction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RetryCount property
        /// </summary>
        private int _retryCount = 0;
        
        /// <summary>
        /// The backing field for the CalledService_ExternalService property
        /// </summary>
        private IOperationSignature _calledService_ExternalService;
        
        /// <summary>
        /// The backing field for the Role_ExternalService property
        /// </summary>
        private IOperationRequiredRole _role_ExternalService;
        
        /// <summary>
        /// The backing field for the ReturnVariableUsage__CallReturnAction property
        /// </summary>
        private CallReturnActionReturnVariableUsage__CallReturnActionCollection _returnVariableUsage__CallReturnAction;
        
        /// <summary>
        /// The backing field for the InputVariableUsages__CallAction property
        /// </summary>
        private CallActionInputVariableUsages__CallActionCollection _inputVariableUsages__CallAction;
        
        /// <summary>
        /// The backing field for the FailureTypes_FailureHandlingEntity property
        /// </summary>
        private ObservableAssociationList<IFailureType> _failureTypes_FailureHandlingEntity;
        
        public ExternalCallAction()
        {
            this._returnVariableUsage__CallReturnAction = new CallReturnActionReturnVariableUsage__CallReturnActionCollection(this);
            this._returnVariableUsage__CallReturnAction.CollectionChanged += this.ReturnVariableUsage__CallReturnActionCollectionChanged;
            this._inputVariableUsages__CallAction = new CallActionInputVariableUsages__CallActionCollection(this);
            this._inputVariableUsages__CallAction.CollectionChanged += this.InputVariableUsages__CallActionCollectionChanged;
            this._failureTypes_FailureHandlingEntity = new ObservableAssociationList<IFailureType>();
            this._failureTypes_FailureHandlingEntity.CollectionChanged += this.FailureTypes_FailureHandlingEntityCollectionChanged;
        }
        
        /// <summary>
        /// The retryCount property
        /// </summary>
        [DefaultValueAttribute(0)]
        [XmlElementNameAttribute("retryCount")]
        [XmlAttributeAttribute(true)]
        public virtual int RetryCount
        {
            get
            {
                return this._retryCount;
            }
            set
            {
                if ((this._retryCount != value))
                {
                    int old = this._retryCount;
                    this._retryCount = value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRetryCountChanged(e);
                    this.OnPropertyChanged("RetryCount", e);
                }
            }
        }
        
        /// <summary>
        /// The calledService_ExternalService property
        /// </summary>
        [XmlElementNameAttribute("calledService_ExternalService")]
        [XmlAttributeAttribute(true)]
        public virtual IOperationSignature CalledService_ExternalService
        {
            get
            {
                return this._calledService_ExternalService;
            }
            set
            {
                if ((this._calledService_ExternalService != value))
                {
                    IOperationSignature old = this._calledService_ExternalService;
                    this._calledService_ExternalService = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCalledService_ExternalService;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCalledService_ExternalService;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCalledService_ExternalServiceChanged(e);
                    this.OnPropertyChanged("CalledService_ExternalService", e);
                }
            }
        }
        
        /// <summary>
        /// The role_ExternalService property
        /// </summary>
        [XmlElementNameAttribute("role_ExternalService")]
        [XmlAttributeAttribute(true)]
        public virtual IOperationRequiredRole Role_ExternalService
        {
            get
            {
                return this._role_ExternalService;
            }
            set
            {
                if ((this._role_ExternalService != value))
                {
                    IOperationRequiredRole old = this._role_ExternalService;
                    this._role_ExternalService = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetRole_ExternalService;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetRole_ExternalService;
                    }
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRole_ExternalServiceChanged(e);
                    this.OnPropertyChanged("Role_ExternalService", e);
                }
            }
        }
        
        /// <summary>
        /// The returnVariableUsage__CallReturnAction property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("returnVariableUsage__CallReturnAction")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("callReturnAction__VariableUsage")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IVariableUsage> ReturnVariableUsage__CallReturnAction
        {
            get
            {
                return this._returnVariableUsage__CallReturnAction;
            }
        }
        
        /// <summary>
        /// The inputVariableUsages__CallAction property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("inputVariableUsages__CallAction")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [XmlOppositeAttribute("callAction__VariableUsage")]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IVariableUsage> InputVariableUsages__CallAction
        {
            get
            {
                return this._inputVariableUsages__CallAction;
            }
        }
        
        /// <summary>
        /// The failureTypes_FailureHandlingEntity property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("failureTypes_FailureHandlingEntity")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual ICollectionExpression<IFailureType> FailureTypes_FailureHandlingEntity
        {
            get
            {
                return this._failureTypes_FailureHandlingEntity;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ExternalCallActionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class element that describes the structure of this type
        /// </summary>
        public new static NMF.Models.Meta.IClass ClassInstance
        {
            get
            {
                return NMF.Models.Repository.MetaRepository.Instance.ResolveClass("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//ExternalCallAction/");
            }
        }
        
        /// <summary>
        /// Gets fired when the RetryCount property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> RetryCountChanged;
        
        /// <summary>
        /// Gets fired when the CalledService_ExternalService property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> CalledService_ExternalServiceChanged;
        
        /// <summary>
        /// Gets fired when the Role_ExternalService property changed its value
        /// </summary>
        public event EventHandler<ValueChangedEventArgs> Role_ExternalServiceChanged;
        
        /// <summary>
        /// Raises the RetryCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRetryCountChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.RetryCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CalledService_ExternalServiceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalledService_ExternalServiceChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.CalledService_ExternalServiceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CalledService_ExternalService property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCalledService_ExternalService(object sender, EventArgs eventArgs)
        {
            this.CalledService_ExternalService = null;
        }
        
        /// <summary>
        /// Raises the Role_ExternalServiceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRole_ExternalServiceChanged(ValueChangedEventArgs eventArgs)
        {
            EventHandler<ValueChangedEventArgs> handler = this.Role_ExternalServiceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Role_ExternalService property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRole_ExternalService(object sender, EventArgs eventArgs)
        {
            this.Role_ExternalService = null;
        }
        
        /// <summary>
        /// Forwards change notifications for the ReturnVariableUsage__CallReturnAction property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReturnVariableUsage__CallReturnActionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReturnVariableUsage__CallReturnAction", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the InputVariableUsages__CallAction property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InputVariableUsages__CallActionCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InputVariableUsages__CallAction", e);
        }
        
        /// <summary>
        /// Forwards change notifications for the FailureTypes_FailureHandlingEntity property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FailureTypes_FailureHandlingEntityCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FailureTypes_FailureHandlingEntity", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RETRYCOUNT"))
            {
                return this.RetryCount;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RETURNVARIABLEUSAGE__CALLRETURNACTION"))
            {
                return this._returnVariableUsage__CallReturnAction;
            }
            if ((feature == "INPUTVARIABLEUSAGES__CALLACTION"))
            {
                return this._inputVariableUsages__CallAction;
            }
            if ((feature == "FAILURETYPES_FAILUREHANDLINGENTITY"))
            {
                return this._failureTypes_FailureHandlingEntity;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CALLEDSERVICE_EXTERNALSERVICE"))
            {
                this.CalledService_ExternalService = ((IOperationSignature)(value));
                return;
            }
            if ((feature == "ROLE_EXTERNALSERVICE"))
            {
                this.Role_ExternalService = ((IOperationRequiredRole)(value));
                return;
            }
            if ((feature == "RETRYCOUNT"))
            {
                this.RetryCount = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CALLEDSERVICE_EXTERNALSERVICE"))
            {
                return new CalledService_ExternalServiceProxy(this);
            }
            if ((attribute == "ROLE_EXTERNALSERVICE"))
            {
                return new Role_ExternalServiceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CALLEDSERVICE_EXTERNALSERVICE"))
            {
                return new CalledService_ExternalServiceProxy(this);
            }
            if ((reference == "ROLE_EXTERNALSERVICE"))
            {
                return new Role_ExternalServiceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            return ((IClass)(NMF.Models.Repository.MetaRepository.Instance.Resolve("http://sdq.ipd.uka.de/PalladioComponentModel/5.0#//seff//ExternalCallAction/")));
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ExternalCallAction class
        /// </summary>
        public class ExternalCallActionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ExternalCallAction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ExternalCallActionReferencedElementsCollection(ExternalCallAction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CalledService_ExternalService != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Role_ExternalService != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ReturnVariableUsage__CallReturnAction.Count);
                    count = (count + this._parent.InputVariableUsages__CallAction.Count);
                    count = (count + this._parent.FailureTypes_FailureHandlingEntity.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CalledService_ExternalServiceChanged += this.PropagateValueChanges;
                this._parent.Role_ExternalServiceChanged += this.PropagateValueChanges;
                this._parent.ReturnVariableUsage__CallReturnAction.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InputVariableUsages__CallAction.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FailureTypes_FailureHandlingEntity.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CalledService_ExternalServiceChanged -= this.PropagateValueChanges;
                this._parent.Role_ExternalServiceChanged -= this.PropagateValueChanges;
                this._parent.ReturnVariableUsage__CallReturnAction.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InputVariableUsages__CallAction.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FailureTypes_FailureHandlingEntity.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CalledService_ExternalService == null))
                {
                    IOperationSignature calledService_ExternalServiceCasted = item.As<IOperationSignature>();
                    if ((calledService_ExternalServiceCasted != null))
                    {
                        this._parent.CalledService_ExternalService = calledService_ExternalServiceCasted;
                        return;
                    }
                }
                if ((this._parent.Role_ExternalService == null))
                {
                    IOperationRequiredRole role_ExternalServiceCasted = item.As<IOperationRequiredRole>();
                    if ((role_ExternalServiceCasted != null))
                    {
                        this._parent.Role_ExternalService = role_ExternalServiceCasted;
                        return;
                    }
                }
                IVariableUsage returnVariableUsage__CallReturnActionCasted = item.As<IVariableUsage>();
                if ((returnVariableUsage__CallReturnActionCasted != null))
                {
                    this._parent.ReturnVariableUsage__CallReturnAction.Add(returnVariableUsage__CallReturnActionCasted);
                }
                IVariableUsage inputVariableUsages__CallActionCasted = item.As<IVariableUsage>();
                if ((inputVariableUsages__CallActionCasted != null))
                {
                    this._parent.InputVariableUsages__CallAction.Add(inputVariableUsages__CallActionCasted);
                }
                IFailureType failureTypes_FailureHandlingEntityCasted = item.As<IFailureType>();
                if ((failureTypes_FailureHandlingEntityCasted != null))
                {
                    this._parent.FailureTypes_FailureHandlingEntity.Add(failureTypes_FailureHandlingEntityCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CalledService_ExternalService = null;
                this._parent.Role_ExternalService = null;
                this._parent.ReturnVariableUsage__CallReturnAction.Clear();
                this._parent.InputVariableUsages__CallAction.Clear();
                this._parent.FailureTypes_FailureHandlingEntity.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CalledService_ExternalService))
                {
                    return true;
                }
                if ((item == this._parent.Role_ExternalService))
                {
                    return true;
                }
                if (this._parent.ReturnVariableUsage__CallReturnAction.Contains(item))
                {
                    return true;
                }
                if (this._parent.InputVariableUsages__CallAction.Contains(item))
                {
                    return true;
                }
                if (this._parent.FailureTypes_FailureHandlingEntity.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CalledService_ExternalService != null))
                {
                    array[arrayIndex] = this._parent.CalledService_ExternalService;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Role_ExternalService != null))
                {
                    array[arrayIndex] = this._parent.Role_ExternalService;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> returnVariableUsage__CallReturnActionEnumerator = this._parent.ReturnVariableUsage__CallReturnAction.GetEnumerator();
                try
                {
                    for (
                    ; returnVariableUsage__CallReturnActionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = returnVariableUsage__CallReturnActionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    returnVariableUsage__CallReturnActionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> inputVariableUsages__CallActionEnumerator = this._parent.InputVariableUsages__CallAction.GetEnumerator();
                try
                {
                    for (
                    ; inputVariableUsages__CallActionEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inputVariableUsages__CallActionEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inputVariableUsages__CallActionEnumerator.Dispose();
                }
                IEnumerator<IModelElement> failureTypes_FailureHandlingEntityEnumerator = this._parent.FailureTypes_FailureHandlingEntity.GetEnumerator();
                try
                {
                    for (
                    ; failureTypes_FailureHandlingEntityEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = failureTypes_FailureHandlingEntityEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    failureTypes_FailureHandlingEntityEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CalledService_ExternalService == item))
                {
                    this._parent.CalledService_ExternalService = null;
                    return true;
                }
                if ((this._parent.Role_ExternalService == item))
                {
                    this._parent.Role_ExternalService = null;
                    return true;
                }
                IVariableUsage variableUsageItem = item.As<IVariableUsage>();
                if (((variableUsageItem != null) 
                            && this._parent.ReturnVariableUsage__CallReturnAction.Remove(variableUsageItem)))
                {
                    return true;
                }
                if (((variableUsageItem != null) 
                            && this._parent.InputVariableUsages__CallAction.Remove(variableUsageItem)))
                {
                    return true;
                }
                IFailureType failureTypeItem = item.As<IFailureType>();
                if (((failureTypeItem != null) 
                            && this._parent.FailureTypes_FailureHandlingEntity.Remove(failureTypeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CalledService_ExternalService).Concat(this._parent.Role_ExternalService).Concat(this._parent.ReturnVariableUsage__CallReturnAction).Concat(this._parent.InputVariableUsages__CallAction).Concat(this._parent.FailureTypes_FailureHandlingEntity).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the retryCount property
        /// </summary>
        private sealed class RetryCountProxy : ModelPropertyChange<IExternalCallAction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RetryCountProxy(IExternalCallAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.RetryCount;
                }
                set
                {
                    this.ModelElement.RetryCount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RetryCountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RetryCountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the calledService_ExternalService property
        /// </summary>
        private sealed class CalledService_ExternalServiceProxy : ModelPropertyChange<IExternalCallAction, IOperationSignature>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CalledService_ExternalServiceProxy(IExternalCallAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperationSignature Value
            {
                get
                {
                    return this.ModelElement.CalledService_ExternalService;
                }
                set
                {
                    this.ModelElement.CalledService_ExternalService = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CalledService_ExternalServiceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CalledService_ExternalServiceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the role_ExternalService property
        /// </summary>
        private sealed class Role_ExternalServiceProxy : ModelPropertyChange<IExternalCallAction, IOperationRequiredRole>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Role_ExternalServiceProxy(IExternalCallAction modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperationRequiredRole Value
            {
                get
                {
                    return this.ModelElement.Role_ExternalService;
                }
                set
                {
                    this.ModelElement.Role_ExternalService = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Role_ExternalServiceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Role_ExternalServiceChanged -= handler;
            }
        }
    }
}

